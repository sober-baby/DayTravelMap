<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string@plt (15 samples, 0.02%)</title><rect x="1104.7" y="197" width="0.2" height="15.0" fill="rgb(227,77,49)" rx="2" ry="2" />
<text  x="1107.73" y="207.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;OSMID&amp;&amp;&gt; &gt; (21 samples, 0.02%)</title><rect x="966.6" y="261" width="0.3" height="15.0" fill="rgb(241,149,8)" rx="2" ry="2" />
<text  x="969.64" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (50 samples, 0.06%)</title><rect x="774.8" y="213" width="0.7" height="15.0" fill="rgb(225,209,4)" rx="2" ry="2" />
<text  x="777.83" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (36 samples, 0.04%)</title><rect x="741.6" y="213" width="0.5" height="15.0" fill="rgb(252,1,12)" rx="2" ry="2" />
<text  x="744.58" y="223.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;WaveElem, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;, WaveElem::Compare&gt;::emplace&lt;int&amp;, int&amp;, double&amp;, double&amp;&gt; (227 samples, 0.25%)</title><rect x="982.8" y="261" width="2.9" height="15.0" fill="rgb(251,227,11)" rx="2" ry="2" />
<text  x="985.76" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (112 samples, 0.12%)</title><rect x="1016.1" y="261" width="1.5" height="15.0" fill="rgb(251,63,19)" rx="2" ry="2" />
<text  x="1019.13" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (9 samples, 0.01%)</title><rect x="1131.5" y="149" width="0.1" height="15.0" fill="rgb(207,184,7)" rx="2" ry="2" />
<text  x="1134.46" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::back (141 samples, 0.16%)</title><rect x="161.7" y="197" width="1.8" height="15.0" fill="rgb(224,15,34)" rx="2" ry="2" />
<text  x="164.66" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="1179.4" y="165" width="0.1" height="15.0" fill="rgb(245,210,45)" rx="2" ry="2" />
<text  x="1182.43" y="175.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (41 samples, 0.05%)</title><rect x="731.3" y="149" width="0.6" height="15.0" fill="rgb(238,130,54)" rx="2" ry="2" />
<text  x="734.33" y="159.5" ></text>
</g>
<g >
<title>all (89,964 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(222,44,10)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (50 samples, 0.06%)</title><rect x="774.8" y="181" width="0.7" height="15.0" fill="rgb(216,73,7)" rx="2" ry="2" />
<text  x="777.83" y="191.5" ></text>
</g>
<g >
<title>std::map&lt;OSMID, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (106 samples, 0.12%)</title><rect x="1088.6" y="197" width="1.4" height="15.0" fill="rgb(218,49,7)" rx="2" ry="2" />
<text  x="1091.60" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (32 samples, 0.04%)</title><rect x="1075.4" y="149" width="0.4" height="15.0" fill="rgb(226,30,30)" rx="2" ry="2" />
<text  x="1078.38" y="159.5" ></text>
</g>
<g >
<title>__dynamic_cast (12 samples, 0.01%)</title><rect x="734.7" y="149" width="0.1" height="15.0" fill="rgb(236,89,22)" rx="2" ry="2" />
<text  x="737.65" y="159.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (32 samples, 0.04%)</title><rect x="817.2" y="197" width="0.4" height="15.0" fill="rgb(222,199,13)" rx="2" ry="2" />
<text  x="820.17" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator- (125 samples, 0.14%)</title><rect x="611.3" y="261" width="1.7" height="15.0" fill="rgb(248,191,18)" rx="2" ry="2" />
<text  x="614.32" y="271.5" ></text>
</g>
<g >
<title>operator new (34 samples, 0.04%)</title><rect x="815.6" y="165" width="0.5" height="15.0" fill="rgb(232,57,1)" rx="2" ry="2" />
<text  x="818.61" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10 samples, 0.01%)</title><rect x="906.6" y="261" width="0.1" height="15.0" fill="rgb(244,43,12)" rx="2" ry="2" />
<text  x="909.58" y="271.5" ></text>
</g>
<g >
<title>loadStreetLengthsAndTravelTime (96 samples, 0.11%)</title><rect x="1092.6" y="213" width="1.2" height="15.0" fill="rgb(218,213,42)" rx="2" ry="2" />
<text  x="1095.58" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (302 samples, 0.34%)</title><rect x="471.0" y="181" width="3.9" height="15.0" fill="rgb(225,190,24)" rx="2" ry="2" />
<text  x="473.99" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (9 samples, 0.01%)</title><rect x="689.0" y="133" width="0.1" height="15.0" fill="rgb(249,63,9)" rx="2" ry="2" />
<text  x="692.01" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::get_library_version (26 samples, 0.03%)</title><rect x="728.0" y="149" width="0.4" height="15.0" fill="rgb(212,18,16)" rx="2" ry="2" />
<text  x="731.02" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;OSMNode, std::allocator&lt;OSMNode&gt; &gt;::_M_default_append (313 samples, 0.35%)</title><rect x="801.3" y="181" width="4.1" height="15.0" fill="rgb(240,4,19)" rx="2" ry="2" />
<text  x="804.34" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (22 samples, 0.02%)</title><rect x="699.3" y="213" width="0.3" height="15.0" fill="rgb(243,62,7)" rx="2" ry="2" />
<text  x="702.28" y="223.5" ></text>
</g>
<g >
<title>y_from_lat (12 samples, 0.01%)</title><rect x="1080.1" y="181" width="0.1" height="15.0" fill="rgb(242,195,43)" rx="2" ry="2" />
<text  x="1083.08" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (52 samples, 0.06%)</title><rect x="813.9" y="181" width="0.7" height="15.0" fill="rgb(222,173,2)" rx="2" ry="2" />
<text  x="816.93" y="191.5" ></text>
</g>
<g >
<title>_int_free (11 samples, 0.01%)</title><rect x="1067.7" y="181" width="0.1" height="15.0" fill="rgb(237,74,14)" rx="2" ry="2" />
<text  x="1070.70" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (31 samples, 0.03%)</title><rect x="1062.9" y="133" width="0.4" height="15.0" fill="rgb(254,47,6)" rx="2" ry="2" />
<text  x="1065.92" y="143.5" ></text>
</g>
<g >
<title>std::move&lt;WaveElem&amp;&gt; (814 samples, 0.90%)</title><rect x="968.6" y="261" width="10.7" height="15.0" fill="rgb(222,137,29)" rx="2" ry="2" />
<text  x="971.64" y="271.5" ></text>
</g>
<g >
<title>loadSubwayStations (371 samples, 0.41%)</title><rect x="1101.1" y="213" width="4.9" height="15.0" fill="rgb(235,80,9)" rx="2" ry="2" />
<text  x="1104.08" y="223.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, OSMID&amp;&amp;&gt; (8 samples, 0.01%)</title><rect x="1163.8" y="101" width="0.1" height="15.0" fill="rgb(241,25,54)" rx="2" ry="2" />
<text  x="1166.79" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (27 samples, 0.03%)</title><rect x="1084.8" y="197" width="0.3" height="15.0" fill="rgb(252,135,8)" rx="2" ry="2" />
<text  x="1087.79" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (12 samples, 0.01%)</title><rect x="1183.6" y="261" width="0.2" height="15.0" fill="rgb(211,1,1)" rx="2" ry="2" />
<text  x="1186.61" y="271.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (1,836 samples, 2.04%)</title><rect x="475.3" y="197" width="24.1" height="15.0" fill="rgb(239,119,0)" rx="2" ry="2" />
<text  x="478.30" y="207.5" >s..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMRelation, std::allocator&lt;OSMRelation&gt; &gt; &gt;::load_object_data (25 samples, 0.03%)</title><rect x="705.2" y="229" width="0.3" height="15.0" fill="rgb(228,85,44)" rx="2" ry="2" />
<text  x="708.21" y="239.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned int&gt; &gt; &gt; (11 samples, 0.01%)</title><rect x="700.3" y="245" width="0.1" height="15.0" fill="rgb(216,164,4)" rx="2" ry="2" />
<text  x="703.29" y="255.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (37 samples, 0.04%)</title><rect x="729.3" y="133" width="0.5" height="15.0" fill="rgb(251,82,9)" rx="2" ry="2" />
<text  x="732.30" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMWay, std::allocator&lt;OSMWay&gt; &gt; &gt;::load_object_data (359 samples, 0.40%)</title><rect x="805.5" y="197" width="4.7" height="15.0" fill="rgb(238,138,13)" rx="2" ry="2" />
<text  x="808.52" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (8 samples, 0.01%)</title><rect x="499.4" y="197" width="0.1" height="15.0" fill="rgb(236,198,44)" rx="2" ry="2" />
<text  x="502.38" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::pop_back (29 samples, 0.03%)</title><rect x="1010.7" y="261" width="0.4" height="15.0" fill="rgb(227,154,19)" rx="2" ry="2" />
<text  x="1013.71" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Node*&gt; (784 samples, 0.87%)</title><rect x="510.9" y="213" width="10.3" height="15.0" fill="rgb(229,148,6)" rx="2" ry="2" />
<text  x="513.94" y="223.5" ></text>
</g>
<g >
<title>loadFeatureType (56 samples, 0.06%)</title><rect x="759.2" y="261" width="0.7" height="15.0" fill="rgb(241,51,21)" rx="2" ry="2" />
<text  x="762.17" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (358 samples, 0.40%)</title><rect x="686.2" y="197" width="4.7" height="15.0" fill="rgb(215,87,34)" rx="2" ry="2" />
<text  x="689.21" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (16 samples, 0.02%)</title><rect x="796.4" y="133" width="0.2" height="15.0" fill="rgb(238,26,17)" rx="2" ry="2" />
<text  x="799.38" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, EdgeProperties&gt;::load_object_data (27 samples, 0.03%)</title><rect x="696.8" y="181" width="0.3" height="15.0" fill="rgb(250,152,17)" rx="2" ry="2" />
<text  x="699.76" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (13 samples, 0.01%)</title><rect x="640.3" y="101" width="0.2" height="15.0" fill="rgb(248,140,11)" rx="2" ry="2" />
<text  x="643.28" y="111.5" ></text>
</g>
<g >
<title>getTagCount (21 samples, 0.02%)</title><rect x="758.5" y="261" width="0.2" height="15.0" fill="rgb(253,113,21)" rx="2" ry="2" />
<text  x="761.47" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (144 samples, 0.16%)</title><rect x="693.3" y="133" width="1.9" height="15.0" fill="rgb(226,207,47)" rx="2" ry="2" />
<text  x="696.27" y="143.5" ></text>
</g>
<g >
<title>png_read_row (19 samples, 0.02%)</title><rect x="10.2" y="181" width="0.2" height="15.0" fill="rgb(222,91,23)" rx="2" ry="2" />
<text  x="13.18" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (8 samples, 0.01%)</title><rect x="670.8" y="117" width="0.1" height="15.0" fill="rgb(226,179,14)" rx="2" ry="2" />
<text  x="673.79" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (85 samples, 0.09%)</title><rect x="504.8" y="181" width="1.1" height="15.0" fill="rgb(225,47,14)" rx="2" ry="2" />
<text  x="507.76" y="191.5" ></text>
</g>
<g >
<title>__dynamic_cast (23 samples, 0.03%)</title><rect x="702.1" y="165" width="0.3" height="15.0" fill="rgb(247,60,44)" rx="2" ry="2" />
<text  x="705.08" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (8 samples, 0.01%)</title><rect x="729.0" y="133" width="0.1" height="15.0" fill="rgb(241,132,53)" rx="2" ry="2" />
<text  x="732.01" y="143.5" ></text>
</g>
<g >
<title>findFeatureArea (271 samples, 0.30%)</title><rect x="1067.8" y="181" width="3.6" height="15.0" fill="rgb(252,150,20)" rx="2" ry="2" />
<text  x="1070.85" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;ezgl::point2d const*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt;, ezgl::point2d*&gt; (95 samples, 0.11%)</title><rect x="939.5" y="261" width="1.2" height="15.0" fill="rgb(237,216,42)" rx="2" ry="2" />
<text  x="942.50" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (39 samples, 0.04%)</title><rect x="775.7" y="181" width="0.5" height="15.0" fill="rgb(215,116,12)" rx="2" ry="2" />
<text  x="778.67" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (182 samples, 0.20%)</title><rect x="170.9" y="181" width="2.3" height="15.0" fill="rgb(250,42,45)" rx="2" ry="2" />
<text  x="173.86" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator-- (33 samples, 0.04%)</title><rect x="613.0" y="261" width="0.4" height="15.0" fill="rgb(254,82,32)" rx="2" ry="2" />
<text  x="615.96" y="271.5" ></text>
</g>
<g >
<title>WaveElem::Compare::operator() (604 samples, 0.67%)</title><rect x="434.5" y="181" width="7.9" height="15.0" fill="rgb(236,214,1)" rx="2" ry="2" />
<text  x="437.52" y="191.5" ></text>
</g>
<g >
<title>OSMDatabase::buildOSMIDMaps (514 samples, 0.57%)</title><rect x="760.3" y="213" width="6.7" height="15.0" fill="rgb(252,153,43)" rx="2" ry="2" />
<text  x="763.27" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;Intersection_data, std::allocator&lt;Intersection_data&gt; &gt;::~vector (9 samples, 0.01%)</title><rect x="1064.0" y="197" width="0.1" height="15.0" fill="rgb(220,82,38)" rx="2" ry="2" />
<text  x="1066.95" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (206 samples, 0.23%)</title><rect x="793.7" y="133" width="2.7" height="15.0" fill="rgb(251,210,37)" rx="2" ry="2" />
<text  x="796.68" y="143.5" ></text>
</g>
<g >
<title>getFeatureType (68 samples, 0.08%)</title><rect x="1072.2" y="181" width="0.9" height="15.0" fill="rgb(254,219,42)" rx="2" ry="2" />
<text  x="1075.18" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator+ (1,572 samples, 1.75%)</title><rect x="590.7" y="261" width="20.6" height="15.0" fill="rgb(240,139,14)" rx="2" ry="2" />
<text  x="593.70" y="271.5" ></text>
</g>
<g >
<title>__run_exit_handlers (3,643 samples, 4.05%)</title><rect x="1018.7" y="229" width="47.8" height="15.0" fill="rgb(207,220,35)" rx="2" ry="2" />
<text  x="1021.73" y="239.5" >__ru..</text>
</g>
<g >
<title>getTagPair[abi:cxx11] (165 samples, 0.18%)</title><rect x="1085.7" y="197" width="2.2" height="15.0" fill="rgb(226,4,46)" rx="2" ry="2" />
<text  x="1088.71" y="207.5" ></text>
</g>
<g >
<title>malloc_consolidate (1,873 samples, 2.08%)</title><rect x="1018.7" y="181" width="24.6" height="15.0" fill="rgb(244,161,14)" rx="2" ry="2" />
<text  x="1021.73" y="191.5" >m..</text>
</g>
<g >
<title>tcache_get (8 samples, 0.01%)</title><rect x="729.9" y="117" width="0.1" height="15.0" fill="rgb(225,163,26)" rx="2" ry="2" />
<text  x="732.89" y="127.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (10 samples, 0.01%)</title><rect x="717.8" y="133" width="0.1" height="15.0" fill="rgb(243,88,14)" rx="2" ry="2" />
<text  x="720.81" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (9 samples, 0.01%)</title><rect x="912.0" y="261" width="0.1" height="15.0" fill="rgb(232,217,38)" rx="2" ry="2" />
<text  x="915.01" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (12 samples, 0.01%)</title><rect x="640.1" y="117" width="0.1" height="15.0" fill="rgb(254,129,38)" rx="2" ry="2" />
<text  x="643.08" y="127.5" ></text>
</g>
<g >
<title>std::abs (80 samples, 0.09%)</title><rect x="153.5" y="197" width="1.0" height="15.0" fill="rgb(247,118,34)" rx="2" ry="2" />
<text  x="156.45" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;Street_segment_data, std::allocator&lt;Street_segment_data&gt; &gt;::~vector (154 samples, 0.17%)</title><rect x="1064.1" y="197" width="2.0" height="15.0" fill="rgb(219,4,35)" rx="2" ry="2" />
<text  x="1067.07" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;ezgl::point2d const*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt;::operator++ (18 samples, 0.02%)</title><rect x="614.4" y="261" width="0.3" height="15.0" fill="rgb(248,97,42)" rx="2" ry="2" />
<text  x="617.44" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (25 samples, 0.03%)</title><rect x="670.7" y="197" width="0.3" height="15.0" fill="rgb(226,95,12)" rx="2" ry="2" />
<text  x="673.66" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash@plt (14 samples, 0.02%)</title><rect x="766.8" y="197" width="0.2" height="15.0" fill="rgb(210,119,6)" rx="2" ry="2" />
<text  x="769.83" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_Vector_base (48 samples, 0.05%)</title><rect x="637.4" y="133" width="0.7" height="15.0" fill="rgb(221,219,44)" rx="2" ry="2" />
<text  x="640.45" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (19 samples, 0.02%)</title><rect x="709.6" y="149" width="0.2" height="15.0" fill="rgb(247,165,22)" rx="2" ry="2" />
<text  x="712.60" y="159.5" ></text>
</g>
<g >
<title>calculateAngle (94 samples, 0.10%)</title><rect x="1094.1" y="197" width="1.3" height="15.0" fill="rgb(250,35,18)" rx="2" ry="2" />
<text  x="1097.12" y="207.5" ></text>
</g>
<g >
<title>__cos_fma (19 samples, 0.02%)</title><rect x="1092.9" y="149" width="0.3" height="15.0" fill="rgb(228,213,3)" rx="2" ry="2" />
<text  x="1095.94" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; const&amp;&gt; (17 samples, 0.02%)</title><rect x="816.1" y="181" width="0.2" height="15.0" fill="rgb(217,182,34)" rx="2" ry="2" />
<text  x="819.07" y="191.5" ></text>
</g>
<g >
<title>distanceHeuristicFunc (2,546 samples, 2.83%)</title><rect x="121.1" y="213" width="33.4" height="15.0" fill="rgb(242,103,14)" rx="2" ry="2" />
<text  x="124.11" y="223.5" >di..</text>
</g>
<g >
<title>elf_machine_rela (23 samples, 0.03%)</title><rect x="755.5" y="213" width="0.3" height="15.0" fill="rgb(224,183,22)" rx="2" ry="2" />
<text  x="758.51" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (647 samples, 0.72%)</title><rect x="674.2" y="149" width="8.5" height="15.0" fill="rgb(249,213,2)" rx="2" ry="2" />
<text  x="677.20" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (11 samples, 0.01%)</title><rect x="700.3" y="197" width="0.1" height="15.0" fill="rgb(215,69,35)" rx="2" ry="2" />
<text  x="703.29" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (10 samples, 0.01%)</title><rect x="717.6" y="165" width="0.1" height="15.0" fill="rgb(208,213,39)" rx="2" ry="2" />
<text  x="720.61" y="175.5" ></text>
</g>
<g >
<title>elf_dynamic_do_Rela (23 samples, 0.03%)</title><rect x="755.5" y="229" width="0.3" height="15.0" fill="rgb(225,166,5)" rx="2" ry="2" />
<text  x="758.51" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (21 samples, 0.02%)</title><rect x="640.5" y="165" width="0.2" height="15.0" fill="rgb(250,43,21)" rx="2" ry="2" />
<text  x="643.45" y="175.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.01%)</title><rect x="640.3" y="117" width="0.2" height="15.0" fill="rgb(215,191,11)" rx="2" ry="2" />
<text  x="643.28" y="127.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.02%)</title><rect x="10.2" y="165" width="0.2" height="15.0" fill="rgb(238,47,50)" rx="2" ry="2" />
<text  x="13.18" y="175.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.01%)</title><rect x="640.1" y="149" width="0.1" height="15.0" fill="rgb(213,4,43)" rx="2" ry="2" />
<text  x="643.08" y="159.5" ></text>
</g>
<g >
<title>findStreetSegmentLength (10 samples, 0.01%)</title><rect x="756.2" y="261" width="0.2" height="15.0" fill="rgb(222,154,52)" rx="2" ry="2" />
<text  x="759.23" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_erase (13 samples, 0.01%)</title><rect x="1066.2" y="117" width="0.2" height="15.0" fill="rgb(230,48,28)" rx="2" ry="2" />
<text  x="1069.25" y="127.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.02%)</title><rect x="1180.5" y="261" width="0.3" height="15.0" fill="rgb(223,220,41)" rx="2" ry="2" />
<text  x="1183.50" y="271.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.01%)</title><rect x="737.3" y="149" width="0.1" height="15.0" fill="rgb(218,34,41)" rx="2" ry="2" />
<text  x="740.28" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMID, std::allocator&lt;OSMID&gt; &gt; &gt;::load_object_data (53 samples, 0.06%)</title><rect x="682.9" y="165" width="0.7" height="15.0" fill="rgb(232,107,50)" rx="2" ry="2" />
<text  x="685.86" y="175.5" ></text>
</g>
<g >
<title>std::push_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, WaveElem::Compare&gt; (273 samples, 0.30%)</title><rect x="987.9" y="261" width="3.6" height="15.0" fill="rgb(234,57,17)" rx="2" ry="2" />
<text  x="990.89" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator+ (557 samples, 0.62%)</title><rect x="410.2" y="133" width="7.3" height="15.0" fill="rgb(253,96,28)" rx="2" ry="2" />
<text  x="413.18" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt;::deallocate (9 samples, 0.01%)</title><rect x="1056.7" y="149" width="0.2" height="15.0" fill="rgb(219,171,27)" rx="2" ry="2" />
<text  x="1059.74" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (144 samples, 0.16%)</title><rect x="732.1" y="165" width="1.9" height="15.0" fill="rgb(240,218,23)" rx="2" ry="2" />
<text  x="735.12" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (10 samples, 0.01%)</title><rect x="717.8" y="213" width="0.1" height="15.0" fill="rgb(221,155,14)" rx="2" ry="2" />
<text  x="720.81" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (76 samples, 0.08%)</title><rect x="1187.9" y="261" width="1.0" height="15.0" fill="rgb(225,211,54)" rx="2" ry="2" />
<text  x="1190.89" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (21 samples, 0.02%)</title><rect x="688.7" y="133" width="0.3" height="15.0" fill="rgb(223,81,13)" rx="2" ry="2" />
<text  x="691.73" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (556 samples, 0.62%)</title><rect x="730.2" y="245" width="7.3" height="15.0" fill="rgb(225,124,38)" rx="2" ry="2" />
<text  x="733.23" y="255.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned int&gt; &gt; &gt; (39 samples, 0.04%)</title><rect x="775.7" y="165" width="0.5" height="15.0" fill="rgb(247,212,16)" rx="2" ry="2" />
<text  x="778.67" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast (9 samples, 0.01%)</title><rect x="760.1" y="165" width="0.1" height="15.0" fill="rgb(222,161,22)" rx="2" ry="2" />
<text  x="763.07" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;WaveElem::Compare&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt; &gt; (3,447 samples, 3.83%)</title><rect x="342.1" y="149" width="45.2" height="15.0" fill="rgb(232,151,27)" rx="2" ry="2" />
<text  x="345.09" y="159.5" >__gn..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMRelation::Member, std::allocator&lt;OSMRelation::Member&gt; &gt; &gt;::load_object_data (9 samples, 0.01%)</title><rect x="730.1" y="213" width="0.1" height="15.0" fill="rgb(229,103,37)" rx="2" ry="2" />
<text  x="733.10" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_lower_bound (45 samples, 0.05%)</title><rect x="830.3" y="261" width="0.6" height="15.0" fill="rgb(252,95,49)" rx="2" ry="2" />
<text  x="833.32" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (14 samples, 0.02%)</title><rect x="806.4" y="149" width="0.1" height="15.0" fill="rgb(244,214,8)" rx="2" ry="2" />
<text  x="809.36" y="159.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (73 samples, 0.08%)</title><rect x="904.3" y="261" width="1.0" height="15.0" fill="rgb(222,78,46)" rx="2" ry="2" />
<text  x="907.34" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (16 samples, 0.02%)</title><rect x="690.1" y="117" width="0.2" height="15.0" fill="rgb(238,17,24)" rx="2" ry="2" />
<text  x="693.12" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMWay const*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (83 samples, 0.09%)</title><rect x="1178.2" y="165" width="1.1" height="15.0" fill="rgb(246,115,25)" rx="2" ry="2" />
<text  x="1181.22" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMWay&gt;::load_object_data (268 samples, 0.30%)</title><rect x="734.0" y="229" width="3.5" height="15.0" fill="rgb(223,119,18)" rx="2" ry="2" />
<text  x="737.01" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (112 samples, 0.12%)</title><rect x="993.1" y="261" width="1.5" height="15.0" fill="rgb(207,221,11)" rx="2" ry="2" />
<text  x="996.11" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (10 samples, 0.01%)</title><rect x="735.5" y="133" width="0.2" height="15.0" fill="rgb(246,108,38)" rx="2" ry="2" />
<text  x="738.54" y="143.5" ></text>
</g>
<g >
<title>memcmp@plt (8 samples, 0.01%)</title><rect x="1091.6" y="165" width="0.1" height="15.0" fill="rgb(220,100,41)" rx="2" ry="2" />
<text  x="1094.64" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (104 samples, 0.12%)</title><rect x="697.9" y="229" width="1.4" height="15.0" fill="rgb(243,140,17)" rx="2" ry="2" />
<text  x="700.91" y="239.5" ></text>
</g>
<g >
<title>free_perturb (9 samples, 0.01%)</title><rect x="1059.1" y="133" width="0.1" height="15.0" fill="rgb(229,133,22)" rx="2" ry="2" />
<text  x="1062.07" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (76 samples, 0.08%)</title><rect x="1161.5" y="133" width="1.0" height="15.0" fill="rgb(246,123,3)" rx="2" ry="2" />
<text  x="1164.54" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMID, std::allocator&lt;OSMID&gt; &gt; &gt;::load_object_data (62 samples, 0.07%)</title><rect x="697.9" y="197" width="0.8" height="15.0" fill="rgb(253,91,26)" rx="2" ry="2" />
<text  x="700.91" y="207.5" ></text>
</g>
<g >
<title>memcpy@plt (15 samples, 0.02%)</title><rect x="688.1" y="117" width="0.1" height="15.0" fill="rgb(219,69,37)" rx="2" ry="2" />
<text  x="691.05" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (19 samples, 0.02%)</title><rect x="700.0" y="245" width="0.3" height="15.0" fill="rgb(224,59,54)" rx="2" ry="2" />
<text  x="703.04" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::empty (106 samples, 0.12%)</title><rect x="451.5" y="213" width="1.4" height="15.0" fill="rgb(219,42,21)" rx="2" ry="2" />
<text  x="454.50" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (29 samples, 0.03%)</title><rect x="453.9" y="213" width="0.4" height="15.0" fill="rgb(237,19,31)" rx="2" ry="2" />
<text  x="456.92" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::select_on_container_copy_construction (31 samples, 0.03%)</title><rect x="499.7" y="197" width="0.4" height="15.0" fill="rgb(252,137,15)" rx="2" ry="2" />
<text  x="502.69" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (24 samples, 0.03%)</title><rect x="719.8" y="149" width="0.4" height="15.0" fill="rgb(246,50,44)" rx="2" ry="2" />
<text  x="722.84" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (309 samples, 0.34%)</title><rect x="737.5" y="213" width="4.1" height="15.0" fill="rgb(254,110,12)" rx="2" ry="2" />
<text  x="740.53" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (17 samples, 0.02%)</title><rect x="825.1" y="261" width="0.2" height="15.0" fill="rgb(254,15,53)" rx="2" ry="2" />
<text  x="828.05" y="271.5" ></text>
</g>
<g >
<title>getFeatureType (14 samples, 0.02%)</title><rect x="757.1" y="261" width="0.2" height="15.0" fill="rgb(249,74,32)" rx="2" ry="2" />
<text  x="760.09" y="271.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;Feature_data, Feature_data, std::allocator&lt;Feature_data&gt; &gt; (18 samples, 0.02%)</title><rect x="1073.4" y="149" width="0.2" height="15.0" fill="rgb(230,63,35)" rx="2" ry="2" />
<text  x="1076.40" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (17 samples, 0.02%)</title><rect x="500.8" y="197" width="0.2" height="15.0" fill="rgb(208,5,39)" rx="2" ry="2" />
<text  x="503.76" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (48 samples, 0.05%)</title><rect x="1081.9" y="197" width="0.6" height="15.0" fill="rgb(210,192,0)" rx="2" ry="2" />
<text  x="1084.86" y="207.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (49 samples, 0.05%)</title><rect x="692.3" y="117" width="0.6" height="15.0" fill="rgb(247,149,35)" rx="2" ry="2" />
<text  x="695.29" y="127.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (1,722 samples, 1.91%)</title><rect x="475.9" y="165" width="22.6" height="15.0" fill="rgb(214,154,28)" rx="2" ry="2" />
<text  x="478.89" y="175.5" >_..</text>
</g>
<g >
<title>libc_feholdsetround_sse_ctx (8 samples, 0.01%)</title><rect x="1070.2" y="133" width="0.1" height="15.0" fill="rgb(234,167,17)" rx="2" ry="2" />
<text  x="1073.18" y="143.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (29 samples, 0.03%)</title><rect x="733.4" y="133" width="0.4" height="15.0" fill="rgb(209,5,16)" rx="2" ry="2" />
<text  x="736.45" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (86 samples, 0.10%)</title><rect x="792.2" y="133" width="1.1" height="15.0" fill="rgb(241,117,39)" rx="2" ry="2" />
<text  x="795.19" y="143.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (12 samples, 0.01%)</title><rect x="1185.6" y="277" width="0.2" height="15.0" fill="rgb(221,127,47)" rx="2" ry="2" />
<text  x="1188.65" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::emplace_back&lt;double&gt; (13 samples, 0.01%)</title><rect x="640.3" y="197" width="0.2" height="15.0" fill="rgb(247,216,30)" rx="2" ry="2" />
<text  x="643.28" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (16 samples, 0.02%)</title><rect x="1188.9" y="261" width="0.2" height="15.0" fill="rgb(217,121,10)" rx="2" ry="2" />
<text  x="1191.94" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_clear (10 samples, 0.01%)</title><rect x="501.7" y="213" width="0.1" height="15.0" fill="rgb(209,116,16)" rx="2" ry="2" />
<text  x="504.65" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (59 samples, 0.07%)</title><rect x="745.2" y="213" width="0.7" height="15.0" fill="rgb(231,178,47)" rx="2" ry="2" />
<text  x="748.17" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (37 samples, 0.04%)</title><rect x="699.3" y="229" width="0.5" height="15.0" fill="rgb(214,205,19)" rx="2" ry="2" />
<text  x="702.28" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (11 samples, 0.01%)</title><rect x="946.2" y="261" width="0.2" height="15.0" fill="rgb(245,89,34)" rx="2" ry="2" />
<text  x="949.22" y="271.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (118 samples, 0.13%)</title><rect x="723.5" y="149" width="1.6" height="15.0" fill="rgb(225,112,45)" rx="2" ry="2" />
<text  x="726.53" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (32 samples, 0.04%)</title><rect x="1062.9" y="149" width="0.4" height="15.0" fill="rgb(226,212,53)" rx="2" ry="2" />
<text  x="1065.90" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator- (90 samples, 0.10%)</title><rect x="427.3" y="197" width="1.2" height="15.0" fill="rgb(244,206,51)" rx="2" ry="2" />
<text  x="430.31" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (148 samples, 0.16%)</title><rect x="679.2" y="117" width="1.9" height="15.0" fill="rgb(213,103,53)" rx="2" ry="2" />
<text  x="682.20" y="127.5" ></text>
</g>
<g >
<title>__ieee754_atan2_fma (80 samples, 0.09%)</title><rect x="1094.3" y="165" width="1.0" height="15.0" fill="rgb(229,104,14)" rx="2" ry="2" />
<text  x="1097.28" y="175.5" ></text>
</g>
<g >
<title>LatlonToXY (29 samples, 0.03%)</title><rect x="1092.8" y="165" width="0.4" height="15.0" fill="rgb(231,152,9)" rx="2" ry="2" />
<text  x="1095.83" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMWay, std::allocator&lt;OSMWay&gt; &gt; &gt;::load_object_data (104 samples, 0.12%)</title><rect x="697.9" y="245" width="1.4" height="15.0" fill="rgb(216,219,14)" rx="2" ry="2" />
<text  x="700.91" y="255.5" ></text>
</g>
<g >
<title>free@plt (11 samples, 0.01%)</title><rect x="156.4" y="213" width="0.1" height="15.0" fill="rgb(234,46,10)" rx="2" ry="2" />
<text  x="159.40" y="223.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (30 samples, 0.03%)</title><rect x="500.1" y="197" width="0.4" height="15.0" fill="rgb(247,150,13)" rx="2" ry="2" />
<text  x="503.09" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast (115 samples, 0.13%)</title><rect x="730.4" y="165" width="1.5" height="15.0" fill="rgb(219,218,3)" rx="2" ry="2" />
<text  x="733.36" y="175.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;ezgl::point2d*, ezgl::point2d*, std::allocator&lt;ezgl::point2d&gt; &gt; (10 samples, 0.01%)</title><rect x="1076.0" y="165" width="0.1" height="15.0" fill="rgb(205,206,18)" rx="2" ry="2" />
<text  x="1078.95" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (168 samples, 0.19%)</title><rect x="811.1" y="181" width="2.2" height="15.0" fill="rgb(214,163,49)" rx="2" ry="2" />
<text  x="814.11" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (213 samples, 0.24%)</title><rect x="722.3" y="165" width="2.8" height="15.0" fill="rgb(228,51,31)" rx="2" ry="2" />
<text  x="725.28" y="175.5" ></text>
</g>
<g >
<title>loadFeatureType (1,034 samples, 1.15%)</title><rect x="1066.7" y="197" width="13.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1069.68" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (37 samples, 0.04%)</title><rect x="697.3" y="181" width="0.5" height="15.0" fill="rgb(205,7,9)" rx="2" ry="2" />
<text  x="700.35" y="191.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (15 samples, 0.02%)</title><rect x="697.4" y="133" width="0.2" height="15.0" fill="rgb(238,16,48)" rx="2" ry="2" />
<text  x="700.42" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;double&amp;&gt; (249 samples, 0.28%)</title><rect x="958.4" y="261" width="3.3" height="15.0" fill="rgb(248,36,53)" rx="2" ry="2" />
<text  x="961.43" y="271.5" ></text>
</g>
<g >
<title>std::_Construct&lt;Node&gt; (193 samples, 0.21%)</title><rect x="508.3" y="197" width="2.6" height="15.0" fill="rgb(220,220,23)" rx="2" ry="2" />
<text  x="511.34" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (77 samples, 0.09%)</title><rect x="681.1" y="117" width="1.0" height="15.0" fill="rgb(207,2,51)" rx="2" ry="2" />
<text  x="684.14" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt;::_Node_iterator_base (8 samples, 0.01%)</title><rect x="911.6" y="261" width="0.1" height="15.0" fill="rgb(249,229,15)" rx="2" ry="2" />
<text  x="914.55" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMRelation::Member, std::allocator&lt;OSMRelation::Member&gt; &gt; &gt;::load_object_data (23 samples, 0.03%)</title><rect x="705.2" y="181" width="0.3" height="15.0" fill="rgb(227,87,3)" rx="2" ry="2" />
<text  x="708.21" y="191.5" ></text>
</g>
<g >
<title>findStreetSegmentTravelTime (33 samples, 0.04%)</title><rect x="156.0" y="197" width="0.4" height="15.0" fill="rgb(243,181,10)" rx="2" ry="2" />
<text  x="158.97" y="207.5" ></text>
</g>
<g >
<title>operator new@plt (10 samples, 0.01%)</title><rect x="474.5" y="165" width="0.1" height="15.0" fill="rgb(220,19,46)" rx="2" ry="2" />
<text  x="477.50" y="175.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (9 samples, 0.01%)</title><rect x="817.2" y="165" width="0.2" height="15.0" fill="rgb(211,142,51)" rx="2" ry="2" />
<text  x="820.25" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (24 samples, 0.03%)</title><rect x="698.0" y="165" width="0.3" height="15.0" fill="rgb(205,9,24)" rx="2" ry="2" />
<text  x="700.99" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (17 samples, 0.02%)</title><rect x="697.6" y="133" width="0.2" height="15.0" fill="rgb(234,47,40)" rx="2" ry="2" />
<text  x="700.61" y="143.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (36 samples, 0.04%)</title><rect x="714.5" y="149" width="0.5" height="15.0" fill="rgb(214,75,5)" rx="2" ry="2" />
<text  x="717.53" y="159.5" ></text>
</g>
<g >
<title>loadFeatures (50 samples, 0.06%)</title><rect x="637.4" y="213" width="0.7" height="15.0" fill="rgb(212,2,13)" rx="2" ry="2" />
<text  x="640.45" y="223.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, OSMID&amp;&amp;&gt;::_M_head (9 samples, 0.01%)</title><rect x="1163.5" y="101" width="0.1" height="15.0" fill="rgb(225,225,0)" rx="2" ry="2" />
<text  x="1166.53" y="111.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (20 samples, 0.02%)</title><rect x="715.6" y="117" width="0.2" height="15.0" fill="rgb(246,5,48)" rx="2" ry="2" />
<text  x="718.58" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="1089.7" y="149" width="0.1" height="15.0" fill="rgb(233,46,31)" rx="2" ry="2" />
<text  x="1092.66" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (20 samples, 0.02%)</title><rect x="697.3" y="149" width="0.3" height="15.0" fill="rgb(235,96,51)" rx="2" ry="2" />
<text  x="700.35" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (160 samples, 0.18%)</title><rect x="1060.8" y="197" width="2.1" height="15.0" fill="rgb(248,202,44)" rx="2" ry="2" />
<text  x="1063.79" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_free (115 samples, 0.13%)</title><rect x="116.9" y="213" width="1.5" height="15.0" fill="rgb(249,220,23)" rx="2" ry="2" />
<text  x="119.87" y="223.5" ></text>
</g>
<g >
<title>OSMDatabase::buildOSMIDMaps (653 samples, 0.73%)</title><rect x="767.0" y="229" width="8.6" height="15.0" fill="rgb(214,48,7)" rx="2" ry="2" />
<text  x="770.02" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (27 samples, 0.03%)</title><rect x="157.7" y="213" width="0.4" height="15.0" fill="rgb(211,192,27)" rx="2" ry="2" />
<text  x="160.70" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (23 samples, 0.03%)</title><rect x="702.1" y="197" width="0.3" height="15.0" fill="rgb(206,210,40)" rx="2" ry="2" />
<text  x="705.08" y="207.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (27 samples, 0.03%)</title><rect x="702.4" y="133" width="0.3" height="15.0" fill="rgb(227,58,4)" rx="2" ry="2" />
<text  x="705.39" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMWay, std::allocator&lt;OSMWay&gt; &gt; &gt;::load_object_data (162 samples, 0.18%)</title><rect x="682.9" y="213" width="2.1" height="15.0" fill="rgb(225,41,51)" rx="2" ry="2" />
<text  x="685.86" y="223.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (11 samples, 0.01%)</title><rect x="814.5" y="165" width="0.1" height="15.0" fill="rgb(215,99,41)" rx="2" ry="2" />
<text  x="817.47" y="175.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (19 samples, 0.02%)</title><rect x="639.5" y="181" width="0.3" height="15.0" fill="rgb(209,117,54)" rx="2" ry="2" />
<text  x="642.55" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (20 samples, 0.02%)</title><rect x="1131.2" y="149" width="0.3" height="15.0" fill="rgb(207,209,34)" rx="2" ry="2" />
<text  x="1134.20" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID const&amp;&gt;, std::tuple&lt;&gt; &gt; (17 samples, 0.02%)</title><rect x="1088.6" y="181" width="0.3" height="15.0" fill="rgb(237,45,37)" rx="2" ry="2" />
<text  x="1091.64" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (161 samples, 0.18%)</title><rect x="686.2" y="149" width="2.1" height="15.0" fill="rgb(215,200,47)" rx="2" ry="2" />
<text  x="689.21" y="159.5" ></text>
</g>
<g >
<title>do_lookup_x (17 samples, 0.02%)</title><rect x="755.6" y="181" width="0.2" height="15.0" fill="rgb(233,176,49)" rx="2" ry="2" />
<text  x="758.59" y="191.5" ></text>
</g>
<g >
<title>do_cos (68 samples, 0.08%)</title><rect x="1078.9" y="149" width="0.9" height="15.0" fill="rgb(241,217,32)" rx="2" ry="2" />
<text  x="1081.90" y="159.5" ></text>
</g>
<g >
<title>M3_Public_Perf_ (89,964 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(254,96,33)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >M3_Public_Perf_</text>
</g>
<g >
<title>std::tie&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="1092.0" y="197" width="0.1" height="15.0" fill="rgb(244,65,21)" rx="2" ry="2" />
<text  x="1094.97" y="207.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (117 samples, 0.13%)</title><rect x="739.8" y="149" width="1.5" height="15.0" fill="rgb(217,122,33)" rx="2" ry="2" />
<text  x="742.79" y="159.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (63 samples, 0.07%)</title><rect x="1178.4" y="133" width="0.8" height="15.0" fill="rgb(219,24,42)" rx="2" ry="2" />
<text  x="1181.38" y="143.5" ></text>
</g>
<g >
<title>unlink_chunk (841 samples, 0.93%)</title><rect x="1032.3" y="165" width="11.0" height="15.0" fill="rgb(225,184,40)" rx="2" ry="2" />
<text  x="1035.26" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (62 samples, 0.07%)</title><rect x="825.3" y="261" width="0.8" height="15.0" fill="rgb(228,8,31)" rx="2" ry="2" />
<text  x="828.27" y="271.5" ></text>
</g>
<g >
<title>getTagCount (26 samples, 0.03%)</title><rect x="1102.2" y="197" width="0.4" height="15.0" fill="rgb(252,131,14)" rx="2" ry="2" />
<text  x="1105.24" y="207.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator() (11 samples, 0.01%)</title><rect x="967.7" y="261" width="0.2" height="15.0" fill="rgb(235,221,26)" rx="2" ry="2" />
<text  x="970.72" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (68 samples, 0.08%)</title><rect x="674.3" y="133" width="0.9" height="15.0" fill="rgb(253,146,17)" rx="2" ry="2" />
<text  x="677.26" y="143.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (9 samples, 0.01%)</title><rect x="725.0" y="133" width="0.1" height="15.0" fill="rgb(208,27,48)" rx="2" ry="2" />
<text  x="727.96" y="143.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (14 samples, 0.02%)</title><rect x="729.8" y="133" width="0.2" height="15.0" fill="rgb(220,92,49)" rx="2" ry="2" />
<text  x="732.81" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (279 samples, 0.31%)</title><rect x="782.3" y="149" width="3.7" height="15.0" fill="rgb(220,17,42)" rx="2" ry="2" />
<text  x="785.32" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (2,262 samples, 2.51%)</title><rect x="1132.9" y="165" width="29.6" height="15.0" fill="rgb(245,191,37)" rx="2" ry="2" />
<text  x="1135.87" y="175.5" >st..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (498 samples, 0.55%)</title><rect x="705.7" y="165" width="6.5" height="15.0" fill="rgb(242,108,1)" rx="2" ry="2" />
<text  x="708.69" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_create_storage (8 samples, 0.01%)</title><rect x="1073.8" y="117" width="0.1" height="15.0" fill="rgb(250,75,37)" rx="2" ry="2" />
<text  x="1076.76" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (18 samples, 0.02%)</title><rect x="699.8" y="229" width="0.2" height="15.0" fill="rgb(223,225,22)" rx="2" ry="2" />
<text  x="702.76" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (19 samples, 0.02%)</title><rect x="908.6" y="261" width="0.2" height="15.0" fill="rgb(212,169,22)" rx="2" ry="2" />
<text  x="911.58" y="271.5" ></text>
</g>
<g >
<title>std::move&lt;OSMID&amp;&gt; (26 samples, 0.03%)</title><rect x="968.3" y="261" width="0.3" height="15.0" fill="rgb(205,117,12)" rx="2" ry="2" />
<text  x="971.29" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (18 samples, 0.02%)</title><rect x="670.4" y="229" width="0.2" height="15.0" fill="rgb(213,216,14)" rx="2" ry="2" />
<text  x="673.38" y="239.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.03%)</title><rect x="156.5" y="213" width="0.4" height="15.0" fill="rgb(253,35,45)" rx="2" ry="2" />
<text  x="159.55" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (29 samples, 0.03%)</title><rect x="734.0" y="165" width="0.4" height="15.0" fill="rgb(229,54,26)" rx="2" ry="2" />
<text  x="737.01" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (596 samples, 0.66%)</title><rect x="722.3" y="213" width="7.8" height="15.0" fill="rgb(230,109,14)" rx="2" ry="2" />
<text  x="725.28" y="223.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (12 samples, 0.01%)</title><rect x="714.7" y="133" width="0.2" height="15.0" fill="rgb(230,129,1)" rx="2" ry="2" />
<text  x="717.74" y="143.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (41 samples, 0.05%)</title><rect x="673.3" y="117" width="0.5" height="15.0" fill="rgb(234,53,52)" rx="2" ry="2" />
<text  x="676.28" y="127.5" ></text>
</g>
<g >
<title>strlen@plt (9 samples, 0.01%)</title><rect x="1091.7" y="165" width="0.2" height="15.0" fill="rgb(244,5,5)" rx="2" ry="2" />
<text  x="1094.75" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (358 samples, 0.40%)</title><rect x="686.2" y="229" width="4.7" height="15.0" fill="rgb(253,72,52)" rx="2" ry="2" />
<text  x="689.21" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMID, std::allocator&lt;OSMID&gt; &gt; &gt;::load_object_data (24 samples, 0.03%)</title><rect x="721.8" y="261" width="0.3" height="15.0" fill="rgb(224,69,43)" rx="2" ry="2" />
<text  x="724.81" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (34 samples, 0.04%)</title><rect x="815.6" y="149" width="0.5" height="15.0" fill="rgb(230,73,48)" rx="2" ry="2" />
<text  x="818.61" y="159.5" ></text>
</g>
<g >
<title>x_from_lon (12 samples, 0.01%)</title><rect x="1018.3" y="261" width="0.1" height="15.0" fill="rgb(210,52,28)" rx="2" ry="2" />
<text  x="1021.27" y="271.5" ></text>
</g>
<g >
<title>std::map&lt;OSMID, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (12 samples, 0.01%)</title><rect x="640.1" y="197" width="0.1" height="15.0" fill="rgb(218,187,47)" rx="2" ry="2" />
<text  x="643.08" y="207.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.02%)</title><rect x="697.6" y="165" width="0.2" height="15.0" fill="rgb(242,134,17)" rx="2" ry="2" />
<text  x="700.61" y="175.5" ></text>
</g>
<g >
<title>__cos_fma (108 samples, 0.12%)</title><rect x="1078.6" y="165" width="1.4" height="15.0" fill="rgb(236,52,3)" rx="2" ry="2" />
<text  x="1081.62" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (268 samples, 0.30%)</title><rect x="734.0" y="197" width="3.5" height="15.0" fill="rgb(233,42,39)" rx="2" ry="2" />
<text  x="737.01" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast (63 samples, 0.07%)</title><rect x="671.0" y="149" width="0.8" height="15.0" fill="rgb(225,76,45)" rx="2" ry="2" />
<text  x="673.99" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt;::_M_next (15 samples, 0.02%)</title><rect x="906.9" y="261" width="0.2" height="15.0" fill="rgb(231,36,29)" rx="2" ry="2" />
<text  x="909.92" y="271.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.02%)</title><rect x="1104.4" y="181" width="0.2" height="15.0" fill="rgb(232,174,22)" rx="2" ry="2" />
<text  x="1107.43" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::get_library_version (33 samples, 0.04%)</title><rect x="660.2" y="261" width="0.4" height="15.0" fill="rgb(207,66,12)" rx="2" ry="2" />
<text  x="663.20" y="271.5" ></text>
</g>
<g >
<title>loadFeatureType (49 samples, 0.05%)</title><rect x="637.4" y="197" width="0.7" height="15.0" fill="rgb(249,92,49)" rx="2" ry="2" />
<text  x="640.45" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;Node*, unsigned long&gt; (168 samples, 0.19%)</title><rect x="940.7" y="261" width="2.3" height="15.0" fill="rgb(253,119,23)" rx="2" ry="2" />
<text  x="943.75" y="271.5" ></text>
</g>
<g >
<title>libc_feholdsetround_sse_ctx (14 samples, 0.02%)</title><rect x="1079.8" y="149" width="0.2" height="15.0" fill="rgb(238,140,54)" rx="2" ry="2" />
<text  x="1082.80" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1,332 samples, 1.48%)</title><rect x="1043.3" y="165" width="17.5" height="15.0" fill="rgb(227,189,3)" rx="2" ry="2" />
<text  x="1046.32" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (132 samples, 0.15%)</title><rect x="714.2" y="229" width="1.7" height="15.0" fill="rgb(249,60,33)" rx="2" ry="2" />
<text  x="717.16" y="239.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (25 samples, 0.03%)</title><rect x="813.0" y="165" width="0.3" height="15.0" fill="rgb(243,46,54)" rx="2" ry="2" />
<text  x="815.98" y="175.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="745.7" y="181" width="0.1" height="15.0" fill="rgb(240,88,1)" rx="2" ry="2" />
<text  x="748.67" y="191.5" ></text>
</g>
<g >
<title>_int_free (31 samples, 0.03%)</title><rect x="1063.4" y="165" width="0.4" height="15.0" fill="rgb(241,210,10)" rx="2" ry="2" />
<text  x="1066.41" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (28 samples, 0.03%)</title><rect x="696.3" y="165" width="0.4" height="15.0" fill="rgb(252,224,44)" rx="2" ry="2" />
<text  x="699.31" y="175.5" ></text>
</g>
<g >
<title>checked_request2size (27 samples, 0.03%)</title><rect x="1169.1" y="101" width="0.4" height="15.0" fill="rgb(239,117,53)" rx="2" ry="2" />
<text  x="1172.14" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;ezgl::point2d const*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt;::operator* (15 samples, 0.02%)</title><rect x="614.2" y="261" width="0.2" height="15.0" fill="rgb(242,185,18)" rx="2" ry="2" />
<text  x="617.24" y="271.5" ></text>
</g>
<g >
<title>memcpy@plt (16 samples, 0.02%)</title><rect x="741.1" y="133" width="0.2" height="15.0" fill="rgb(232,10,33)" rx="2" ry="2" />
<text  x="744.12" y="143.5" ></text>
</g>
<g >
<title>operator new (40 samples, 0.04%)</title><rect x="169.6" y="165" width="0.6" height="15.0" fill="rgb(222,133,13)" rx="2" ry="2" />
<text  x="172.64" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (546 samples, 0.61%)</title><rect x="1172.5" y="197" width="7.2" height="15.0" fill="rgb(237,152,24)" rx="2" ry="2" />
<text  x="1175.49" y="207.5" ></text>
</g>
<g >
<title>populateWayIdToWayMap (8 samples, 0.01%)</title><rect x="534.8" y="245" width="0.1" height="15.0" fill="rgb(234,48,44)" rx="2" ry="2" />
<text  x="537.82" y="255.5" ></text>
</g>
<g >
<title>__libc_start_main (266 samples, 0.30%)</title><rect x="637.4" y="261" width="3.5" height="15.0" fill="rgb(253,27,12)" rx="2" ry="2" />
<text  x="640.45" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (41 samples, 0.05%)</title><rect x="428.0" y="181" width="0.5" height="15.0" fill="rgb(232,67,47)" rx="2" ry="2" />
<text  x="430.95" y="191.5" ></text>
</g>
<g >
<title>Subway_Station::~Subway_Station (9 samples, 0.01%)</title><rect x="1101.6" y="197" width="0.1" height="15.0" fill="rgb(241,178,47)" rx="2" ry="2" />
<text  x="1104.60" y="207.5" ></text>
</g>
<g >
<title>OSMDatabase::buildOSMIDMaps (24 samples, 0.03%)</title><rect x="14.3" y="261" width="0.3" height="15.0" fill="rgb(219,74,9)" rx="2" ry="2" />
<text  x="17.26" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::deallocate (14 samples, 0.02%)</title><rect x="1060.6" y="149" width="0.2" height="15.0" fill="rgb(250,53,15)" rx="2" ry="2" />
<text  x="1063.61" y="159.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;WaveElem, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;, WaveElem::Compare&gt;::emplace&lt;int&amp;, int&amp;, double&amp;, double&amp;&gt; (1,142 samples, 1.27%)</title><rect x="158.3" y="213" width="14.9" height="15.0" fill="rgb(251,172,12)" rx="2" ry="2" />
<text  x="161.27" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (13 samples, 0.01%)</title><rect x="737.3" y="133" width="0.1" height="15.0" fill="rgb(222,183,6)" rx="2" ry="2" />
<text  x="740.28" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (139 samples, 0.15%)</title><rect x="691.2" y="149" width="1.8" height="15.0" fill="rgb(212,16,15)" rx="2" ry="2" />
<text  x="694.17" y="159.5" ></text>
</g>
<g >
<title>__memset_evex_erms (50 samples, 0.06%)</title><rect x="774.8" y="165" width="0.7" height="15.0" fill="rgb(250,105,51)" rx="2" ry="2" />
<text  x="777.83" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;OSMID const, OSMNode const*&gt;::pair&lt;OSMID&amp;&amp;, 0ul&gt; (35 samples, 0.04%)</title><rect x="979.8" y="261" width="0.5" height="15.0" fill="rgb(251,78,28)" rx="2" ry="2" />
<text  x="982.85" y="271.5" ></text>
</g>
<g >
<title>operator new (41 samples, 0.05%)</title><rect x="501.8" y="181" width="0.5" height="15.0" fill="rgb(221,122,12)" rx="2" ry="2" />
<text  x="504.81" y="191.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (23 samples, 0.03%)</title><rect x="755.5" y="197" width="0.3" height="15.0" fill="rgb(242,196,22)" rx="2" ry="2" />
<text  x="758.51" y="207.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (181 samples, 0.20%)</title><rect x="798.7" y="149" width="2.4" height="15.0" fill="rgb(229,92,52)" rx="2" ry="2" />
<text  x="801.71" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt;::_Hash_node (10 samples, 0.01%)</title><rect x="1170.0" y="149" width="0.2" height="15.0" fill="rgb(208,139,11)" rx="2" ry="2" />
<text  x="1173.02" y="159.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (161 samples, 0.18%)</title><rect x="686.2" y="165" width="2.1" height="15.0" fill="rgb(243,195,50)" rx="2" ry="2" />
<text  x="689.21" y="175.5" ></text>
</g>
<g >
<title>bfsTraceBack (84 samples, 0.09%)</title><rect x="501.3" y="229" width="1.1" height="15.0" fill="rgb(232,140,48)" rx="2" ry="2" />
<text  x="504.29" y="239.5" ></text>
</g>
<g >
<title>do_cos (10 samples, 0.01%)</title><rect x="1093.0" y="133" width="0.1" height="15.0" fill="rgb(231,10,31)" rx="2" ry="2" />
<text  x="1095.99" y="143.5" ></text>
</g>
<g >
<title>main (54 samples, 0.06%)</title><rect x="817.0" y="261" width="0.7" height="15.0" fill="rgb(231,8,26)" rx="2" ry="2" />
<text  x="819.96" y="271.5" ></text>
</g>
<g >
<title>std::forward&lt;ezgl::point2d&gt; (39 samples, 0.04%)</title><rect x="962.1" y="261" width="0.5" height="15.0" fill="rgb(244,229,23)" rx="2" ry="2" />
<text  x="965.05" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;WaveElem&gt; &gt;::construct&lt;WaveElem, int&amp;, int&amp;, double&amp;, double&amp;&gt; (127 samples, 0.14%)</title><rect x="168.0" y="181" width="1.6" height="15.0" fill="rgb(239,2,35)" rx="2" ry="2" />
<text  x="170.97" y="191.5" ></text>
</g>
<g >
<title>strcmp@plt (10 samples, 0.01%)</title><rect x="720.9" y="133" width="0.2" height="15.0" fill="rgb(206,161,20)" rx="2" ry="2" />
<text  x="723.93" y="143.5" ></text>
</g>
<g >
<title>malloc@plt (8 samples, 0.01%)</title><rect x="1169.8" y="133" width="0.1" height="15.0" fill="rgb(254,133,27)" rx="2" ry="2" />
<text  x="1172.83" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (11 samples, 0.01%)</title><rect x="470.6" y="197" width="0.1" height="15.0" fill="rgb(247,36,37)" rx="2" ry="2" />
<text  x="473.59" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (18 samples, 0.02%)</title><rect x="670.4" y="181" width="0.2" height="15.0" fill="rgb(238,172,16)" rx="2" ry="2" />
<text  x="673.38" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (12 samples, 0.01%)</title><rect x="1183.5" y="261" width="0.1" height="15.0" fill="rgb(246,226,16)" rx="2" ry="2" />
<text  x="1186.45" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (337 samples, 0.37%)</title><rect x="690.9" y="213" width="4.4" height="15.0" fill="rgb(212,14,21)" rx="2" ry="2" />
<text  x="693.91" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMNode, std::allocator&lt;OSMNode&gt; &gt; &gt;::load_object_data (892 samples, 0.99%)</title><rect x="671.0" y="213" width="11.7" height="15.0" fill="rgb(217,207,13)" rx="2" ry="2" />
<text  x="673.99" y="223.5" ></text>
</g>
<g >
<title>ezgl::renderer::load_png (20 samples, 0.02%)</title><rect x="10.2" y="245" width="0.2" height="15.0" fill="rgb(212,168,16)" rx="2" ry="2" />
<text  x="13.18" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair (13 samples, 0.01%)</title><rect x="1097.9" y="197" width="0.1" height="15.0" fill="rgb(235,18,49)" rx="2" ry="2" />
<text  x="1100.87" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::end (78 samples, 0.09%)</title><rect x="423.7" y="197" width="1.0" height="15.0" fill="rgb(243,38,5)" rx="2" ry="2" />
<text  x="426.69" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (3,488 samples, 3.88%)</title><rect x="455.4" y="213" width="45.7" height="15.0" fill="rgb(229,149,54)" rx="2" ry="2" />
<text  x="458.37" y="223.5" >std:..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (358 samples, 0.40%)</title><rect x="686.2" y="181" width="4.7" height="15.0" fill="rgb(248,203,25)" rx="2" ry="2" />
<text  x="689.21" y="191.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.02%)</title><rect x="639.9" y="133" width="0.2" height="15.0" fill="rgb(252,229,13)" rx="2" ry="2" />
<text  x="642.87" y="143.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, long, WaveElem, __gnu_cxx::__ops::_Iter_comp_iter&lt;WaveElem::Compare&gt; &gt; (18,734 samples, 20.82%)</title><rect x="177.7" y="165" width="245.7" height="15.0" fill="rgb(212,173,13)" rx="2" ry="2" />
<text  x="180.72" y="175.5" >std::__adjust_heap&lt;__gnu_cxx::__..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_get_insert_unique_pos (37 samples, 0.04%)</title><rect x="831.3" y="261" width="0.5" height="15.0" fill="rgb(220,45,35)" rx="2" ry="2" />
<text  x="834.33" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (337 samples, 0.37%)</title><rect x="690.9" y="229" width="4.4" height="15.0" fill="rgb(221,151,17)" rx="2" ry="2" />
<text  x="693.91" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (65 samples, 0.07%)</title><rect x="811.4" y="165" width="0.8" height="15.0" fill="rgb(249,219,49)" rx="2" ry="2" />
<text  x="814.36" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;OSMID&gt; (15 samples, 0.02%)</title><rect x="1184.4" y="261" width="0.2" height="15.0" fill="rgb(237,228,27)" rx="2" ry="2" />
<text  x="1187.44" y="271.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (12 samples, 0.01%)</title><rect x="640.9" y="261" width="0.2" height="15.0" fill="rgb(243,225,4)" rx="2" ry="2" />
<text  x="643.94" y="271.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="1087.7" y="181" width="0.1" height="15.0" fill="rgb(223,16,23)" rx="2" ry="2" />
<text  x="1090.72" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, false, true&gt;::operator-&gt; (11 samples, 0.01%)</title><rect x="1171.1" y="181" width="0.1" height="15.0" fill="rgb(221,81,11)" rx="2" ry="2" />
<text  x="1174.10" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.01%)</title><rect x="775.5" y="213" width="0.1" height="15.0" fill="rgb(227,29,30)" rx="2" ry="2" />
<text  x="778.48" y="223.5" ></text>
</g>
<g >
<title>std::_Identity&lt;int&gt;::operator() (12 samples, 0.01%)</title><rect x="830.0" y="261" width="0.1" height="15.0" fill="rgb(218,152,9)" rx="2" ry="2" />
<text  x="832.97" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (59 samples, 0.07%)</title><rect x="454.6" y="213" width="0.8" height="15.0" fill="rgb(235,127,33)" rx="2" ry="2" />
<text  x="457.59" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::emplace_back&lt;double&gt; (19 samples, 0.02%)</title><rect x="1098.4" y="197" width="0.2" height="15.0" fill="rgb(238,116,21)" rx="2" ry="2" />
<text  x="1101.40" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;ezgl::point2d const*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt;, ezgl::point2d*&gt; (10 samples, 0.01%)</title><rect x="1073.9" y="133" width="0.2" height="15.0" fill="rgb(206,178,20)" rx="2" ry="2" />
<text  x="1076.95" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;ezgl::point2d&gt;::allocate (12 samples, 0.01%)</title><rect x="622.8" y="261" width="0.2" height="15.0" fill="rgb(242,26,30)" rx="2" ry="2" />
<text  x="625.81" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (10 samples, 0.01%)</title><rect x="717.6" y="149" width="0.1" height="15.0" fill="rgb(227,73,20)" rx="2" ry="2" />
<text  x="720.61" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (42 samples, 0.05%)</title><rect x="806.6" y="149" width="0.6" height="15.0" fill="rgb(246,202,38)" rx="2" ry="2" />
<text  x="809.61" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator+ (150 samples, 0.17%)</title><rect x="448.9" y="165" width="2.0" height="15.0" fill="rgb(242,180,27)" rx="2" ry="2" />
<text  x="451.89" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (28 samples, 0.03%)</title><rect x="685.8" y="133" width="0.4" height="15.0" fill="rgb(237,91,8)" rx="2" ry="2" />
<text  x="688.85" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::allocate (11 samples, 0.01%)</title><rect x="474.8" y="165" width="0.1" height="15.0" fill="rgb(212,12,39)" rx="2" ry="2" />
<text  x="477.80" y="175.5" ></text>
</g>
<g >
<title>loadMultimapForPartialNames (23 samples, 0.03%)</title><rect x="1084.4" y="213" width="0.3" height="15.0" fill="rgb(211,127,49)" rx="2" ry="2" />
<text  x="1087.36" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_realloc_insert&lt;double&gt; (14 samples, 0.02%)</title><rect x="1098.4" y="181" width="0.2" height="15.0" fill="rgb(205,143,10)" rx="2" ry="2" />
<text  x="1101.45" y="191.5" ></text>
</g>
<g >
<title>Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetweenIntersections_perf_very_hardHelper::RunImpl (38,609 samples, 42.92%)</title><rect x="14.8" y="261" width="506.4" height="15.0" fill="rgb(237,24,4)" rx="2" ry="2" />
<text  x="17.84" y="271.5" >Suiteinter_inter_path_perf_very_hard_public::MapFixturefindPathBetwee..</text>
</g>
<g >
<title>loadIntersectionData (20 samples, 0.02%)</title><rect x="760.0" y="245" width="0.3" height="15.0" fill="rgb(207,123,16)" rx="2" ry="2" />
<text  x="763.01" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::back (26 samples, 0.03%)</title><rect x="996.6" y="261" width="0.3" height="15.0" fill="rgb(247,196,3)" rx="2" ry="2" />
<text  x="999.57" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::allocate (12 samples, 0.01%)</title><rect x="1170.3" y="149" width="0.2" height="15.0" fill="rgb(214,161,39)" rx="2" ry="2" />
<text  x="1173.30" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (11 samples, 0.01%)</title><rect x="808.1" y="133" width="0.1" height="15.0" fill="rgb(226,31,6)" rx="2" ry="2" />
<text  x="811.09" y="143.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, int const*, int*&gt; (10 samples, 0.01%)</title><rect x="498.7" y="181" width="0.2" height="15.0" fill="rgb(245,76,48)" rx="2" ry="2" />
<text  x="501.73" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;ezgl::point2d&gt;::_M_max_size (16 samples, 0.02%)</title><rect x="622.6" y="261" width="0.2" height="15.0" fill="rgb(227,18,23)" rx="2" ry="2" />
<text  x="625.60" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt;::_M_next (8 samples, 0.01%)</title><rect x="1183.3" y="261" width="0.1" height="15.0" fill="rgb(250,48,43)" rx="2" ry="2" />
<text  x="1186.31" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::end (238 samples, 0.26%)</title><rect x="1007.2" y="261" width="3.1" height="15.0" fill="rgb(220,68,7)" rx="2" ry="2" />
<text  x="1010.22" y="271.5" ></text>
</g>
<g >
<title>getNodeByIndex (36 samples, 0.04%)</title><rect x="1106.0" y="197" width="0.5" height="15.0" fill="rgb(221,109,45)" rx="2" ry="2" />
<text  x="1109.04" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (16 samples, 0.02%)</title><rect x="700.1" y="197" width="0.2" height="15.0" fill="rgb(206,84,3)" rx="2" ry="2" />
<text  x="703.08" y="207.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.01%)</title><rect x="695.2" y="165" width="0.1" height="15.0" fill="rgb(246,148,7)" rx="2" ry="2" />
<text  x="698.16" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (9 samples, 0.01%)</title><rect x="796.8" y="149" width="0.1" height="15.0" fill="rgb(254,108,4)" rx="2" ry="2" />
<text  x="799.80" y="159.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (44 samples, 0.05%)</title><rect x="957.3" y="261" width="0.5" height="15.0" fill="rgb(248,15,12)" rx="2" ry="2" />
<text  x="960.26" y="271.5" ></text>
</g>
<g >
<title>operator new (40 samples, 0.04%)</title><rect x="698.8" y="165" width="0.5" height="15.0" fill="rgb(236,80,48)" rx="2" ry="2" />
<text  x="701.75" y="175.5" ></text>
</g>
<g >
<title>strcmp@plt (22 samples, 0.02%)</title><rect x="796.1" y="117" width="0.3" height="15.0" fill="rgb(229,185,44)" rx="2" ry="2" />
<text  x="799.09" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;int&gt;::_M_addr (14 samples, 0.02%)</title><rect x="549.6" y="261" width="0.2" height="15.0" fill="rgb(209,22,8)" rx="2" ry="2" />
<text  x="552.57" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMDatabase&gt;::load_object_data (1,092 samples, 1.21%)</title><rect x="670.7" y="245" width="14.3" height="15.0" fill="rgb(215,4,23)" rx="2" ry="2" />
<text  x="673.66" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (23 samples, 0.03%)</title><rect x="911.7" y="261" width="0.3" height="15.0" fill="rgb(222,121,3)" rx="2" ry="2" />
<text  x="914.71" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_lower_bound (52 samples, 0.06%)</title><rect x="1097.1" y="181" width="0.7" height="15.0" fill="rgb(250,160,13)" rx="2" ry="2" />
<text  x="1100.10" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (60 samples, 0.07%)</title><rect x="835.2" y="261" width="0.8" height="15.0" fill="rgb(253,14,20)" rx="2" ry="2" />
<text  x="838.16" y="271.5" ></text>
</g>
<g >
<title>loadStreetsDatabaseBIN (403 samples, 0.45%)</title><rect x="811.0" y="261" width="5.3" height="15.0" fill="rgb(241,83,2)" rx="2" ry="2" />
<text  x="814.00" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (22 samples, 0.02%)</title><rect x="906.3" y="261" width="0.3" height="15.0" fill="rgb(254,16,39)" rx="2" ry="2" />
<text  x="909.28" y="271.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator() (9 samples, 0.01%)</title><rect x="1183.0" y="261" width="0.1" height="15.0" fill="rgb(249,46,41)" rx="2" ry="2" />
<text  x="1186.00" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt; &gt; &gt; &gt; (28 samples, 0.03%)</title><rect x="775.8" y="149" width="0.4" height="15.0" fill="rgb(211,187,15)" rx="2" ry="2" />
<text  x="778.81" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (9 samples, 0.01%)</title><rect x="730.1" y="229" width="0.1" height="15.0" fill="rgb(223,139,53)" rx="2" ry="2" />
<text  x="733.10" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Street_segment_data*&gt; (154 samples, 0.17%)</title><rect x="1064.1" y="181" width="2.0" height="15.0" fill="rgb(247,197,9)" rx="2" ry="2" />
<text  x="1067.07" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (115 samples, 0.13%)</title><rect x="445.8" y="165" width="1.5" height="15.0" fill="rgb(233,221,48)" rx="2" ry="2" />
<text  x="448.76" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (60 samples, 0.07%)</title><rect x="685.0" y="165" width="0.8" height="15.0" fill="rgb(215,213,42)" rx="2" ry="2" />
<text  x="687.98" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::begin (28 samples, 0.03%)</title><rect x="452.1" y="197" width="0.3" height="15.0" fill="rgb(232,122,1)" rx="2" ry="2" />
<text  x="455.06" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (84 samples, 0.09%)</title><rect x="736.1" y="133" width="1.1" height="15.0" fill="rgb(208,78,2)" rx="2" ry="2" />
<text  x="739.15" y="143.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (23 samples, 0.03%)</title><rect x="811.8" y="133" width="0.3" height="15.0" fill="rgb(211,101,23)" rx="2" ry="2" />
<text  x="814.84" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (215 samples, 0.24%)</title><rect x="702.4" y="181" width="2.8" height="15.0" fill="rgb(235,225,1)" rx="2" ry="2" />
<text  x="705.39" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (13 samples, 0.01%)</title><rect x="1105.8" y="181" width="0.1" height="15.0" fill="rgb(225,99,0)" rx="2" ry="2" />
<text  x="1108.77" y="191.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (11 samples, 0.01%)</title><rect x="1184.7" y="261" width="0.2" height="15.0" fill="rgb(212,120,10)" rx="2" ry="2" />
<text  x="1187.74" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (440 samples, 0.49%)</title><rect x="543.7" y="261" width="5.7" height="15.0" fill="rgb(218,158,40)" rx="2" ry="2" />
<text  x="546.68" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (41 samples, 0.05%)</title><rect x="501.8" y="165" width="0.5" height="15.0" fill="rgb(213,188,25)" rx="2" ry="2" />
<text  x="504.81" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (203 samples, 0.23%)</title><rect x="738.9" y="165" width="2.7" height="15.0" fill="rgb(244,144,1)" rx="2" ry="2" />
<text  x="741.90" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator- (103 samples, 0.11%)</title><rect x="160.3" y="197" width="1.4" height="15.0" fill="rgb(250,34,40)" rx="2" ry="2" />
<text  x="163.31" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast (9 samples, 0.01%)</title><rect x="817.2" y="149" width="0.2" height="15.0" fill="rgb(242,108,14)" rx="2" ry="2" />
<text  x="820.25" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;Intersection_data, std::allocator&lt;Intersection_data&gt; &gt;::operator[] (68 samples, 0.08%)</title><rect x="992.2" y="261" width="0.9" height="15.0" fill="rgb(221,191,37)" rx="2" ry="2" />
<text  x="995.17" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (569 samples, 0.63%)</title><rect x="1163.0" y="165" width="7.5" height="15.0" fill="rgb(243,225,43)" rx="2" ry="2" />
<text  x="1166.05" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;OSMID&amp;&amp;&gt; (18 samples, 0.02%)</title><rect x="957.8" y="261" width="0.3" height="15.0" fill="rgb(236,137,8)" rx="2" ry="2" />
<text  x="960.84" y="271.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (27 samples, 0.03%)</title><rect x="698.0" y="181" width="0.3" height="15.0" fill="rgb(219,168,11)" rx="2" ry="2" />
<text  x="700.95" y="191.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; (8 samples, 0.01%)</title><rect x="1184.3" y="261" width="0.1" height="15.0" fill="rgb(205,166,35)" rx="2" ry="2" />
<text  x="1187.26" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (230 samples, 0.26%)</title><rect x="1172.6" y="165" width="3.0" height="15.0" fill="rgb(224,162,15)" rx="2" ry="2" />
<text  x="1175.59" y="175.5" ></text>
</g>
<g >
<title>main (266 samples, 0.30%)</title><rect x="637.4" y="245" width="3.5" height="15.0" fill="rgb(235,177,15)" rx="2" ry="2" />
<text  x="640.45" y="255.5" ></text>
</g>
<g >
<title>getStreetName[abi:cxx11] (17 samples, 0.02%)</title><rect x="1096.0" y="197" width="0.2" height="15.0" fill="rgb(225,146,26)" rx="2" ry="2" />
<text  x="1099.00" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (9 samples, 0.01%)</title><rect x="730.1" y="197" width="0.1" height="15.0" fill="rgb(223,107,44)" rx="2" ry="2" />
<text  x="733.10" y="207.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;Feature_data*, Feature_data*, std::allocator&lt;Feature_data&gt; &gt; (25 samples, 0.03%)</title><rect x="1073.3" y="165" width="0.3" height="15.0" fill="rgb(225,32,7)" rx="2" ry="2" />
<text  x="1076.32" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (9 samples, 0.01%)</title><rect x="766.7" y="197" width="0.1" height="15.0" fill="rgb(253,7,27)" rx="2" ry="2" />
<text  x="769.71" y="207.5" ></text>
</g>
<g >
<title>getNodeByIndex (28 samples, 0.03%)</title><rect x="1101.9" y="197" width="0.3" height="15.0" fill="rgb(236,142,26)" rx="2" ry="2" />
<text  x="1104.87" y="207.5" ></text>
</g>
<g >
<title>png_read_image (19 samples, 0.02%)</title><rect x="10.2" y="197" width="0.2" height="15.0" fill="rgb(254,77,33)" rx="2" ry="2" />
<text  x="13.18" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (18 samples, 0.02%)</title><rect x="670.4" y="213" width="0.2" height="15.0" fill="rgb(248,68,16)" rx="2" ry="2" />
<text  x="673.38" y="223.5" ></text>
</g>
<g >
<title>do_cos (67 samples, 0.07%)</title><rect x="1069.3" y="133" width="0.9" height="15.0" fill="rgb(221,15,26)" rx="2" ry="2" />
<text  x="1072.30" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMNode&gt;::load_object_data (215 samples, 0.24%)</title><rect x="702.4" y="197" width="2.8" height="15.0" fill="rgb(251,159,31)" rx="2" ry="2" />
<text  x="705.39" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (5,004 samples, 5.56%)</title><rect x="1106.6" y="197" width="65.6" height="15.0" fill="rgb(220,101,46)" rx="2" ry="2" />
<text  x="1109.58" y="207.5" >std::__..</text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (20 samples, 0.02%)</title><rect x="1104.2" y="181" width="0.2" height="15.0" fill="rgb(221,174,46)" rx="2" ry="2" />
<text  x="1107.17" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::get_library_version@plt (14 samples, 0.02%)</title><rect x="728.4" y="149" width="0.1" height="15.0" fill="rgb(207,47,12)" rx="2" ry="2" />
<text  x="731.36" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::emplace_back&lt;int&amp;, int&amp;, double&amp;, double&amp;&gt; (465 samples, 0.52%)</title><rect x="164.2" y="197" width="6.1" height="15.0" fill="rgb(237,94,49)" rx="2" ry="2" />
<text  x="167.17" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMNode, std::allocator&lt;OSMNode&gt; &gt; &gt;::load_object_data (2,231 samples, 2.48%)</title><rect x="776.2" y="197" width="29.2" height="15.0" fill="rgb(221,64,43)" rx="2" ry="2" />
<text  x="779.18" y="207.5" >bo..</text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_check_len (38 samples, 0.04%)</title><rect x="1076.6" y="165" width="0.5" height="15.0" fill="rgb(221,98,1)" rx="2" ry="2" />
<text  x="1079.65" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMNode&gt;::load_object_data (358 samples, 0.40%)</title><rect x="686.2" y="245" width="4.7" height="15.0" fill="rgb(233,120,50)" rx="2" ry="2" />
<text  x="689.21" y="255.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.02%)</title><rect x="1082.0" y="181" width="0.2" height="15.0" fill="rgb(235,192,18)" rx="2" ry="2" />
<text  x="1085.01" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (160 samples, 0.18%)</title><rect x="1060.8" y="181" width="2.1" height="15.0" fill="rgb(224,65,23)" rx="2" ry="2" />
<text  x="1063.79" y="191.5" ></text>
</g>
<g >
<title>_int_free (127 samples, 0.14%)</title><rect x="644.6" y="261" width="1.7" height="15.0" fill="rgb(232,173,48)" rx="2" ry="2" />
<text  x="647.65" y="271.5" ></text>
</g>
<g >
<title>loadOSMRailRoads (46 samples, 0.05%)</title><rect x="1084.7" y="213" width="0.6" height="15.0" fill="rgb(228,179,41)" rx="2" ry="2" />
<text  x="1087.66" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMWay const*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20 samples, 0.02%)</title><rect x="908.8" y="261" width="0.3" height="15.0" fill="rgb(253,226,46)" rx="2" ry="2" />
<text  x="911.82" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (42 samples, 0.05%)</title><rect x="424.2" y="181" width="0.5" height="15.0" fill="rgb(244,151,20)" rx="2" ry="2" />
<text  x="427.16" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (11 samples, 0.01%)</title><rect x="811.6" y="149" width="0.1" height="15.0" fill="rgb(253,157,4)" rx="2" ry="2" />
<text  x="814.55" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (10 samples, 0.01%)</title><rect x="792.0" y="117" width="0.2" height="15.0" fill="rgb(211,21,29)" rx="2" ry="2" />
<text  x="795.04" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (11 samples, 0.01%)</title><rect x="470.6" y="181" width="0.1" height="15.0" fill="rgb(252,6,26)" rx="2" ry="2" />
<text  x="473.59" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (12 samples, 0.01%)</title><rect x="640.1" y="133" width="0.1" height="15.0" fill="rgb(220,148,7)" rx="2" ry="2" />
<text  x="643.08" y="143.5" ></text>
</g>
<g >
<title>_int_malloc (40 samples, 0.04%)</title><rect x="698.8" y="133" width="0.5" height="15.0" fill="rgb(224,65,21)" rx="2" ry="2" />
<text  x="701.75" y="143.5" ></text>
</g>
<g >
<title>std::push_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, WaveElem::Compare&gt; (2,005 samples, 2.23%)</title><rect x="425.1" y="213" width="26.3" height="15.0" fill="rgb(238,29,50)" rx="2" ry="2" />
<text  x="428.08" y="223.5" >s..</text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (57 samples, 0.06%)</title><rect x="694.4" y="117" width="0.8" height="15.0" fill="rgb(222,148,50)" rx="2" ry="2" />
<text  x="697.41" y="127.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::operator=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (24 samples, 0.03%)</title><rect x="991.6" y="261" width="0.3" height="15.0" fill="rgb(226,79,23)" rx="2" ry="2" />
<text  x="994.62" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (40 samples, 0.04%)</title><rect x="169.6" y="149" width="0.6" height="15.0" fill="rgb(252,106,9)" rx="2" ry="2" />
<text  x="172.64" y="159.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.01%)</title><rect x="695.2" y="133" width="0.1" height="15.0" fill="rgb(226,22,4)" rx="2" ry="2" />
<text  x="698.16" y="143.5" ></text>
</g>
<g >
<title>malloc_consolidate (34 samples, 0.04%)</title><rect x="169.7" y="117" width="0.4" height="15.0" fill="rgb(241,63,6)" rx="2" ry="2" />
<text  x="172.69" y="127.5" ></text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;WaveElem::Compare&gt; &gt; (471 samples, 0.52%)</title><rect x="914.0" y="261" width="6.1" height="15.0" fill="rgb(244,99,48)" rx="2" ry="2" />
<text  x="916.97" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (52 samples, 0.06%)</title><rect x="161.0" y="181" width="0.7" height="15.0" fill="rgb(248,101,8)" rx="2" ry="2" />
<text  x="163.98" y="191.5" ></text>
</g>
<g >
<title>findPathBetweenIntersections (38,607 samples, 42.91%)</title><rect x="14.8" y="245" width="506.4" height="15.0" fill="rgb(220,24,32)" rx="2" ry="2" />
<text  x="17.84" y="255.5" >findPathBetweenIntersections</text>
</g>
<g >
<title>__dynamic_cast (12 samples, 0.01%)</title><rect x="699.8" y="165" width="0.2" height="15.0" fill="rgb(254,84,23)" rx="2" ry="2" />
<text  x="702.83" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (98 samples, 0.11%)</title><rect x="780.8" y="149" width="1.2" height="15.0" fill="rgb(240,56,38)" rx="2" ry="2" />
<text  x="783.76" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (458 samples, 0.51%)</title><rect x="946.4" y="261" width="6.0" height="15.0" fill="rgb(208,42,20)" rx="2" ry="2" />
<text  x="949.40" y="271.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (12 samples, 0.01%)</title><rect x="699.8" y="149" width="0.2" height="15.0" fill="rgb(231,37,52)" rx="2" ry="2" />
<text  x="702.83" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (383 samples, 0.43%)</title><rect x="725.1" y="165" width="5.0" height="15.0" fill="rgb(247,46,41)" rx="2" ry="2" />
<text  x="728.08" y="175.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (11 samples, 0.01%)</title><rect x="814.5" y="149" width="0.1" height="15.0" fill="rgb(221,96,34)" rx="2" ry="2" />
<text  x="817.47" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (22 samples, 0.02%)</title><rect x="1105.3" y="197" width="0.3" height="15.0" fill="rgb(205,216,43)" rx="2" ry="2" />
<text  x="1108.29" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (94 samples, 0.10%)</title><rect x="685.0" y="197" width="1.2" height="15.0" fill="rgb(247,158,1)" rx="2" ry="2" />
<text  x="687.98" y="207.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (15 samples, 0.02%)</title><rect x="760.1" y="213" width="0.2" height="15.0" fill="rgb(222,153,54)" rx="2" ry="2" />
<text  x="763.07" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (317 samples, 0.35%)</title><rect x="805.6" y="181" width="4.1" height="15.0" fill="rgb(214,86,8)" rx="2" ry="2" />
<text  x="808.56" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_insert_unique&lt;int const&amp;&gt; (125 samples, 0.14%)</title><rect x="1082.7" y="181" width="1.6" height="15.0" fill="rgb(250,180,12)" rx="2" ry="2" />
<text  x="1085.71" y="191.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (52 samples, 0.06%)</title><rect x="809.0" y="149" width="0.7" height="15.0" fill="rgb(217,172,28)" rx="2" ry="2" />
<text  x="812.00" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (238 samples, 0.26%)</title><rect x="717.9" y="165" width="3.2" height="15.0" fill="rgb(211,187,9)" rx="2" ry="2" />
<text  x="720.94" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;sdb::Feature, std::allocator&lt;sdb::Feature&gt; &gt;::_M_default_append (22 samples, 0.02%)</title><rect x="813.3" y="181" width="0.3" height="15.0" fill="rgb(207,106,46)" rx="2" ry="2" />
<text  x="816.31" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, sdb::Feature&gt;::load_object_data (54 samples, 0.06%)</title><rect x="812.2" y="165" width="0.7" height="15.0" fill="rgb(227,220,16)" rx="2" ry="2" />
<text  x="815.22" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (15 samples, 0.02%)</title><rect x="699.6" y="197" width="0.2" height="15.0" fill="rgb(219,11,31)" rx="2" ry="2" />
<text  x="702.57" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (14 samples, 0.02%)</title><rect x="729.1" y="133" width="0.2" height="15.0" fill="rgb(228,118,26)" rx="2" ry="2" />
<text  x="732.12" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_create_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID const&amp;&gt;, std::tuple&lt;&gt; &gt; (15 samples, 0.02%)</title><rect x="1088.6" y="165" width="0.2" height="15.0" fill="rgb(210,111,37)" rx="2" ry="2" />
<text  x="1091.64" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::_M_deallocate_node (15 samples, 0.02%)</title><rect x="1059.8" y="149" width="0.2" height="15.0" fill="rgb(232,14,3)" rx="2" ry="2" />
<text  x="1062.85" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (511 samples, 0.57%)</title><rect x="746.0" y="261" width="6.7" height="15.0" fill="rgb(233,227,12)" rx="2" ry="2" />
<text  x="748.96" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (22 samples, 0.02%)</title><rect x="1105.3" y="181" width="0.3" height="15.0" fill="rgb(210,108,8)" rx="2" ry="2" />
<text  x="1108.29" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (10 samples, 0.01%)</title><rect x="717.8" y="165" width="0.1" height="15.0" fill="rgb(244,116,32)" rx="2" ry="2" />
<text  x="720.81" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (23 samples, 0.03%)</title><rect x="1092.2" y="181" width="0.3" height="15.0" fill="rgb(242,224,25)" rx="2" ry="2" />
<text  x="1095.22" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (140 samples, 0.16%)</title><rect x="695.3" y="245" width="1.9" height="15.0" fill="rgb(234,198,41)" rx="2" ry="2" />
<text  x="698.33" y="255.5" ></text>
</g>
<g >
<title>bfsPath (835 samples, 0.93%)</title><rect x="648.8" y="261" width="10.9" height="15.0" fill="rgb(233,153,10)" rx="2" ry="2" />
<text  x="651.78" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (31 samples, 0.03%)</title><rect x="1100.0" y="165" width="0.4" height="15.0" fill="rgb(237,122,51)" rx="2" ry="2" />
<text  x="1103.01" y="175.5" ></text>
</g>
<g >
<title>x_from_lon (9 samples, 0.01%)</title><rect x="1080.5" y="197" width="0.1" height="15.0" fill="rgb(230,141,45)" rx="2" ry="2" />
<text  x="1083.53" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (34 samples, 0.04%)</title><rect x="685.8" y="149" width="0.4" height="15.0" fill="rgb(243,145,52)" rx="2" ry="2" />
<text  x="688.77" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (288 samples, 0.32%)</title><rect x="730.2" y="181" width="3.8" height="15.0" fill="rgb(210,129,6)" rx="2" ry="2" />
<text  x="733.23" y="191.5" ></text>
</g>
<g >
<title>LatLon::latitude (24 samples, 0.03%)</title><rect x="10.4" y="261" width="0.4" height="15.0" fill="rgb(229,19,54)" rx="2" ry="2" />
<text  x="13.45" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (25 samples, 0.03%)</title><rect x="691.7" y="133" width="0.4" height="15.0" fill="rgb(226,202,36)" rx="2" ry="2" />
<text  x="694.75" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (34 samples, 0.04%)</title><rect x="685.8" y="181" width="0.4" height="15.0" fill="rgb(211,11,51)" rx="2" ry="2" />
<text  x="688.77" y="191.5" ></text>
</g>
<g >
<title>vtable for boost::serialization::detail::singleton_wrapper&lt;boost::serialization::extended_type_info_typeid&lt;OSMNode&gt; &gt; (76 samples, 0.08%)</title><rect x="1187.9" y="277" width="1.0" height="15.0" fill="rgb(228,91,52)" rx="2" ry="2" />
<text  x="1190.89" y="287.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (647 samples, 0.72%)</title><rect x="674.2" y="165" width="8.5" height="15.0" fill="rgb(243,227,23)" rx="2" ry="2" />
<text  x="677.20" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast (12 samples, 0.01%)</title><rect x="705.5" y="165" width="0.2" height="15.0" fill="rgb(254,30,48)" rx="2" ry="2" />
<text  x="708.53" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_create_storage (48 samples, 0.05%)</title><rect x="637.4" y="117" width="0.7" height="15.0" fill="rgb(228,101,22)" rx="2" ry="2" />
<text  x="640.45" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::vector (11 samples, 0.01%)</title><rect x="1013.5" y="261" width="0.2" height="15.0" fill="rgb(208,187,9)" rx="2" ry="2" />
<text  x="1016.52" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (13 samples, 0.01%)</title><rect x="164.0" y="181" width="0.2" height="15.0" fill="rgb(230,9,1)" rx="2" ry="2" />
<text  x="167.00" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (34 samples, 0.04%)</title><rect x="741.6" y="181" width="0.5" height="15.0" fill="rgb(212,201,36)" rx="2" ry="2" />
<text  x="744.60" y="191.5" ></text>
</g>
<g >
<title>std::set&lt;int, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::insert (15 samples, 0.02%)</title><rect x="639.9" y="197" width="0.2" height="15.0" fill="rgb(219,200,54)" rx="2" ry="2" />
<text  x="642.87" y="207.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (9 samples, 0.01%)</title><rect x="733.9" y="149" width="0.1" height="15.0" fill="rgb(219,157,16)" rx="2" ry="2" />
<text  x="736.89" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_realloc_insert&lt;ezgl::point2d const&amp;&gt; (52 samples, 0.06%)</title><rect x="1098.6" y="197" width="0.7" height="15.0" fill="rgb(242,131,53)" rx="2" ry="2" />
<text  x="1101.64" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (309 samples, 0.34%)</title><rect x="737.5" y="229" width="4.1" height="15.0" fill="rgb(234,134,20)" rx="2" ry="2" />
<text  x="740.53" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (238 samples, 0.26%)</title><rect x="734.4" y="165" width="3.1" height="15.0" fill="rgb(206,205,25)" rx="2" ry="2" />
<text  x="737.39" y="175.5" ></text>
</g>
<g >
<title>alloc_perturb (29 samples, 0.03%)</title><rect x="648.4" y="261" width="0.4" height="15.0" fill="rgb(206,198,17)" rx="2" ry="2" />
<text  x="651.40" y="271.5" ></text>
</g>
<g >
<title>operator new (228 samples, 0.25%)</title><rect x="471.5" y="165" width="3.0" height="15.0" fill="rgb(222,177,1)" rx="2" ry="2" />
<text  x="474.51" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (596 samples, 0.66%)</title><rect x="722.3" y="245" width="7.8" height="15.0" fill="rgb(212,206,43)" rx="2" ry="2" />
<text  x="725.28" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl_data::_Vector_impl_data (103 samples, 0.11%)</title><rect x="836.0" y="261" width="1.3" height="15.0" fill="rgb(217,25,51)" rx="2" ry="2" />
<text  x="838.95" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (9 samples, 0.01%)</title><rect x="1185.5" y="277" width="0.1" height="15.0" fill="rgb(240,199,13)" rx="2" ry="2" />
<text  x="1188.50" y="287.5" ></text>
</g>
<g >
<title>_dl_relocate_object (23 samples, 0.03%)</title><rect x="755.5" y="245" width="0.3" height="15.0" fill="rgb(208,151,26)" rx="2" ry="2" />
<text  x="758.51" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (8 samples, 0.01%)</title><rect x="774.7" y="197" width="0.1" height="15.0" fill="rgb(234,157,39)" rx="2" ry="2" />
<text  x="777.72" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;OSMID&gt;::operator() (8 samples, 0.01%)</title><rect x="1172.1" y="165" width="0.1" height="15.0" fill="rgb(214,1,7)" rx="2" ry="2" />
<text  x="1175.11" y="175.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;WaveElem, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;, WaveElem::Compare&gt;::pop (164 samples, 0.18%)</title><rect x="985.7" y="261" width="2.2" height="15.0" fill="rgb(246,41,20)" rx="2" ry="2" />
<text  x="988.74" y="271.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;OSMID, OSMNode const*, std::hash&lt;OSMID&gt;, std::equal_to&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt; &gt;::operator[] (17 samples, 0.02%)</title><rect x="1172.2" y="197" width="0.2" height="15.0" fill="rgb(222,12,34)" rx="2" ry="2" />
<text  x="1175.21" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (181 samples, 0.20%)</title><rect x="709.8" y="149" width="2.4" height="15.0" fill="rgb(248,60,45)" rx="2" ry="2" />
<text  x="712.85" y="159.5" ></text>
</g>
<g >
<title>_int_malloc (38 samples, 0.04%)</title><rect x="169.6" y="133" width="0.5" height="15.0" fill="rgb(223,50,43)" rx="2" ry="2" />
<text  x="172.64" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (79 samples, 0.09%)</title><rect x="807.5" y="149" width="1.0" height="15.0" fill="rgb(254,181,41)" rx="2" ry="2" />
<text  x="810.50" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (86 samples, 0.10%)</title><rect x="1186.8" y="261" width="1.1" height="15.0" fill="rgb(246,17,7)" rx="2" ry="2" />
<text  x="1189.76" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (18 samples, 0.02%)</title><rect x="699.8" y="245" width="0.2" height="15.0" fill="rgb(233,70,47)" rx="2" ry="2" />
<text  x="702.76" y="255.5" ></text>
</g>
<g >
<title>_int_free (178 samples, 0.20%)</title><rect x="1056.9" y="149" width="2.3" height="15.0" fill="rgb(219,41,19)" rx="2" ry="2" />
<text  x="1059.86" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (110 samples, 0.12%)</title><rect x="689.5" y="149" width="1.4" height="15.0" fill="rgb(239,124,2)" rx="2" ry="2" />
<text  x="692.47" y="159.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (10 samples, 0.01%)</title><rect x="741.9" y="149" width="0.1" height="15.0" fill="rgb(213,28,18)" rx="2" ry="2" />
<text  x="744.87" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_realloc_insert&lt;ezgl::point2d const&amp;&gt; (237 samples, 0.26%)</title><rect x="1074.2" y="181" width="3.1" height="15.0" fill="rgb(212,11,46)" rx="2" ry="2" />
<text  x="1077.18" y="191.5" ></text>
</g>
<g >
<title>getStreetSegmentCurvePoint (22 samples, 0.02%)</title><rect x="1093.4" y="181" width="0.3" height="15.0" fill="rgb(210,140,53)" rx="2" ry="2" />
<text  x="1096.38" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (33 samples, 0.04%)</title><rect x="693.9" y="117" width="0.4" height="15.0" fill="rgb(220,203,20)" rx="2" ry="2" />
<text  x="696.90" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (14 samples, 0.02%)</title><rect x="670.4" y="165" width="0.2" height="15.0" fill="rgb(243,138,2)" rx="2" ry="2" />
<text  x="673.43" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (114 samples, 0.13%)</title><rect x="1160.0" y="133" width="1.5" height="15.0" fill="rgb(209,43,44)" rx="2" ry="2" />
<text  x="1163.04" y="143.5" ></text>
</g>
<g >
<title>std::pair&lt;OSMID const, OSMNode const*&gt;::pair&lt;OSMID&amp;&amp;&gt; (17 samples, 0.02%)</title><rect x="980.3" y="261" width="0.2" height="15.0" fill="rgb(250,39,52)" rx="2" ry="2" />
<text  x="983.31" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (96 samples, 0.11%)</title><rect x="615.8" y="261" width="1.2" height="15.0" fill="rgb(234,164,41)" rx="2" ry="2" />
<text  x="618.78" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::base (196 samples, 0.22%)</title><rect x="575.0" y="261" width="2.6" height="15.0" fill="rgb(248,106,28)" rx="2" ry="2" />
<text  x="578.03" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1,334 samples, 1.48%)</title><rect x="1043.3" y="181" width="17.5" height="15.0" fill="rgb(247,83,14)" rx="2" ry="2" />
<text  x="1046.29" y="191.5" ></text>
</g>
<g >
<title>getTagPair[abi:cxx11] (158 samples, 0.18%)</title><rect x="1102.6" y="197" width="2.1" height="15.0" fill="rgb(215,191,18)" rx="2" ry="2" />
<text  x="1105.58" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (238 samples, 0.26%)</title><rect x="717.9" y="197" width="3.2" height="15.0" fill="rgb(246,144,31)" rx="2" ry="2" />
<text  x="720.94" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (10 samples, 0.01%)</title><rect x="812.5" y="133" width="0.1" height="15.0" fill="rgb(220,214,21)" rx="2" ry="2" />
<text  x="815.51" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMNode&gt;::load_object_data (772 samples, 0.86%)</title><rect x="786.8" y="165" width="10.1" height="15.0" fill="rgb(224,41,7)" rx="2" ry="2" />
<text  x="789.79" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (267 samples, 0.30%)</title><rect x="734.0" y="181" width="3.5" height="15.0" fill="rgb(221,223,38)" rx="2" ry="2" />
<text  x="737.01" y="191.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;WaveElem, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;, WaveElem::Compare&gt;::empty (27 samples, 0.03%)</title><rect x="173.3" y="213" width="0.3" height="15.0" fill="rgb(224,98,53)" rx="2" ry="2" />
<text  x="176.27" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (31 samples, 0.03%)</title><rect x="807.7" y="133" width="0.4" height="15.0" fill="rgb(228,23,32)" rx="2" ry="2" />
<text  x="810.68" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (16 samples, 0.02%)</title><rect x="158.1" y="213" width="0.2" height="15.0" fill="rgb(251,66,28)" rx="2" ry="2" />
<text  x="161.06" y="223.5" ></text>
</g>
<g >
<title>findFeatureArea (16 samples, 0.02%)</title><rect x="756.0" y="261" width="0.2" height="15.0" fill="rgb(219,11,1)" rx="2" ry="2" />
<text  x="759.02" y="271.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (14 samples, 0.02%)</title><rect x="808.3" y="117" width="0.2" height="15.0" fill="rgb(247,105,10)" rx="2" ry="2" />
<text  x="811.31" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMNode&gt;::load_object_data (596 samples, 0.66%)</title><rect x="722.3" y="229" width="7.8" height="15.0" fill="rgb(214,84,11)" rx="2" ry="2" />
<text  x="725.28" y="239.5" ></text>
</g>
<g >
<title>_int_free (14 samples, 0.02%)</title><rect x="675.2" y="133" width="0.1" height="15.0" fill="rgb(217,149,37)" rx="2" ry="2" />
<text  x="678.16" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (17 samples, 0.02%)</title><rect x="812.7" y="149" width="0.2" height="15.0" fill="rgb(248,218,20)" rx="2" ry="2" />
<text  x="815.71" y="159.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (23 samples, 0.03%)</title><rect x="689.1" y="117" width="0.3" height="15.0" fill="rgb(229,55,51)" rx="2" ry="2" />
<text  x="692.14" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem const*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::base (81 samples, 0.09%)</title><rect x="551.4" y="261" width="1.1" height="15.0" fill="rgb(209,37,9)" rx="2" ry="2" />
<text  x="554.39" y="271.5" ></text>
</g>
<g >
<title>std::forward&lt;int&amp;&gt; (261 samples, 0.29%)</title><rect x="962.7" y="261" width="3.4" height="15.0" fill="rgb(214,111,32)" rx="2" ry="2" />
<text  x="965.67" y="271.5" ></text>
</g>
<g >
<title>WaveElem::WaveElem (33 samples, 0.04%)</title><rect x="166.4" y="181" width="0.5" height="15.0" fill="rgb(252,80,47)" rx="2" ry="2" />
<text  x="169.43" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;::_M_ptr (13 samples, 0.01%)</title><rect x="1107.5" y="181" width="0.2" height="15.0" fill="rgb(242,136,18)" rx="2" ry="2" />
<text  x="1110.52" y="191.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (8 samples, 0.01%)</title><rect x="1077.0" y="133" width="0.1" height="15.0" fill="rgb(228,217,29)" rx="2" ry="2" />
<text  x="1079.98" y="143.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (33 samples, 0.04%)</title><rect x="798.1" y="165" width="0.4" height="15.0" fill="rgb(245,69,4)" rx="2" ry="2" />
<text  x="801.07" y="175.5" ></text>
</g>
<g >
<title>checked_request2size (25 samples, 0.03%)</title><rect x="1169.5" y="117" width="0.3" height="15.0" fill="rgb(249,154,19)" rx="2" ry="2" />
<text  x="1172.50" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (574 samples, 0.64%)</title><rect x="1163.0" y="181" width="7.5" height="15.0" fill="rgb(226,149,26)" rx="2" ry="2" />
<text  x="1165.98" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (308 samples, 0.34%)</title><rect x="737.5" y="181" width="4.1" height="15.0" fill="rgb(244,116,44)" rx="2" ry="2" />
<text  x="740.53" y="191.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;OSMID&gt; (17 samples, 0.02%)</title><rect x="1171.2" y="181" width="0.3" height="15.0" fill="rgb(247,184,18)" rx="2" ry="2" />
<text  x="1174.24" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;WaveElem::Compare&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, WaveElem&gt; (39 samples, 0.04%)</title><rect x="450.9" y="165" width="0.5" height="15.0" fill="rgb(226,97,54)" rx="2" ry="2" />
<text  x="453.85" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (48 samples, 0.05%)</title><rect x="824.3" y="261" width="0.6" height="15.0" fill="rgb(213,160,4)" rx="2" ry="2" />
<text  x="827.30" y="271.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.01%)</title><rect x="684.9" y="133" width="0.1" height="15.0" fill="rgb(227,12,6)" rx="2" ry="2" />
<text  x="687.86" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (358 samples, 0.40%)</title><rect x="686.2" y="213" width="4.7" height="15.0" fill="rgb(211,148,54)" rx="2" ry="2" />
<text  x="689.21" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (84 samples, 0.09%)</title><rect x="520.1" y="197" width="1.1" height="15.0" fill="rgb(243,1,34)" rx="2" ry="2" />
<text  x="523.12" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_free (19 samples, 0.02%)</title><rect x="1074.5" y="165" width="0.2" height="15.0" fill="rgb(227,102,41)" rx="2" ry="2" />
<text  x="1077.50" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::_M_emplace_equal&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; (12 samples, 0.01%)</title><rect x="1084.4" y="197" width="0.1" height="15.0" fill="rgb(245,62,17)" rx="2" ry="2" />
<text  x="1087.39" y="207.5" ></text>
</g>
<g >
<title>getNumberOfNodes (20 samples, 0.02%)</title><rect x="758.0" y="261" width="0.3" height="15.0" fill="rgb(228,33,54)" rx="2" ry="2" />
<text  x="761.03" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;ezgl::point2d const*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt;::base (52 samples, 0.06%)</title><rect x="613.6" y="261" width="0.6" height="15.0" fill="rgb(248,180,39)" rx="2" ry="2" />
<text  x="616.56" y="271.5" ></text>
</g>
<g >
<title>loadMap (534 samples, 0.59%)</title><rect x="760.0" y="261" width="7.0" height="15.0" fill="rgb(206,47,29)" rx="2" ry="2" />
<text  x="763.01" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (23 samples, 0.03%)</title><rect x="1088.9" y="165" width="0.3" height="15.0" fill="rgb(239,228,8)" rx="2" ry="2" />
<text  x="1091.87" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (48 samples, 0.05%)</title><rect x="637.4" y="69" width="0.7" height="15.0" fill="rgb(249,167,20)" rx="2" ry="2" />
<text  x="640.45" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_insert_unique&lt;int const&amp;&gt; (15 samples, 0.02%)</title><rect x="639.9" y="181" width="0.2" height="15.0" fill="rgb(220,95,1)" rx="2" ry="2" />
<text  x="642.87" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (40 samples, 0.04%)</title><rect x="1171.5" y="165" width="0.6" height="15.0" fill="rgb(217,36,1)" rx="2" ry="2" />
<text  x="1174.55" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID const&amp;&gt;, std::tuple&lt;&gt; &gt; (12 samples, 0.01%)</title><rect x="640.1" y="181" width="0.1" height="15.0" fill="rgb(239,54,41)" rx="2" ry="2" />
<text  x="643.08" y="191.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (32 samples, 0.04%)</title><rect x="1100.0" y="181" width="0.4" height="15.0" fill="rgb(225,204,26)" rx="2" ry="2" />
<text  x="1103.01" y="191.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (11 samples, 0.01%)</title><rect x="727.5" y="149" width="0.1" height="15.0" fill="rgb(232,13,45)" rx="2" ry="2" />
<text  x="730.45" y="159.5" ></text>
</g>
<g >
<title>getIntersectionName[abi:cxx11] (47 samples, 0.05%)</title><rect x="817.0" y="213" width="0.6" height="15.0" fill="rgb(234,153,41)" rx="2" ry="2" />
<text  x="819.97" y="223.5" ></text>
</g>
<g >
<title>_int_free (8 samples, 0.01%)</title><rect x="1065.9" y="165" width="0.2" height="15.0" fill="rgb(233,78,27)" rx="2" ry="2" />
<text  x="1068.95" y="175.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (23 samples, 0.03%)</title><rect x="702.1" y="149" width="0.3" height="15.0" fill="rgb(247,93,22)" rx="2" ry="2" />
<text  x="705.08" y="159.5" ></text>
</g>
<g >
<title>_start (12,279 samples, 13.65%)</title><rect x="1018.7" y="277" width="161.0" height="15.0" fill="rgb(212,5,36)" rx="2" ry="2" />
<text  x="1021.66" y="287.5" >_start</text>
</g>
<g >
<title>__memcmp_evex_movbe (9 samples, 0.01%)</title><rect x="1100.1" y="149" width="0.1" height="15.0" fill="rgb(244,113,35)" rx="2" ry="2" />
<text  x="1103.13" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (13 samples, 0.01%)</title><rect x="699.8" y="197" width="0.2" height="15.0" fill="rgb(254,145,19)" rx="2" ry="2" />
<text  x="702.83" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMWay&gt;::load_object_data (42 samples, 0.05%)</title><rect x="698.7" y="213" width="0.6" height="15.0" fill="rgb(242,160,11)" rx="2" ry="2" />
<text  x="701.73" y="223.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned int&gt; &gt; &gt; (25 samples, 0.03%)</title><rect x="670.7" y="181" width="0.3" height="15.0" fill="rgb(240,13,3)" rx="2" ry="2" />
<text  x="673.66" y="191.5" ></text>
</g>
<g >
<title>vtable for boost::serialization::detail::singleton_wrapper&lt;boost::serialization::extended_type_info_typeid&lt;LatLon&gt; &gt; (57 samples, 0.06%)</title><rect x="1186.0" y="277" width="0.8" height="15.0" fill="rgb(244,102,19)" rx="2" ry="2" />
<text  x="1189.01" y="287.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (11 samples, 0.01%)</title><rect x="966.2" y="261" width="0.1" height="15.0" fill="rgb(206,32,30)" rx="2" ry="2" />
<text  x="969.17" y="271.5" ></text>
</g>
<g >
<title>std::addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; (12 samples, 0.01%)</title><rect x="1060.2" y="133" width="0.1" height="15.0" fill="rgb(217,116,40)" rx="2" ry="2" />
<text  x="1063.16" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;::_M_valptr (11 samples, 0.01%)</title><rect x="1170.8" y="181" width="0.2" height="15.0" fill="rgb(250,219,1)" rx="2" ry="2" />
<text  x="1173.81" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (23 samples, 0.03%)</title><rect x="705.2" y="197" width="0.3" height="15.0" fill="rgb(228,99,39)" rx="2" ry="2" />
<text  x="708.21" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (68 samples, 0.08%)</title><rect x="715.0" y="197" width="0.9" height="15.0" fill="rgb(213,52,29)" rx="2" ry="2" />
<text  x="718.00" y="207.5" ></text>
</g>
<g >
<title>operator new (595 samples, 0.66%)</title><rect x="767.0" y="213" width="7.8" height="15.0" fill="rgb(208,88,7)" rx="2" ry="2" />
<text  x="770.02" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (21 samples, 0.02%)</title><rect x="815.7" y="133" width="0.3" height="15.0" fill="rgb(218,5,3)" rx="2" ry="2" />
<text  x="818.70" y="143.5" ></text>
</g>
<g >
<title>getIntersectionPosition (41 samples, 0.05%)</title><rect x="1095.4" y="197" width="0.5" height="15.0" fill="rgb(224,1,35)" rx="2" ry="2" />
<text  x="1098.37" y="207.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (42 samples, 0.05%)</title><rect x="715.3" y="149" width="0.6" height="15.0" fill="rgb(217,98,5)" rx="2" ry="2" />
<text  x="718.35" y="159.5" ></text>
</g>
<g >
<title>operator new (66 samples, 0.07%)</title><rect x="1178.4" y="149" width="0.8" height="15.0" fill="rgb(227,113,17)" rx="2" ry="2" />
<text  x="1181.35" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMNode, std::allocator&lt;OSMNode&gt; &gt; &gt;::load_object_data (608 samples, 0.68%)</title><rect x="722.1" y="261" width="8.0" height="15.0" fill="rgb(253,55,16)" rx="2" ry="2" />
<text  x="725.13" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::begin (19 samples, 0.02%)</title><rect x="423.4" y="197" width="0.3" height="15.0" fill="rgb(229,22,53)" rx="2" ry="2" />
<text  x="426.44" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (15 samples, 0.02%)</title><rect x="705.2" y="149" width="0.2" height="15.0" fill="rgb(206,38,54)" rx="2" ry="2" />
<text  x="708.21" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (18 samples, 0.02%)</title><rect x="670.7" y="133" width="0.2" height="15.0" fill="rgb(228,145,2)" rx="2" ry="2" />
<text  x="673.66" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (27 samples, 0.03%)</title><rect x="1084.8" y="181" width="0.3" height="15.0" fill="rgb(208,34,10)" rx="2" ry="2" />
<text  x="1087.79" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;sdb::Feature, std::allocator&lt;sdb::Feature&gt; &gt; &gt;::load_object_data (37 samples, 0.04%)</title><rect x="699.3" y="245" width="0.5" height="15.0" fill="rgb(234,27,47)" rx="2" ry="2" />
<text  x="702.28" y="255.5" ></text>
</g>
<g >
<title>std::move&lt;ezgl::point2d&amp;&gt; (8 samples, 0.01%)</title><rect x="979.3" y="261" width="0.1" height="15.0" fill="rgb(224,131,9)" rx="2" ry="2" />
<text  x="982.31" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (10 samples, 0.01%)</title><rect x="670.5" y="149" width="0.1" height="15.0" fill="rgb(254,44,0)" rx="2" ry="2" />
<text  x="673.49" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_realloc_insert&lt;ezgl::point2d const&amp;&gt; (21 samples, 0.02%)</title><rect x="640.5" y="197" width="0.2" height="15.0" fill="rgb(243,46,27)" rx="2" ry="2" />
<text  x="643.45" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (68 samples, 0.08%)</title><rect x="715.0" y="165" width="0.9" height="15.0" fill="rgb(225,99,28)" rx="2" ry="2" />
<text  x="718.00" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, sdb::Feature&gt;::load_object_data (54 samples, 0.06%)</title><rect x="696.0" y="181" width="0.7" height="15.0" fill="rgb(239,20,4)" rx="2" ry="2" />
<text  x="698.97" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (14 samples, 0.02%)</title><rect x="741.8" y="165" width="0.2" height="15.0" fill="rgb(254,212,7)" rx="2" ry="2" />
<text  x="744.83" y="175.5" ></text>
</g>
<g >
<title>operator new@plt (9 samples, 0.01%)</title><rect x="766.6" y="197" width="0.1" height="15.0" fill="rgb(217,121,29)" rx="2" ry="2" />
<text  x="769.59" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (13 samples, 0.01%)</title><rect x="1104.4" y="165" width="0.2" height="15.0" fill="rgb(244,80,40)" rx="2" ry="2" />
<text  x="1107.44" y="175.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; (14 samples, 0.02%)</title><rect x="840.8" y="261" width="0.2" height="15.0" fill="rgb(243,100,50)" rx="2" ry="2" />
<text  x="843.82" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (360 samples, 0.40%)</title><rect x="952.5" y="261" width="4.8" height="15.0" fill="rgb(246,203,13)" rx="2" ry="2" />
<text  x="955.53" y="271.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load (8 samples, 0.01%)</title><rect x="721.1" y="181" width="0.1" height="15.0" fill="rgb(223,92,26)" rx="2" ry="2" />
<text  x="724.06" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;Feature_data, std::allocator&lt;Feature_data&gt; &gt;::push_back (48 samples, 0.05%)</title><rect x="637.4" y="181" width="0.7" height="15.0" fill="rgb(218,47,8)" rx="2" ry="2" />
<text  x="640.45" y="191.5" ></text>
</g>
<g >
<title>operator delete@plt (49 samples, 0.05%)</title><rect x="156.9" y="213" width="0.6" height="15.0" fill="rgb(243,157,2)" rx="2" ry="2" />
<text  x="159.86" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_S_max_size (33 samples, 0.04%)</title><rect x="1012.5" y="261" width="0.4" height="15.0" fill="rgb(206,207,31)" rx="2" ry="2" />
<text  x="1015.47" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_check_len (29 samples, 0.03%)</title><rect x="1011.3" y="261" width="0.4" height="15.0" fill="rgb(224,201,24)" rx="2" ry="2" />
<text  x="1014.29" y="271.5" ></text>
</g>
<g >
<title>_int_free (184 samples, 0.20%)</title><rect x="118.7" y="213" width="2.4" height="15.0" fill="rgb(223,122,34)" rx="2" ry="2" />
<text  x="121.70" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (10 samples, 0.01%)</title><rect x="717.6" y="213" width="0.1" height="15.0" fill="rgb(228,70,38)" rx="2" ry="2" />
<text  x="720.61" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator+ (251 samples, 0.28%)</title><rect x="419.2" y="117" width="3.3" height="15.0" fill="rgb(217,185,32)" rx="2" ry="2" />
<text  x="422.18" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (10 samples, 0.01%)</title><rect x="702.8" y="133" width="0.1" height="15.0" fill="rgb(237,36,23)" rx="2" ry="2" />
<text  x="705.81" y="143.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.01%)</title><rect x="1077.4" y="149" width="0.2" height="15.0" fill="rgb(251,43,53)" rx="2" ry="2" />
<text  x="1080.40" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (29 samples, 0.03%)</title><rect x="1062.9" y="117" width="0.4" height="15.0" fill="rgb(242,196,25)" rx="2" ry="2" />
<text  x="1065.94" y="127.5" ></text>
</g>
<g >
<title>std::__addressof&lt;ezgl::point2d&gt; (46 samples, 0.05%)</title><rect x="840.2" y="261" width="0.6" height="15.0" fill="rgb(228,118,33)" rx="2" ry="2" />
<text  x="843.21" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::end (9 samples, 0.01%)</title><rect x="1012.9" y="261" width="0.2" height="15.0" fill="rgb(237,201,33)" rx="2" ry="2" />
<text  x="1015.94" y="271.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (10 samples, 0.01%)</title><rect x="717.6" y="133" width="0.1" height="15.0" fill="rgb(230,32,35)" rx="2" ry="2" />
<text  x="720.61" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;std::piecewise_construct_t const&amp;&gt; (17 samples, 0.02%)</title><rect x="966.3" y="261" width="0.2" height="15.0" fill="rgb(223,183,14)" rx="2" ry="2" />
<text  x="969.31" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator+ (3,890 samples, 4.32%)</title><rect x="291.1" y="149" width="51.0" height="15.0" fill="rgb(234,132,38)" rx="2" ry="2" />
<text  x="294.07" y="159.5" >__gnu..</text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, long, WaveElem, __gnu_cxx::__ops::_Iter_comp_iter&lt;WaveElem::Compare&gt; &gt; (4,810 samples, 5.35%)</title><rect x="841.0" y="261" width="63.1" height="15.0" fill="rgb(238,110,39)" rx="2" ry="2" />
<text  x="844.00" y="271.5" >std::_..</text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::operator= (35 samples, 0.04%)</title><rect x="1077.3" y="181" width="0.5" height="15.0" fill="rgb(205,198,8)" rx="2" ry="2" />
<text  x="1080.29" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (37 samples, 0.04%)</title><rect x="696.7" y="197" width="0.5" height="15.0" fill="rgb(253,41,22)" rx="2" ry="2" />
<text  x="699.68" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (121 samples, 0.13%)</title><rect x="1014.4" y="261" width="1.6" height="15.0" fill="rgb(241,220,24)" rx="2" ry="2" />
<text  x="1017.41" y="271.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;ezgl::point2d*, ezgl::point2d*, std::allocator&lt;ezgl::point2d&gt; &gt; (63 samples, 0.07%)</title><rect x="938.3" y="261" width="0.8" height="15.0" fill="rgb(238,119,3)" rx="2" ry="2" />
<text  x="941.28" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_insert_node (24 samples, 0.03%)</title><rect x="1088.9" y="181" width="0.3" height="15.0" fill="rgb(217,6,29)" rx="2" ry="2" />
<text  x="1091.86" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (18 samples, 0.02%)</title><rect x="1175.4" y="149" width="0.2" height="15.0" fill="rgb(220,10,44)" rx="2" ry="2" />
<text  x="1178.38" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, EdgeProperties&gt;::load_object_data (59 samples, 0.07%)</title><rect x="745.2" y="229" width="0.7" height="15.0" fill="rgb(228,87,28)" rx="2" ry="2" />
<text  x="748.17" y="239.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (36 samples, 0.04%)</title><rect x="913.1" y="261" width="0.5" height="15.0" fill="rgb(220,86,32)" rx="2" ry="2" />
<text  x="916.11" y="271.5" ></text>
</g>
<g >
<title>[unknown] (76,882 samples, 85.46%)</title><rect x="10.1" y="277" width="1008.4" height="15.0" fill="rgb(231,134,19)" rx="2" ry="2" />
<text  x="13.10" y="287.5" >[unknown]</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (41 samples, 0.05%)</title><rect x="712.4" y="181" width="0.5" height="15.0" fill="rgb(239,86,21)" rx="2" ry="2" />
<text  x="715.35" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;OSMID&gt;::operator() (19 samples, 0.02%)</title><rect x="1179.4" y="181" width="0.3" height="15.0" fill="rgb(216,50,32)" rx="2" ry="2" />
<text  x="1182.40" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (288 samples, 0.32%)</title><rect x="730.2" y="229" width="3.8" height="15.0" fill="rgb(224,208,26)" rx="2" ry="2" />
<text  x="733.23" y="239.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (21 samples, 0.02%)</title><rect x="782.0" y="149" width="0.3" height="15.0" fill="rgb(208,78,48)" rx="2" ry="2" />
<text  x="785.04" y="159.5" ></text>
</g>
<g >
<title>strcmp@plt (9 samples, 0.01%)</title><rect x="737.1" y="117" width="0.1" height="15.0" fill="rgb(254,144,16)" rx="2" ry="2" />
<text  x="740.13" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::begin (301 samples, 0.33%)</title><rect x="996.9" y="261" width="4.0" height="15.0" fill="rgb(226,229,18)" rx="2" ry="2" />
<text  x="999.91" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMWay, std::allocator&lt;OSMWay&gt; &gt; &gt;::load_object_data (556 samples, 0.62%)</title><rect x="730.2" y="261" width="7.3" height="15.0" fill="rgb(240,216,25)" rx="2" ry="2" />
<text  x="733.23" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,092 samples, 1.21%)</title><rect x="670.7" y="229" width="14.3" height="15.0" fill="rgb(218,204,48)" rx="2" ry="2" />
<text  x="673.66" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10 samples, 0.01%)</title><rect x="1097.9" y="181" width="0.1" height="15.0" fill="rgb(224,188,41)" rx="2" ry="2" />
<text  x="1100.87" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_check_len (10 samples, 0.01%)</title><rect x="1099.8" y="165" width="0.1" height="15.0" fill="rgb(216,75,47)" rx="2" ry="2" />
<text  x="1102.76" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (10 samples, 0.01%)</title><rect x="717.8" y="229" width="0.1" height="15.0" fill="rgb(244,189,28)" rx="2" ry="2" />
<text  x="720.81" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (579 samples, 0.64%)</title><rect x="767.1" y="197" width="7.6" height="15.0" fill="rgb(245,39,36)" rx="2" ry="2" />
<text  x="770.13" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (140 samples, 0.16%)</title><rect x="695.3" y="229" width="1.9" height="15.0" fill="rgb(209,138,17)" rx="2" ry="2" />
<text  x="698.33" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (36 samples, 0.04%)</title><rect x="714.5" y="165" width="0.5" height="15.0" fill="rgb(251,151,46)" rx="2" ry="2" />
<text  x="717.53" y="175.5" ></text>
</g>
<g >
<title>loadOSMWays (32 samples, 0.04%)</title><rect x="810.2" y="261" width="0.4" height="15.0" fill="rgb(244,45,12)" rx="2" ry="2" />
<text  x="813.23" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (245 samples, 0.27%)</title><rect x="671.0" y="181" width="3.2" height="15.0" fill="rgb(226,49,26)" rx="2" ry="2" />
<text  x="673.99" y="191.5" ></text>
</g>
<g >
<title>malloc_consolidate (118 samples, 0.13%)</title><rect x="1064.3" y="133" width="1.6" height="15.0" fill="rgb(210,56,33)" rx="2" ry="2" />
<text  x="1067.33" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (250 samples, 0.28%)</title><rect x="717.9" y="261" width="3.3" height="15.0" fill="rgb(229,215,54)" rx="2" ry="2" />
<text  x="720.94" y="271.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, OSMID&amp;&amp;, false&gt;::_M_head (16 samples, 0.02%)</title><rect x="829.5" y="261" width="0.2" height="15.0" fill="rgb(250,224,49)" rx="2" ry="2" />
<text  x="832.51" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMWay&gt;::load_object_data (337 samples, 0.37%)</title><rect x="690.9" y="245" width="4.4" height="15.0" fill="rgb(213,21,49)" rx="2" ry="2" />
<text  x="693.91" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (12 samples, 0.01%)</title><rect x="474.3" y="149" width="0.2" height="15.0" fill="rgb(211,47,8)" rx="2" ry="2" />
<text  x="477.35" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (37 samples, 0.04%)</title><rect x="697.3" y="197" width="0.5" height="15.0" fill="rgb(245,192,30)" rx="2" ry="2" />
<text  x="700.35" y="207.5" ></text>
</g>
<g >
<title>strcmp@plt (32 samples, 0.04%)</title><rect x="711.8" y="133" width="0.4" height="15.0" fill="rgb(218,82,11)" rx="2" ry="2" />
<text  x="714.80" y="143.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::operator=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (19 samples, 0.02%)</title><rect x="1105.7" y="197" width="0.3" height="15.0" fill="rgb(234,105,15)" rx="2" ry="2" />
<text  x="1108.70" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (15 samples, 0.02%)</title><rect x="499.5" y="197" width="0.2" height="15.0" fill="rgb(232,6,37)" rx="2" ry="2" />
<text  x="502.49" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (79 samples, 0.09%)</title><rect x="683.8" y="133" width="1.1" height="15.0" fill="rgb(205,207,20)" rx="2" ry="2" />
<text  x="686.83" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (10 samples, 0.01%)</title><rect x="717.8" y="181" width="0.1" height="15.0" fill="rgb(237,18,12)" rx="2" ry="2" />
<text  x="720.81" y="191.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;WaveElem, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;, WaveElem::Compare&gt;::top (27 samples, 0.03%)</title><rect x="424.7" y="213" width="0.4" height="15.0" fill="rgb(213,141,38)" rx="2" ry="2" />
<text  x="427.73" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (892 samples, 0.99%)</title><rect x="671.0" y="197" width="11.7" height="15.0" fill="rgb(231,166,14)" rx="2" ry="2" />
<text  x="673.99" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMNode&gt;::load_object_data (39 samples, 0.04%)</title><rect x="717.2" y="261" width="0.5" height="15.0" fill="rgb(245,111,45)" rx="2" ry="2" />
<text  x="720.23" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20 samples, 0.02%)</title><rect x="1180.2" y="261" width="0.2" height="15.0" fill="rgb(250,87,19)" rx="2" ry="2" />
<text  x="1183.16" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;OSMID const, OSMNode const*&gt;::pair&lt;OSMID&amp;&amp;&gt; (29 samples, 0.03%)</title><rect x="1163.5" y="133" width="0.4" height="15.0" fill="rgb(237,102,40)" rx="2" ry="2" />
<text  x="1166.52" y="143.5" ></text>
</g>
<g >
<title>__memset_evex_erms (114 samples, 0.13%)</title><rect x="1160.0" y="117" width="1.5" height="15.0" fill="rgb(214,66,35)" rx="2" ry="2" />
<text  x="1163.04" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (13 samples, 0.01%)</title><rect x="699.8" y="181" width="0.2" height="15.0" fill="rgb(231,127,15)" rx="2" ry="2" />
<text  x="702.83" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (438 samples, 0.49%)</title><rect x="1164.1" y="133" width="5.7" height="15.0" fill="rgb(208,210,41)" rx="2" ry="2" />
<text  x="1167.08" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, sdb::Feature&gt;::load_object_data (36 samples, 0.04%)</title><rect x="741.6" y="229" width="0.5" height="15.0" fill="rgb(236,88,41)" rx="2" ry="2" />
<text  x="744.58" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, sdb::Feature&gt;::load_object_data (8 samples, 0.01%)</title><rect x="721.1" y="197" width="0.1" height="15.0" fill="rgb(225,207,51)" rx="2" ry="2" />
<text  x="724.06" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (94 samples, 0.10%)</title><rect x="685.0" y="229" width="1.2" height="15.0" fill="rgb(214,16,33)" rx="2" ry="2" />
<text  x="687.98" y="239.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (9 samples, 0.01%)</title><rect x="500.5" y="197" width="0.1" height="15.0" fill="rgb(205,165,53)" rx="2" ry="2" />
<text  x="503.49" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (32 samples, 0.04%)</title><rect x="1062.9" y="181" width="0.4" height="15.0" fill="rgb(209,164,26)" rx="2" ry="2" />
<text  x="1065.90" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt;::_M_next (8 samples, 0.01%)</title><rect x="1162.5" y="165" width="0.1" height="15.0" fill="rgb(211,115,1)" rx="2" ry="2" />
<text  x="1165.53" y="175.5" ></text>
</g>
<g >
<title>std::tuple&lt;OSMID&amp;&amp;&gt;::tuple&lt;OSMID, true, true&gt; (17 samples, 0.02%)</title><rect x="1185.0" y="261" width="0.3" height="15.0" fill="rgb(212,76,19)" rx="2" ry="2" />
<text  x="1188.03" y="271.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;Feature_data, Feature_data, std::allocator&lt;Feature_data&gt; &gt; (9 samples, 0.01%)</title><rect x="939.1" y="261" width="0.1" height="15.0" fill="rgb(214,78,38)" rx="2" ry="2" />
<text  x="942.11" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (10 samples, 0.01%)</title><rect x="501.0" y="197" width="0.1" height="15.0" fill="rgb(247,225,41)" rx="2" ry="2" />
<text  x="503.98" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_realloc_insert&lt;ezgl::point2d&gt; (39 samples, 0.04%)</title><rect x="1099.4" y="181" width="0.5" height="15.0" fill="rgb(211,85,2)" rx="2" ry="2" />
<text  x="1102.41" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string@plt (15 samples, 0.02%)</title><rect x="1105.1" y="197" width="0.2" height="15.0" fill="rgb(236,228,51)" rx="2" ry="2" />
<text  x="1108.10" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (9 samples, 0.01%)</title><rect x="824.9" y="261" width="0.2" height="15.0" fill="rgb(222,200,45)" rx="2" ry="2" />
<text  x="827.93" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::__detail::_Select1st, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (16 samples, 0.02%)</title><rect x="1159.8" y="133" width="0.2" height="15.0" fill="rgb(221,224,2)" rx="2" ry="2" />
<text  x="1162.83" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (12 samples, 0.01%)</title><rect x="500.6" y="197" width="0.2" height="15.0" fill="rgb(239,0,16)" rx="2" ry="2" />
<text  x="503.60" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (43 samples, 0.05%)</title><rect x="1060.0" y="149" width="0.6" height="15.0" fill="rgb(226,221,48)" rx="2" ry="2" />
<text  x="1063.04" y="159.5" ></text>
</g>
<g >
<title>strcmp@plt (29 samples, 0.03%)</title><rect x="704.8" y="117" width="0.4" height="15.0" fill="rgb(246,119,9)" rx="2" ry="2" />
<text  x="707.83" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (30 samples, 0.03%)</title><rect x="735.7" y="133" width="0.4" height="15.0" fill="rgb(216,55,32)" rx="2" ry="2" />
<text  x="738.68" y="143.5" ></text>
</g>
<g >
<title>checked_request2size (25 samples, 0.03%)</title><rect x="774.4" y="181" width="0.3" height="15.0" fill="rgb(254,76,28)" rx="2" ry="2" />
<text  x="777.40" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long&gt;::operator() (11 samples, 0.01%)</title><rect x="967.5" y="261" width="0.2" height="15.0" fill="rgb(240,69,15)" rx="2" ry="2" />
<text  x="970.53" y="271.5" ></text>
</g>
<g >
<title>getFeaturePoint (33 samples, 0.04%)</title><rect x="756.7" y="261" width="0.4" height="15.0" fill="rgb(233,163,46)" rx="2" ry="2" />
<text  x="759.66" y="271.5" ></text>
</g>
<g >
<title>std::forward&lt;ezgl::point2d const&amp;&gt; (26 samples, 0.03%)</title><rect x="961.7" y="261" width="0.4" height="15.0" fill="rgb(240,219,4)" rx="2" ry="2" />
<text  x="964.71" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (26 samples, 0.03%)</title><rect x="1089.5" y="165" width="0.3" height="15.0" fill="rgb(216,228,34)" rx="2" ry="2" />
<text  x="1092.49" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_erase (13 samples, 0.01%)</title><rect x="1066.2" y="101" width="0.2" height="15.0" fill="rgb(239,30,34)" rx="2" ry="2" />
<text  x="1069.25" y="111.5" ></text>
</g>
<g >
<title>findStreetSegmentLength (81 samples, 0.09%)</title><rect x="1092.7" y="197" width="1.1" height="15.0" fill="rgb(228,215,16)" rx="2" ry="2" />
<text  x="1095.69" y="207.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;ezgl::point2d*&gt; (38 samples, 0.04%)</title><rect x="912.6" y="261" width="0.5" height="15.0" fill="rgb(248,48,3)" rx="2" ry="2" />
<text  x="915.62" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (17 samples, 0.02%)</title><rect x="734.0" y="149" width="0.2" height="15.0" fill="rgb(240,153,35)" rx="2" ry="2" />
<text  x="737.01" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (596 samples, 0.66%)</title><rect x="722.3" y="197" width="7.8" height="15.0" fill="rgb(234,157,4)" rx="2" ry="2" />
<text  x="725.28" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1,334 samples, 1.48%)</title><rect x="1043.3" y="197" width="17.5" height="15.0" fill="rgb(252,186,15)" rx="2" ry="2" />
<text  x="1046.29" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt; &gt; &gt;::load_object_data (18 samples, 0.02%)</title><rect x="670.7" y="149" width="0.2" height="15.0" fill="rgb(214,135,36)" rx="2" ry="2" />
<text  x="673.66" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (32 samples, 0.04%)</title><rect x="1062.9" y="197" width="0.4" height="15.0" fill="rgb(233,127,49)" rx="2" ry="2" />
<text  x="1065.90" y="207.5" ></text>
</g>
<g >
<title>stringToWayType (34 samples, 0.04%)</title><rect x="1100.0" y="197" width="0.4" height="15.0" fill="rgb(246,171,9)" rx="2" ry="2" />
<text  x="1102.98" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMRelation::Member, std::allocator&lt;OSMRelation::Member&gt; &gt; &gt;::load_object_data (13 samples, 0.01%)</title><rect x="682.7" y="165" width="0.2" height="15.0" fill="rgb(252,119,6)" rx="2" ry="2" />
<text  x="685.69" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (25 samples, 0.03%)</title><rect x="705.2" y="213" width="0.3" height="15.0" fill="rgb(251,1,51)" rx="2" ry="2" />
<text  x="708.21" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_erase (22 samples, 0.02%)</title><rect x="1066.1" y="149" width="0.3" height="15.0" fill="rgb(244,118,27)" rx="2" ry="2" />
<text  x="1069.13" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (48 samples, 0.05%)</title><rect x="786.0" y="149" width="0.6" height="15.0" fill="rgb(224,161,26)" rx="2" ry="2" />
<text  x="788.98" y="159.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.04%)</title><rect x="698.3" y="181" width="0.4" height="15.0" fill="rgb(220,175,46)" rx="2" ry="2" />
<text  x="701.31" y="191.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (35 samples, 0.04%)</title><rect x="712.4" y="117" width="0.4" height="15.0" fill="rgb(233,23,22)" rx="2" ry="2" />
<text  x="715.38" y="127.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (204 samples, 0.23%)</title><rect x="813.6" y="197" width="2.7" height="15.0" fill="rgb(223,37,7)" rx="2" ry="2" />
<text  x="816.61" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (196 samples, 0.22%)</title><rect x="1175.6" y="181" width="2.6" height="15.0" fill="rgb(220,92,7)" rx="2" ry="2" />
<text  x="1178.61" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, sdb::Feature&gt;::load_object_data (14 samples, 0.02%)</title><rect x="697.2" y="245" width="0.1" height="15.0" fill="rgb(233,205,31)" rx="2" ry="2" />
<text  x="700.17" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (11 samples, 0.01%)</title><rect x="501.1" y="213" width="0.2" height="15.0" fill="rgb(222,74,34)" rx="2" ry="2" />
<text  x="504.12" y="223.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;WaveElem, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;, WaveElem::Compare&gt;::pop (19,143 samples, 21.28%)</title><rect x="173.6" y="213" width="251.1" height="15.0" fill="rgb(238,16,40)" rx="2" ry="2" />
<text  x="176.63" y="223.5" >std::priority_queue&lt;WaveElem, std..</text>
</g>
<g >
<title>memmove@plt (19 samples, 0.02%)</title><rect x="498.5" y="165" width="0.2" height="15.0" fill="rgb(240,203,3)" rx="2" ry="2" />
<text  x="501.48" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (23 samples, 0.03%)</title><rect x="702.1" y="181" width="0.3" height="15.0" fill="rgb(221,21,9)" rx="2" ry="2" />
<text  x="705.08" y="191.5" ></text>
</g>
<g >
<title>x_from_lon (48 samples, 0.05%)</title><rect x="1100.4" y="197" width="0.7" height="15.0" fill="rgb(233,190,22)" rx="2" ry="2" />
<text  x="1103.43" y="207.5" ></text>
</g>
<g >
<title>sdb::Feature::Feature (21 samples, 0.02%)</title><rect x="813.3" y="165" width="0.3" height="15.0" fill="rgb(219,19,1)" rx="2" ry="2" />
<text  x="816.32" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (16 samples, 0.02%)</title><rect x="1063.1" y="53" width="0.2" height="15.0" fill="rgb(210,108,15)" rx="2" ry="2" />
<text  x="1066.11" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_max_size (10 samples, 0.01%)</title><rect x="1082.3" y="165" width="0.1" height="15.0" fill="rgb(222,16,39)" rx="2" ry="2" />
<text  x="1085.31" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_erase (13 samples, 0.01%)</title><rect x="1066.2" y="85" width="0.2" height="15.0" fill="rgb(230,171,40)" rx="2" ry="2" />
<text  x="1069.25" y="95.5" ></text>
</g>
<g >
<title>GlobalVars::~GlobalVars (3,643 samples, 4.05%)</title><rect x="1018.7" y="213" width="47.8" height="15.0" fill="rgb(235,60,50)" rx="2" ry="2" />
<text  x="1021.73" y="223.5" >Glob..</text>
</g>
<g >
<title>loadIntersectionStreetSegments (147 samples, 0.16%)</title><rect x="1080.6" y="213" width="2.0" height="15.0" fill="rgb(251,37,9)" rx="2" ry="2" />
<text  x="1083.65" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (14 samples, 0.02%)</title><rect x="697.2" y="229" width="0.1" height="15.0" fill="rgb(250,171,54)" rx="2" ry="2" />
<text  x="700.17" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (15 samples, 0.02%)</title><rect x="157.5" y="213" width="0.2" height="15.0" fill="rgb(244,102,25)" rx="2" ry="2" />
<text  x="160.51" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,639 samples, 1.82%)</title><rect x="1107.8" y="165" width="21.5" height="15.0" fill="rgb(232,214,2)" rx="2" ry="2" />
<text  x="1110.83" y="175.5" >s..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMWay&gt;::load_object_data (101 samples, 0.11%)</title><rect x="807.2" y="165" width="1.4" height="15.0" fill="rgb(244,75,10)" rx="2" ry="2" />
<text  x="810.23" y="175.5" ></text>
</g>
<g >
<title>getNodeByIndex (36 samples, 0.04%)</title><rect x="757.5" y="261" width="0.5" height="15.0" fill="rgb(210,202,18)" rx="2" ry="2" />
<text  x="760.49" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (14 samples, 0.02%)</title><rect x="689.5" y="133" width="0.2" height="15.0" fill="rgb(249,106,41)" rx="2" ry="2" />
<text  x="692.47" y="143.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (9 samples, 0.01%)</title><rect x="1084.4" y="165" width="0.1" height="15.0" fill="rgb(221,133,1)" rx="2" ry="2" />
<text  x="1087.43" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;OSMID, std::allocator&lt;OSMID&gt; &gt;::_M_default_append (10 samples, 0.01%)</title><rect x="712.2" y="165" width="0.2" height="15.0" fill="rgb(212,65,38)" rx="2" ry="2" />
<text  x="715.22" y="175.5" ></text>
</g>
<g >
<title>Feature_data::Feature_data (17 samples, 0.02%)</title><rect x="1073.4" y="133" width="0.2" height="15.0" fill="rgb(234,227,6)" rx="2" ry="2" />
<text  x="1076.40" y="143.5" ></text>
</g>
<g >
<title>__cos_fma (35 samples, 0.04%)</title><rect x="1100.6" y="181" width="0.4" height="15.0" fill="rgb(222,196,8)" rx="2" ry="2" />
<text  x="1103.59" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMNode&gt;::load_object_data (647 samples, 0.72%)</title><rect x="674.2" y="181" width="8.5" height="15.0" fill="rgb(222,121,23)" rx="2" ry="2" />
<text  x="677.20" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::operator= (8 samples, 0.01%)</title><rect x="1013.1" y="261" width="0.1" height="15.0" fill="rgb(227,219,26)" rx="2" ry="2" />
<text  x="1016.06" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (213 samples, 0.24%)</title><rect x="798.5" y="165" width="2.8" height="15.0" fill="rgb(220,49,36)" rx="2" ry="2" />
<text  x="801.50" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (90 samples, 0.10%)</title><rect x="791.0" y="133" width="1.2" height="15.0" fill="rgb(243,187,31)" rx="2" ry="2" />
<text  x="794.01" y="143.5" ></text>
</g>
<g >
<title>std::set&lt;int, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::insert (131 samples, 0.15%)</title><rect x="1082.6" y="197" width="1.7" height="15.0" fill="rgb(254,41,35)" rx="2" ry="2" />
<text  x="1085.63" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;WaveElem::Compare&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, WaveElem&gt; (454 samples, 0.50%)</title><rect x="417.5" y="133" width="5.9" height="15.0" fill="rgb(210,109,46)" rx="2" ry="2" />
<text  x="420.49" y="143.5" ></text>
</g>
<g >
<title>tcache_get (62 samples, 0.07%)</title><rect x="473.5" y="133" width="0.8" height="15.0" fill="rgb(213,117,27)" rx="2" ry="2" />
<text  x="476.53" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMID, std::allocator&lt;OSMID&gt; &gt; &gt;::load_object_data (288 samples, 0.32%)</title><rect x="730.2" y="213" width="3.8" height="15.0" fill="rgb(238,203,48)" rx="2" ry="2" />
<text  x="733.23" y="223.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (32 samples, 0.04%)</title><rect x="817.2" y="181" width="0.4" height="15.0" fill="rgb(249,10,27)" rx="2" ry="2" />
<text  x="820.17" y="191.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (34 samples, 0.04%)</title><rect x="912.2" y="261" width="0.4" height="15.0" fill="rgb(206,173,39)" rx="2" ry="2" />
<text  x="915.17" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator* (48 samples, 0.05%)</title><rect x="442.4" y="181" width="0.7" height="15.0" fill="rgb(220,177,19)" rx="2" ry="2" />
<text  x="445.45" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMWay&gt;::load_object_data (15 samples, 0.02%)</title><rect x="717.7" y="261" width="0.2" height="15.0" fill="rgb(238,142,13)" rx="2" ry="2" />
<text  x="720.75" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMNode, std::allocator&lt;OSMNode&gt; &gt; &gt;::load_object_data (37 samples, 0.04%)</title><rect x="697.3" y="245" width="0.5" height="15.0" fill="rgb(225,216,10)" rx="2" ry="2" />
<text  x="700.35" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (15 samples, 0.02%)</title><rect x="639.9" y="101" width="0.2" height="15.0" fill="rgb(228,116,37)" rx="2" ry="2" />
<text  x="642.87" y="111.5" ></text>
</g>
<g >
<title>std::hash&lt;OSMID&gt;::operator() (57 samples, 0.06%)</title><rect x="1171.5" y="181" width="0.7" height="15.0" fill="rgb(249,165,11)" rx="2" ry="2" />
<text  x="1174.47" y="191.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (8 samples, 0.01%)</title><rect x="721.1" y="165" width="0.1" height="15.0" fill="rgb(209,162,11)" rx="2" ry="2" />
<text  x="724.06" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (145 samples, 0.16%)</title><rect x="743.3" y="261" width="1.9" height="15.0" fill="rgb(242,40,15)" rx="2" ry="2" />
<text  x="746.26" y="271.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (25 samples, 0.03%)</title><rect x="696.3" y="133" width="0.3" height="15.0" fill="rgb(226,203,35)" rx="2" ry="2" />
<text  x="699.31" y="143.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (9 samples, 0.01%)</title><rect x="760.1" y="149" width="0.1" height="15.0" fill="rgb(236,194,30)" rx="2" ry="2" />
<text  x="763.07" y="159.5" ></text>
</g>
<g >
<title>_int_free (12 samples, 0.01%)</title><rect x="683.7" y="133" width="0.1" height="15.0" fill="rgb(230,34,27)" rx="2" ry="2" />
<text  x="686.67" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator+ (1,695 samples, 1.88%)</title><rect x="357.3" y="133" width="22.2" height="15.0" fill="rgb(245,212,28)" rx="2" ry="2" />
<text  x="360.29" y="143.5" >_..</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;WaveElem::Compare&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt; &gt; (593 samples, 0.66%)</title><rect x="379.5" y="133" width="7.8" height="15.0" fill="rgb(252,129,12)" rx="2" ry="2" />
<text  x="382.53" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (2,566 samples, 2.85%)</title><rect x="1129.3" y="181" width="33.7" height="15.0" fill="rgb(222,162,22)" rx="2" ry="2" />
<text  x="1132.32" y="191.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (13 samples, 0.01%)</title><rect x="828.1" y="261" width="0.2" height="15.0" fill="rgb(244,30,2)" rx="2" ry="2" />
<text  x="831.13" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt;, std::allocator&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; &gt;::_M_realloc_insert&lt;boost::detail::stored_ra_edge_iter&lt;unsigned long, std::vector&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt;, std::allocator&lt;boost::list_edge&lt;unsigned long, EdgeProperties&gt; &gt; &gt;, EdgeProperties&gt; &gt; (97 samples, 0.11%)</title><rect x="814.8" y="181" width="1.3" height="15.0" fill="rgb(248,193,27)" rx="2" ry="2" />
<text  x="817.79" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (1,891 samples, 2.10%)</title><rect x="776.5" y="181" width="24.8" height="15.0" fill="rgb(215,144,48)" rx="2" ry="2" />
<text  x="779.49" y="191.5" >b..</text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (59 samples, 0.07%)</title><rect x="692.2" y="133" width="0.8" height="15.0" fill="rgb(219,12,13)" rx="2" ry="2" />
<text  x="695.22" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;WaveElem&gt; &gt;::construct&lt;WaveElem, int&amp;, int&amp;, double&amp;, double&amp;&gt; (147 samples, 0.16%)</title><rect x="943.9" y="261" width="1.9" height="15.0" fill="rgb(217,137,36)" rx="2" ry="2" />
<text  x="946.87" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_Vector_base (14 samples, 0.02%)</title><rect x="1073.8" y="133" width="0.1" height="15.0" fill="rgb(243,43,16)" rx="2" ry="2" />
<text  x="1076.76" y="143.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Feature_data*&gt; (45 samples, 0.05%)</title><rect x="1063.4" y="181" width="0.6" height="15.0" fill="rgb(246,202,16)" rx="2" ry="2" />
<text  x="1066.36" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;sdb::Feature, std::allocator&lt;sdb::Feature&gt; &gt; &gt;::load_object_data (246 samples, 0.27%)</title><rect x="717.9" y="229" width="3.3" height="15.0" fill="rgb(225,213,21)" rx="2" ry="2" />
<text  x="720.94" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (102 samples, 0.11%)</title><rect x="715.9" y="261" width="1.3" height="15.0" fill="rgb(244,146,37)" rx="2" ry="2" />
<text  x="718.90" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (245 samples, 0.27%)</title><rect x="671.0" y="165" width="3.2" height="15.0" fill="rgb(217,157,42)" rx="2" ry="2" />
<text  x="673.99" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (10 samples, 0.01%)</title><rect x="730.1" y="245" width="0.1" height="15.0" fill="rgb(209,160,54)" rx="2" ry="2" />
<text  x="733.10" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (596 samples, 0.66%)</title><rect x="722.3" y="181" width="7.8" height="15.0" fill="rgb(209,30,49)" rx="2" ry="2" />
<text  x="725.28" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (594 samples, 0.66%)</title><rect x="789.0" y="149" width="7.8" height="15.0" fill="rgb(214,179,22)" rx="2" ry="2" />
<text  x="792.01" y="159.5" ></text>
</g>
<g >
<title>std::_Construct&lt;Node&gt; (173 samples, 0.19%)</title><rect x="821.4" y="261" width="2.3" height="15.0" fill="rgb(205,145,29)" rx="2" ry="2" />
<text  x="824.40" y="271.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (35 samples, 0.04%)</title><rect x="729.3" y="117" width="0.5" height="15.0" fill="rgb(220,36,41)" rx="2" ry="2" />
<text  x="732.31" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;ezgl::point2d*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt;::base (29 samples, 0.03%)</title><rect x="614.8" y="261" width="0.4" height="15.0" fill="rgb(250,127,7)" rx="2" ry="2" />
<text  x="617.80" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, OSMID&amp;&amp;&gt;::_Tuple_impl&lt;OSMID&gt; (14 samples, 0.02%)</title><rect x="1183.1" y="261" width="0.2" height="15.0" fill="rgb(241,148,6)" rx="2" ry="2" />
<text  x="1186.11" y="271.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (20 samples, 0.02%)</title><rect x="690.9" y="165" width="0.3" height="15.0" fill="rgb(246,87,10)" rx="2" ry="2" />
<text  x="693.91" y="175.5" ></text>
</g>
<g >
<title>tcache_get (9 samples, 0.01%)</title><rect x="1075.7" y="133" width="0.1" height="15.0" fill="rgb(229,2,25)" rx="2" ry="2" />
<text  x="1078.68" y="143.5" ></text>
</g>
<g >
<title>tcache_put (8 samples, 0.01%)</title><rect x="1075.2" y="149" width="0.1" height="15.0" fill="rgb(245,121,42)" rx="2" ry="2" />
<text  x="1078.18" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (60 samples, 0.07%)</title><rect x="685.0" y="181" width="0.8" height="15.0" fill="rgb(219,209,44)" rx="2" ry="2" />
<text  x="687.98" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (26 samples, 0.03%)</title><rect x="1175.0" y="149" width="0.4" height="15.0" fill="rgb(237,227,21)" rx="2" ry="2" />
<text  x="1178.03" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::begin (41 samples, 0.05%)</title><rect x="453.1" y="197" width="0.6" height="15.0" fill="rgb(213,205,35)" rx="2" ry="2" />
<text  x="456.14" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (59 samples, 0.07%)</title><rect x="745.2" y="245" width="0.7" height="15.0" fill="rgb(224,115,38)" rx="2" ry="2" />
<text  x="748.17" y="255.5" ></text>
</g>
<g >
<title>_int_free (31 samples, 0.03%)</title><rect x="1062.3" y="149" width="0.4" height="15.0" fill="rgb(215,84,42)" rx="2" ry="2" />
<text  x="1065.27" y="159.5" ></text>
</g>
<g >
<title>x_from_lon (152 samples, 0.17%)</title><rect x="1078.1" y="181" width="2.0" height="15.0" fill="rgb(232,55,4)" rx="2" ry="2" />
<text  x="1081.09" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (27 samples, 0.03%)</title><rect x="793.3" y="133" width="0.4" height="15.0" fill="rgb(250,141,22)" rx="2" ry="2" />
<text  x="796.32" y="143.5" ></text>
</g>
<g >
<title>__cos_fma (103 samples, 0.11%)</title><rect x="1069.1" y="149" width="1.3" height="15.0" fill="rgb(211,110,9)" rx="2" ry="2" />
<text  x="1072.05" y="159.5" ></text>
</g>
<g >
<title>checked_request2size (25 samples, 0.03%)</title><rect x="774.0" y="165" width="0.3" height="15.0" fill="rgb(248,153,49)" rx="2" ry="2" />
<text  x="777.00" y="175.5" ></text>
</g>
<g >
<title>Node::Node (361 samples, 0.40%)</title><rect x="503.6" y="197" width="4.7" height="15.0" fill="rgb(233,153,43)" rx="2" ry="2" />
<text  x="506.61" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (54 samples, 0.06%)</title><rect x="905.6" y="261" width="0.7" height="15.0" fill="rgb(245,114,28)" rx="2" ry="2" />
<text  x="908.57" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (28 samples, 0.03%)</title><rect x="714.2" y="165" width="0.3" height="15.0" fill="rgb(242,120,45)" rx="2" ry="2" />
<text  x="717.16" y="175.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (10 samples, 0.01%)</title><rect x="968.1" y="261" width="0.1" height="15.0" fill="rgb(221,58,41)" rx="2" ry="2" />
<text  x="971.11" y="271.5" ></text>
</g>
<g >
<title>loadIntersectionData (135 samples, 0.15%)</title><rect x="638.1" y="213" width="1.8" height="15.0" fill="rgb(235,115,0)" rx="2" ry="2" />
<text  x="641.10" y="223.5" ></text>
</g>
<g >
<title>inflate (20 samples, 0.02%)</title><rect x="534.0" y="245" width="0.3" height="15.0" fill="rgb(215,217,21)" rx="2" ry="2" />
<text  x="537.00" y="255.5" ></text>
</g>
<g >
<title>WaveElem::Compare::operator() (918 samples, 1.02%)</title><rect x="521.2" y="261" width="12.1" height="15.0" fill="rgb(230,22,42)" rx="2" ry="2" />
<text  x="524.25" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (268 samples, 0.30%)</title><rect x="734.0" y="213" width="3.5" height="15.0" fill="rgb(238,174,14)" rx="2" ry="2" />
<text  x="737.01" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (109 samples, 0.12%)</title><rect x="907.1" y="261" width="1.5" height="15.0" fill="rgb(216,149,1)" rx="2" ry="2" />
<text  x="910.15" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (229 samples, 0.25%)</title><rect x="712.9" y="261" width="3.0" height="15.0" fill="rgb(237,9,45)" rx="2" ry="2" />
<text  x="715.89" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_insert_&lt;int const&amp;, std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_Alloc_node&gt; (20 samples, 0.02%)</title><rect x="1084.1" y="165" width="0.2" height="15.0" fill="rgb(246,32,1)" rx="2" ry="2" />
<text  x="1087.07" y="175.5" ></text>
</g>
<g >
<title>_int_free (39 samples, 0.04%)</title><rect x="1074.8" y="165" width="0.5" height="15.0" fill="rgb(251,87,9)" rx="2" ry="2" />
<text  x="1077.77" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, sdb::Feature&gt;::load_object_data (15 samples, 0.02%)</title><rect x="699.6" y="213" width="0.2" height="15.0" fill="rgb(252,23,0)" rx="2" ry="2" />
<text  x="702.57" y="223.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, int const*, int*&gt; (16 samples, 0.02%)</title><rect x="498.9" y="181" width="0.2" height="15.0" fill="rgb(254,29,37)" rx="2" ry="2" />
<text  x="501.86" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (40 samples, 0.04%)</title><rect x="698.8" y="149" width="0.5" height="15.0" fill="rgb(234,92,20)" rx="2" ry="2" />
<text  x="701.75" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (27 samples, 0.03%)</title><rect x="832.2" y="261" width="0.4" height="15.0" fill="rgb(243,204,1)" rx="2" ry="2" />
<text  x="835.23" y="271.5" ></text>
</g>
<g >
<title>cos@plt (8 samples, 0.01%)</title><rect x="1070.4" y="149" width="0.1" height="15.0" fill="rgb(252,21,50)" rx="2" ry="2" />
<text  x="1073.41" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (143 samples, 0.16%)</title><rect x="1090.0" y="181" width="1.9" height="15.0" fill="rgb(234,172,11)" rx="2" ry="2" />
<text  x="1092.99" y="191.5" ></text>
</g>
<g >
<title>__dynamic_cast (28 samples, 0.03%)</title><rect x="685.0" y="149" width="0.3" height="15.0" fill="rgb(215,17,15)" rx="2" ry="2" />
<text  x="687.98" y="159.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::operator=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (36 samples, 0.04%)</title><rect x="1092.1" y="197" width="0.4" height="15.0" fill="rgb(238,154,49)" rx="2" ry="2" />
<text  x="1095.07" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast (27 samples, 0.03%)</title><rect x="702.4" y="149" width="0.3" height="15.0" fill="rgb(215,90,9)" rx="2" ry="2" />
<text  x="705.39" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;WaveElem&gt;::construct&lt;WaveElem, WaveElem&gt; (11 samples, 0.01%)</title><rect x="619.7" y="261" width="0.2" height="15.0" fill="rgb(241,112,2)" rx="2" ry="2" />
<text  x="622.74" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (87 samples, 0.10%)</title><rect x="1128.2" y="149" width="1.1" height="15.0" fill="rgb(241,145,21)" rx="2" ry="2" />
<text  x="1131.18" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;ezgl::point2d&gt;::construct&lt;ezgl::point2d, ezgl::point2d&gt; (27 samples, 0.03%)</title><rect x="623.5" y="261" width="0.3" height="15.0" fill="rgb(206,69,53)" rx="2" ry="2" />
<text  x="626.48" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator+ (320 samples, 0.36%)</title><rect x="443.1" y="181" width="4.2" height="15.0" fill="rgb(211,164,25)" rx="2" ry="2" />
<text  x="446.08" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;Street_segment_data, std::allocator&lt;Street_segment_data&gt; &gt;::operator[] (144 samples, 0.16%)</title><rect x="994.7" y="261" width="1.9" height="15.0" fill="rgb(227,220,21)" rx="2" ry="2" />
<text  x="997.68" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (53 samples, 0.06%)</title><rect x="682.9" y="181" width="0.7" height="15.0" fill="rgb(244,147,52)" rx="2" ry="2" />
<text  x="685.86" y="191.5" ></text>
</g>
<g >
<title>__dynamic_cast (8 samples, 0.01%)</title><rect x="697.2" y="165" width="0.1" height="15.0" fill="rgb(214,130,16)" rx="2" ry="2" />
<text  x="700.17" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement@plt (16 samples, 0.02%)</title><rect x="796.6" y="133" width="0.2" height="15.0" fill="rgb(219,176,29)" rx="2" ry="2" />
<text  x="799.59" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::allocate (13 samples, 0.01%)</title><rect x="640.3" y="149" width="0.2" height="15.0" fill="rgb(210,115,36)" rx="2" ry="2" />
<text  x="643.28" y="159.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, long, WaveElem, __gnu_cxx::__ops::_Iter_comp_val&lt;WaveElem::Compare&gt; &gt; (1,715 samples, 1.91%)</title><rect x="428.9" y="197" width="22.5" height="15.0" fill="rgb(243,210,33)" rx="2" ry="2" />
<text  x="431.88" y="207.5" >s..</text>
</g>
<g >
<title>std::__relocate_a_1&lt;ezgl::point2d*, ezgl::point2d*, std::allocator&lt;ezgl::point2d&gt; &gt; (31 samples, 0.03%)</title><rect x="1076.1" y="165" width="0.4" height="15.0" fill="rgb(245,152,21)" rx="2" ry="2" />
<text  x="1079.08" y="175.5" ></text>
</g>
<g >
<title>malloc_consolidate (27 samples, 0.03%)</title><rect x="817.7" y="261" width="0.3" height="15.0" fill="rgb(236,113,15)" rx="2" ry="2" />
<text  x="820.67" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (94 samples, 0.10%)</title><rect x="685.0" y="213" width="1.2" height="15.0" fill="rgb(213,98,25)" rx="2" ry="2" />
<text  x="687.98" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (23 samples, 0.03%)</title><rect x="911.3" y="261" width="0.3" height="15.0" fill="rgb(211,215,51)" rx="2" ry="2" />
<text  x="914.25" y="271.5" ></text>
</g>
<g >
<title>OSMEntity::id (8 samples, 0.01%)</title><rect x="14.6" y="261" width="0.1" height="15.0" fill="rgb(224,102,26)" rx="2" ry="2" />
<text  x="17.58" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (337 samples, 0.37%)</title><rect x="690.9" y="181" width="4.4" height="15.0" fill="rgb(247,170,14)" rx="2" ry="2" />
<text  x="693.91" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;Street_segment_data, std::allocator&lt;Street_segment_data&gt; &gt;::_M_default_append (24 samples, 0.03%)</title><rect x="1098.1" y="197" width="0.3" height="15.0" fill="rgb(215,134,7)" rx="2" ry="2" />
<text  x="1101.05" y="207.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt;*&gt;::pointer_to (22 samples, 0.02%)</title><rect x="1060.3" y="133" width="0.3" height="15.0" fill="rgb(212,34,19)" rx="2" ry="2" />
<text  x="1063.32" y="143.5" ></text>
</g>
<g >
<title>WaveElem::Compare::operator() (4,900 samples, 5.45%)</title><rect x="218.5" y="149" width="64.3" height="15.0" fill="rgb(218,196,52)" rx="2" ry="2" />
<text  x="221.54" y="159.5" >WaveEle..</text>
</g>
<g >
<title>libc_feresetround_sse_ctx (9 samples, 0.01%)</title><rect x="1070.3" y="133" width="0.1" height="15.0" fill="rgb(218,115,3)" rx="2" ry="2" />
<text  x="1073.29" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (34 samples, 0.04%)</title><rect x="163.1" y="165" width="0.4" height="15.0" fill="rgb(222,18,42)" rx="2" ry="2" />
<text  x="166.07" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;ezgl::point2d&gt; &gt;::construct&lt;ezgl::point2d, ezgl::point2d&gt; (13 samples, 0.01%)</title><rect x="1076.3" y="149" width="0.2" height="15.0" fill="rgb(225,188,26)" rx="2" ry="2" />
<text  x="1079.32" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;Feature_data, std::allocator&lt;Feature_data&gt; &gt;::_M_realloc_insert&lt;Feature_data const&amp;&gt; (25 samples, 0.03%)</title><rect x="1073.3" y="181" width="0.3" height="15.0" fill="rgb(225,203,23)" rx="2" ry="2" />
<text  x="1076.32" y="191.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (32 samples, 0.04%)</title><rect x="727.6" y="149" width="0.4" height="15.0" fill="rgb(236,88,47)" rx="2" ry="2" />
<text  x="730.60" y="159.5" ></text>
</g>
<g >
<title>__GI_exit (3,643 samples, 4.05%)</title><rect x="1018.7" y="245" width="47.8" height="15.0" fill="rgb(207,223,10)" rx="2" ry="2" />
<text  x="1021.73" y="255.5" >__GI..</text>
</g>
<g >
<title>__dynamic_cast (26 samples, 0.03%)</title><rect x="715.0" y="149" width="0.3" height="15.0" fill="rgb(217,83,46)" rx="2" ry="2" />
<text  x="718.00" y="159.5" ></text>
</g>
<g >
<title>libc_feholdsetround_sse_ctx (11 samples, 0.01%)</title><rect x="1095.2" y="149" width="0.1" height="15.0" fill="rgb(237,191,32)" rx="2" ry="2" />
<text  x="1098.17" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (18 samples, 0.02%)</title><rect x="670.4" y="197" width="0.2" height="15.0" fill="rgb(217,27,5)" rx="2" ry="2" />
<text  x="673.38" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (246 samples, 0.27%)</title><rect x="717.9" y="213" width="3.3" height="15.0" fill="rgb(245,219,42)" rx="2" ry="2" />
<text  x="720.94" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;ezgl::point2d const*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt; (74 samples, 0.08%)</title><rect x="625.3" y="261" width="1.0" height="15.0" fill="rgb(209,124,18)" rx="2" ry="2" />
<text  x="628.29" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::set&lt;int, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;*&gt; (25 samples, 0.03%)</title><rect x="1066.1" y="181" width="0.3" height="15.0" fill="rgb(240,3,19)" rx="2" ry="2" />
<text  x="1069.09" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (165 samples, 0.18%)</title><rect x="1176.0" y="149" width="2.1" height="15.0" fill="rgb(214,147,42)" rx="2" ry="2" />
<text  x="1178.98" y="159.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (20 samples, 0.02%)</title><rect x="714.3" y="149" width="0.2" height="15.0" fill="rgb(248,139,33)" rx="2" ry="2" />
<text  x="717.27" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (32 samples, 0.04%)</title><rect x="780.3" y="149" width="0.5" height="15.0" fill="rgb(251,179,23)" rx="2" ry="2" />
<text  x="783.34" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (12 samples, 0.01%)</title><rect x="734.2" y="149" width="0.2" height="15.0" fill="rgb(242,155,26)" rx="2" ry="2" />
<text  x="737.23" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (27 samples, 0.03%)</title><rect x="624.8" y="261" width="0.3" height="15.0" fill="rgb(211,24,6)" rx="2" ry="2" />
<text  x="627.79" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (192 samples, 0.21%)</title><rect x="1130.3" y="165" width="2.6" height="15.0" fill="rgb(241,70,44)" rx="2" ry="2" />
<text  x="1133.35" y="175.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (18 samples, 0.02%)</title><rect x="904.1" y="261" width="0.2" height="15.0" fill="rgb(254,108,49)" rx="2" ry="2" />
<text  x="907.10" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (33 samples, 0.04%)</title><rect x="745.2" y="181" width="0.5" height="15.0" fill="rgb(252,189,2)" rx="2" ry="2" />
<text  x="748.24" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_realloc_insert&lt;double&gt; (13 samples, 0.01%)</title><rect x="640.3" y="181" width="0.2" height="15.0" fill="rgb(223,60,45)" rx="2" ry="2" />
<text  x="643.28" y="191.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, OSMID&amp;&amp;, false&gt;::_Head_base&lt;OSMID&gt; (65 samples, 0.07%)</title><rect x="828.7" y="261" width="0.8" height="15.0" fill="rgb(240,160,11)" rx="2" ry="2" />
<text  x="831.66" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (824 samples, 0.92%)</title><rect x="702.1" y="245" width="10.8" height="15.0" fill="rgb(212,176,49)" rx="2" ry="2" />
<text  x="705.08" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_free (15 samples, 0.02%)</title><rect x="1062.0" y="149" width="0.2" height="15.0" fill="rgb(217,186,41)" rx="2" ry="2" />
<text  x="1065.05" y="159.5" ></text>
</g>
<g >
<title>[unknown] (20 samples, 0.02%)</title><rect x="10.2" y="213" width="0.2" height="15.0" fill="rgb(230,92,15)" rx="2" ry="2" />
<text  x="13.18" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;ezgl::point2d*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt;::__normal_iterator (9 samples, 0.01%)</title><rect x="614.7" y="261" width="0.1" height="15.0" fill="rgb(212,5,30)" rx="2" ry="2" />
<text  x="617.68" y="271.5" ></text>
</g>
<g >
<title>LatLon::longitude (9 samples, 0.01%)</title><rect x="1067.5" y="181" width="0.1" height="15.0" fill="rgb(239,145,47)" rx="2" ry="2" />
<text  x="1070.47" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (64 samples, 0.07%)</title><rect x="714.2" y="181" width="0.8" height="15.0" fill="rgb(228,207,36)" rx="2" ry="2" />
<text  x="717.16" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (16 samples, 0.02%)</title><rect x="1097.5" y="165" width="0.3" height="15.0" fill="rgb(213,165,38)" rx="2" ry="2" />
<text  x="1100.54" y="175.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (63 samples, 0.07%)</title><rect x="724.1" y="133" width="0.9" height="15.0" fill="rgb(243,180,29)" rx="2" ry="2" />
<text  x="727.13" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;OSMID, std::allocator&lt;OSMID&gt; &gt;::_M_default_append (8 samples, 0.01%)</title><rect x="994.6" y="261" width="0.1" height="15.0" fill="rgb(219,76,18)" rx="2" ry="2" />
<text  x="997.58" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Node*&gt; (161 samples, 0.18%)</title><rect x="1180.8" y="261" width="2.1" height="15.0" fill="rgb(224,124,44)" rx="2" ry="2" />
<text  x="1183.75" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object@plt (10 samples, 0.01%)</title><rect x="786.7" y="165" width="0.1" height="15.0" fill="rgb(223,134,5)" rx="2" ry="2" />
<text  x="789.66" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt; (30 samples, 0.03%)</title><rect x="428.5" y="197" width="0.4" height="15.0" fill="rgb(250,67,23)" rx="2" ry="2" />
<text  x="431.49" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast (21 samples, 0.02%)</title><rect x="693.0" y="133" width="0.3" height="15.0" fill="rgb(254,203,4)" rx="2" ry="2" />
<text  x="695.99" y="143.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (15 samples, 0.02%)</title><rect x="760.1" y="197" width="0.2" height="15.0" fill="rgb(220,193,46)" rx="2" ry="2" />
<text  x="763.07" y="207.5" ></text>
</g>
<g >
<title>getStreetSegmentCurvePoint (35 samples, 0.04%)</title><rect x="1096.2" y="197" width="0.5" height="15.0" fill="rgb(208,125,11)" rx="2" ry="2" />
<text  x="1099.22" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (48 samples, 0.05%)</title><rect x="695.3" y="181" width="0.7" height="15.0" fill="rgb(223,169,25)" rx="2" ry="2" />
<text  x="698.34" y="191.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.02%)</title><rect x="640.5" y="181" width="0.2" height="15.0" fill="rgb(252,12,6)" rx="2" ry="2" />
<text  x="643.45" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (8 samples, 0.01%)</title><rect x="1085.0" y="149" width="0.1" height="15.0" fill="rgb(205,9,45)" rx="2" ry="2" />
<text  x="1088.04" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (14 samples, 0.02%)</title><rect x="697.2" y="197" width="0.1" height="15.0" fill="rgb(207,82,33)" rx="2" ry="2" />
<text  x="700.17" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (68 samples, 0.08%)</title><rect x="715.0" y="181" width="0.9" height="15.0" fill="rgb(227,136,17)" rx="2" ry="2" />
<text  x="718.00" y="191.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (17 samples, 0.02%)</title><rect x="724.6" y="117" width="0.3" height="15.0" fill="rgb(207,33,36)" rx="2" ry="2" />
<text  x="727.63" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_free (73 samples, 0.08%)</title><rect x="1055.8" y="149" width="0.9" height="15.0" fill="rgb(212,48,12)" rx="2" ry="2" />
<text  x="1058.78" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (13 samples, 0.01%)</title><rect x="682.7" y="181" width="0.2" height="15.0" fill="rgb(244,44,44)" rx="2" ry="2" />
<text  x="685.69" y="191.5" ></text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, WaveElem::Compare&gt; (19,018 samples, 21.14%)</title><rect x="174.0" y="197" width="249.4" height="15.0" fill="rgb(205,194,6)" rx="2" ry="2" />
<text  x="176.99" y="207.5" >std::pop_heap&lt;__gnu_cxx::__normal..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (337 samples, 0.37%)</title><rect x="690.9" y="197" width="4.4" height="15.0" fill="rgb(213,86,43)" rx="2" ry="2" />
<text  x="693.91" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (85 samples, 0.09%)</title><rect x="507.2" y="181" width="1.1" height="15.0" fill="rgb(230,58,41)" rx="2" ry="2" />
<text  x="510.23" y="191.5" ></text>
</g>
<g >
<title>bfsPath (37,087 samples, 41.22%)</title><rect x="14.8" y="229" width="486.5" height="15.0" fill="rgb(225,98,51)" rx="2" ry="2" />
<text  x="17.84" y="239.5" >bfsPath</text>
</g>
<g >
<title>std::vector&lt;Feature_data, std::allocator&lt;Feature_data&gt; &gt;::push_back (41 samples, 0.05%)</title><rect x="1073.6" y="181" width="0.6" height="15.0" fill="rgb(251,84,0)" rx="2" ry="2" />
<text  x="1076.64" y="191.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10 samples, 0.01%)</title><rect x="639.4" y="181" width="0.1" height="15.0" fill="rgb(231,168,51)" rx="2" ry="2" />
<text  x="642.41" y="191.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (40 samples, 0.04%)</title><rect x="788.4" y="133" width="0.5" height="15.0" fill="rgb(209,23,50)" rx="2" ry="2" />
<text  x="791.40" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Equal_hash_code&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt;::_S_equals (10 samples, 0.01%)</title><rect x="1183.8" y="261" width="0.2" height="15.0" fill="rgb(228,94,23)" rx="2" ry="2" />
<text  x="1186.82" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (22 samples, 0.02%)</title><rect x="699.3" y="197" width="0.3" height="15.0" fill="rgb(247,120,37)" rx="2" ry="2" />
<text  x="702.28" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (21 samples, 0.02%)</title><rect x="615.2" y="261" width="0.3" height="15.0" fill="rgb(250,188,38)" rx="2" ry="2" />
<text  x="618.19" y="271.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, OSMID&amp;&amp;&gt; (11 samples, 0.01%)</title><rect x="1163.6" y="101" width="0.2" height="15.0" fill="rgb(252,109,49)" rx="2" ry="2" />
<text  x="1166.65" y="111.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (34 samples, 0.04%)</title><rect x="682.1" y="117" width="0.5" height="15.0" fill="rgb(249,96,36)" rx="2" ry="2" />
<text  x="685.15" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator++ (42 samples, 0.05%)</title><rect x="619.1" y="261" width="0.6" height="15.0" fill="rgb(223,127,53)" rx="2" ry="2" />
<text  x="622.14" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="745.7" y="165" width="0.1" height="15.0" fill="rgb(217,196,10)" rx="2" ry="2" />
<text  x="748.67" y="175.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;WaveElem*, WaveElem*, std::allocator&lt;WaveElem&gt; &gt; (8 samples, 0.01%)</title><rect x="170.2" y="165" width="0.1" height="15.0" fill="rgb(224,229,8)" rx="2" ry="2" />
<text  x="173.16" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMNode&gt;::load_object_data (37 samples, 0.04%)</title><rect x="697.3" y="213" width="0.5" height="15.0" fill="rgb(254,194,54)" rx="2" ry="2" />
<text  x="700.35" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::__detail::_Select1st, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (11 samples, 0.01%)</title><rect x="1170.7" y="181" width="0.1" height="15.0" fill="rgb(249,121,12)" rx="2" ry="2" />
<text  x="1173.67" y="191.5" ></text>
</g>
<g >
<title>free@plt (9 samples, 0.01%)</title><rect x="1059.2" y="149" width="0.1" height="15.0" fill="rgb(253,31,11)" rx="2" ry="2" />
<text  x="1062.19" y="159.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (94 samples, 0.10%)</title><rect x="687.0" y="133" width="1.2" height="15.0" fill="rgb(237,169,54)" rx="2" ry="2" />
<text  x="690.01" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMDatabase&gt;::load_object_data (2,641 samples, 2.94%)</title><rect x="775.6" y="229" width="34.6" height="15.0" fill="rgb(212,121,2)" rx="2" ry="2" />
<text  x="778.59" y="239.5" >bo..</text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (2,641 samples, 2.94%)</title><rect x="775.6" y="213" width="34.6" height="15.0" fill="rgb(232,65,9)" rx="2" ry="2" />
<text  x="778.59" y="223.5" >bo..</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt;::load_object_data (25 samples, 0.03%)</title><rect x="670.7" y="213" width="0.3" height="15.0" fill="rgb(251,89,47)" rx="2" ry="2" />
<text  x="673.66" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.01%)</title><rect x="775.5" y="197" width="0.1" height="15.0" fill="rgb(221,23,36)" rx="2" ry="2" />
<text  x="778.48" y="207.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (42 samples, 0.05%)</title><rect x="715.3" y="133" width="0.6" height="15.0" fill="rgb(249,82,15)" rx="2" ry="2" />
<text  x="718.35" y="143.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (22 samples, 0.02%)</title><rect x="687.8" y="117" width="0.3" height="15.0" fill="rgb(234,145,9)" rx="2" ry="2" />
<text  x="690.76" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (9 samples, 0.01%)</title><rect x="1084.4" y="149" width="0.1" height="15.0" fill="rgb(231,113,5)" rx="2" ry="2" />
<text  x="1087.43" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMWay&gt;::load_object_data (109 samples, 0.12%)</title><rect x="683.6" y="181" width="1.4" height="15.0" fill="rgb(224,165,27)" rx="2" ry="2" />
<text  x="686.55" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt;::_M_max_size (13 samples, 0.01%)</title><rect x="624.5" y="261" width="0.2" height="15.0" fill="rgb(248,160,35)" rx="2" ry="2" />
<text  x="627.53" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (250 samples, 0.28%)</title><rect x="717.9" y="245" width="3.3" height="15.0" fill="rgb(207,90,29)" rx="2" ry="2" />
<text  x="720.94" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (162 samples, 0.18%)</title><rect x="682.9" y="197" width="2.1" height="15.0" fill="rgb(225,105,35)" rx="2" ry="2" />
<text  x="685.86" y="207.5" ></text>
</g>
<g >
<title>_int_malloc (39 samples, 0.04%)</title><rect x="501.8" y="149" width="0.5" height="15.0" fill="rgb(240,28,9)" rx="2" ry="2" />
<text  x="504.81" y="159.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (30 samples, 0.03%)</title><rect x="738.4" y="149" width="0.4" height="15.0" fill="rgb(221,27,48)" rx="2" ry="2" />
<text  x="741.38" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::_S_select_on_copy (13 samples, 0.01%)</title><rect x="549.9" y="261" width="0.2" height="15.0" fill="rgb(228,195,11)" rx="2" ry="2" />
<text  x="552.88" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_erase (25 samples, 0.03%)</title><rect x="1066.1" y="165" width="0.3" height="15.0" fill="rgb(225,160,39)" rx="2" ry="2" />
<text  x="1069.09" y="175.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;ezgl::point2d, ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; (13 samples, 0.01%)</title><rect x="939.3" y="261" width="0.2" height="15.0" fill="rgb(209,103,53)" rx="2" ry="2" />
<text  x="942.32" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_default_append (652 samples, 0.72%)</title><rect x="502.4" y="229" width="8.5" height="15.0" fill="rgb(226,54,2)" rx="2" ry="2" />
<text  x="505.39" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_erase_at_end (784 samples, 0.87%)</title><rect x="510.9" y="229" width="10.3" height="15.0" fill="rgb(224,54,47)" rx="2" ry="2" />
<text  x="513.94" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (520 samples, 0.58%)</title><rect x="705.5" y="197" width="6.9" height="15.0" fill="rgb(217,226,12)" rx="2" ry="2" />
<text  x="708.53" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_erase (17 samples, 0.02%)</title><rect x="1066.2" y="133" width="0.2" height="15.0" fill="rgb(244,16,52)" rx="2" ry="2" />
<text  x="1069.19" y="143.5" ></text>
</g>
<g >
<title>WaveElem::Compare::operator() (969 samples, 1.08%)</title><rect x="396.8" y="133" width="12.7" height="15.0" fill="rgb(208,105,49)" rx="2" ry="2" />
<text  x="399.81" y="143.5" ></text>
</g>
<g >
<title>ezgl::point2d::point2d (14 samples, 0.02%)</title><rect x="755.8" y="261" width="0.2" height="15.0" fill="rgb(251,192,11)" rx="2" ry="2" />
<text  x="758.81" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::emplace_back&lt;ezgl::point2d&gt; (45 samples, 0.05%)</title><rect x="1099.3" y="197" width="0.6" height="15.0" fill="rgb(207,227,13)" rx="2" ry="2" />
<text  x="1102.33" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (30 samples, 0.03%)</title><rect x="811.8" y="149" width="0.4" height="15.0" fill="rgb(221,171,53)" rx="2" ry="2" />
<text  x="814.79" y="159.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (169 samples, 0.19%)</title><rect x="793.9" y="117" width="2.2" height="15.0" fill="rgb(229,171,32)" rx="2" ry="2" />
<text  x="796.87" y="127.5" ></text>
</g>
<g >
<title>WaveElem::WaveElem (33 samples, 0.04%)</title><rect x="533.3" y="261" width="0.4" height="15.0" fill="rgb(210,108,49)" rx="2" ry="2" />
<text  x="536.29" y="271.5" ></text>
</g>
<g >
<title>LatlonToXY (149 samples, 0.17%)</title><rect x="1068.6" y="165" width="1.9" height="15.0" fill="rgb(221,0,20)" rx="2" ry="2" />
<text  x="1071.56" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;WaveElem::Compare&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, WaveElem&gt; (74 samples, 0.08%)</title><rect x="422.5" y="117" width="0.9" height="15.0" fill="rgb(227,168,48)" rx="2" ry="2" />
<text  x="425.47" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (553 samples, 0.61%)</title><rect x="675.3" y="133" width="7.3" height="15.0" fill="rgb(213,176,32)" rx="2" ry="2" />
<text  x="678.34" y="143.5" ></text>
</g>
<g >
<title>__strlen_evex (70 samples, 0.08%)</title><rect x="1090.7" y="165" width="0.9" height="15.0" fill="rgb(230,58,34)" rx="2" ry="2" />
<text  x="1093.72" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (50 samples, 0.06%)</title><rect x="774.8" y="197" width="0.7" height="15.0" fill="rgb(241,51,4)" rx="2" ry="2" />
<text  x="777.83" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (129 samples, 0.14%)</title><rect x="909.2" y="261" width="1.7" height="15.0" fill="rgb(216,44,22)" rx="2" ry="2" />
<text  x="912.21" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (9 samples, 0.01%)</title><rect x="705.3" y="133" width="0.1" height="15.0" fill="rgb(228,52,23)" rx="2" ry="2" />
<text  x="708.29" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (20 samples, 0.02%)</title><rect x="690.9" y="149" width="0.3" height="15.0" fill="rgb(209,185,2)" rx="2" ry="2" />
<text  x="693.91" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::_M_realloc_insert&lt;int&amp;, int&amp;, double&amp;, double&amp;&gt; (48 samples, 0.05%)</title><rect x="169.6" y="181" width="0.7" height="15.0" fill="rgb(252,179,31)" rx="2" ry="2" />
<text  x="172.64" y="191.5" ></text>
</g>
<g >
<title>unlink_chunk (63 samples, 0.07%)</title><rect x="1065.1" y="117" width="0.8" height="15.0" fill="rgb(244,55,38)" rx="2" ry="2" />
<text  x="1068.05" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (308 samples, 0.34%)</title><rect x="737.5" y="197" width="4.1" height="15.0" fill="rgb(254,147,14)" rx="2" ry="2" />
<text  x="740.53" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (27 samples, 0.03%)</title><rect x="1017.7" y="261" width="0.3" height="15.0" fill="rgb(240,164,29)" rx="2" ry="2" />
<text  x="1020.68" y="271.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (512 samples, 0.57%)</title><rect x="536.9" y="261" width="6.7" height="15.0" fill="rgb(237,63,39)" rx="2" ry="2" />
<text  x="539.90" y="271.5" ></text>
</g>
<g >
<title>loadMap (266 samples, 0.30%)</title><rect x="637.4" y="229" width="3.5" height="15.0" fill="rgb(220,74,4)" rx="2" ry="2" />
<text  x="640.45" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;sdb::Feature, std::allocator&lt;sdb::Feature&gt; &gt; &gt;::load_object_data (193 samples, 0.21%)</title><rect x="811.1" y="197" width="2.5" height="15.0" fill="rgb(214,67,13)" rx="2" ry="2" />
<text  x="814.07" y="207.5" ></text>
</g>
<g >
<title>GlobalVars::GlobalVars (20 samples, 0.02%)</title><rect x="10.2" y="261" width="0.2" height="15.0" fill="rgb(205,157,32)" rx="2" ry="2" />
<text  x="13.18" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (20 samples, 0.02%)</title><rect x="624.1" y="261" width="0.2" height="15.0" fill="rgb(213,197,1)" rx="2" ry="2" />
<text  x="627.08" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (188 samples, 0.21%)</title><rect x="702.7" y="149" width="2.5" height="15.0" fill="rgb(249,90,34)" rx="2" ry="2" />
<text  x="705.74" y="159.5" ></text>
</g>
<g >
<title>__dynamic_cast (113 samples, 0.13%)</title><rect x="726.0" y="149" width="1.5" height="15.0" fill="rgb(224,193,22)" rx="2" ry="2" />
<text  x="728.97" y="159.5" ></text>
</g>
<g >
<title>getStreetSegmentCurvePoint (8 samples, 0.01%)</title><rect x="758.3" y="261" width="0.1" height="15.0" fill="rgb(243,18,19)" rx="2" ry="2" />
<text  x="761.34" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (12 samples, 0.01%)</title><rect x="828.5" y="261" width="0.1" height="15.0" fill="rgb(251,54,38)" rx="2" ry="2" />
<text  x="831.46" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (32 samples, 0.04%)</title><rect x="698.3" y="165" width="0.4" height="15.0" fill="rgb(213,129,12)" rx="2" ry="2" />
<text  x="701.31" y="175.5" ></text>
</g>
<g >
<title>loadOSMDatabaseBIN (514 samples, 0.57%)</title><rect x="760.3" y="245" width="6.7" height="15.0" fill="rgb(226,50,37)" rx="2" ry="2" />
<text  x="763.27" y="255.5" ></text>
</g>
<g >
<title>populateNodeIdToNodeMap (5,069 samples, 5.63%)</title><rect x="1106.0" y="213" width="66.4" height="15.0" fill="rgb(244,202,26)" rx="2" ry="2" />
<text  x="1108.95" y="223.5" >populat..</text>
</g>
<g >
<title>strcmp@plt (8 samples, 0.01%)</title><rect x="690.8" y="101" width="0.1" height="15.0" fill="rgb(214,141,39)" rx="2" ry="2" />
<text  x="693.80" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::pop_back (19 samples, 0.02%)</title><rect x="453.7" y="213" width="0.2" height="15.0" fill="rgb(213,74,12)" rx="2" ry="2" />
<text  x="456.67" y="223.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;ezgl::point2d*, ezgl::point2d*, std::allocator&lt;ezgl::point2d&gt; &gt; (28 samples, 0.03%)</title><rect x="937.7" y="261" width="0.4" height="15.0" fill="rgb(210,72,32)" rx="2" ry="2" />
<text  x="940.71" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (8 samples, 0.01%)</title><rect x="721.1" y="149" width="0.1" height="15.0" fill="rgb(238,75,4)" rx="2" ry="2" />
<text  x="724.06" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, TypedOSMID&gt;::load_object_data (36 samples, 0.04%)</title><rect x="741.6" y="197" width="0.5" height="15.0" fill="rgb(235,93,35)" rx="2" ry="2" />
<text  x="744.58" y="207.5" ></text>
</g>
<g >
<title>LatLon::longitude (17 samples, 0.02%)</title><rect x="10.8" y="261" width="0.2" height="15.0" fill="rgb(222,157,25)" rx="2" ry="2" />
<text  x="13.76" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (32 samples, 0.04%)</title><rect x="1062.9" y="165" width="0.4" height="15.0" fill="rgb(224,127,13)" rx="2" ry="2" />
<text  x="1065.90" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (22 samples, 0.02%)</title><rect x="808.6" y="165" width="0.2" height="15.0" fill="rgb(225,145,24)" rx="2" ry="2" />
<text  x="811.55" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_insert_&lt;int const&amp;, std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_Alloc_node&gt; (15 samples, 0.02%)</title><rect x="639.9" y="165" width="0.2" height="15.0" fill="rgb(232,162,35)" rx="2" ry="2" />
<text  x="642.87" y="175.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (143 samples, 0.16%)</title><rect x="642.6" y="261" width="1.9" height="15.0" fill="rgb(224,133,43)" rx="2" ry="2" />
<text  x="645.64" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (18 samples, 0.02%)</title><rect x="670.7" y="165" width="0.2" height="15.0" fill="rgb(208,209,34)" rx="2" ry="2" />
<text  x="673.66" y="175.5" ></text>
</g>
<g >
<title>mapData (405 samples, 0.45%)</title><rect x="1179.9" y="277" width="5.4" height="15.0" fill="rgb(219,204,19)" rx="2" ry="2" />
<text  x="1182.94" y="287.5" ></text>
</g>
<g >
<title>operator new (455 samples, 0.51%)</title><rect x="1164.0" y="149" width="5.9" height="15.0" fill="rgb(247,41,12)" rx="2" ry="2" />
<text  x="1166.96" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (9 samples, 0.01%)</title><rect x="700.2" y="181" width="0.1" height="15.0" fill="rgb(229,150,6)" rx="2" ry="2" />
<text  x="703.17" y="191.5" ></text>
</g>
<g >
<title>vtable for boost::serialization::detail::singleton_wrapper&lt;boost::serialization::extended_type_info_typeid&lt;OSMWay&gt; &gt; (16 samples, 0.02%)</title><rect x="1188.9" y="277" width="0.2" height="15.0" fill="rgb(214,198,24)" rx="2" ry="2" />
<text  x="1191.94" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, OSMID&amp;&amp;&gt;::_Tuple_impl (11 samples, 0.01%)</title><rect x="1163.4" y="133" width="0.1" height="15.0" fill="rgb(251,145,6)" rx="2" ry="2" />
<text  x="1166.37" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::size (13 samples, 0.01%)</title><rect x="1013.3" y="261" width="0.2" height="15.0" fill="rgb(212,126,12)" rx="2" ry="2" />
<text  x="1016.35" y="271.5" ></text>
</g>
<g >
<title>std::_Construct&lt;ezgl::point2d, ezgl::point2d const&amp;&gt; (45 samples, 0.05%)</title><rect x="823.7" y="261" width="0.6" height="15.0" fill="rgb(244,192,18)" rx="2" ry="2" />
<text  x="826.71" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10 samples, 0.01%)</title><rect x="905.4" y="261" width="0.2" height="15.0" fill="rgb(218,6,36)" rx="2" ry="2" />
<text  x="908.44" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (19 samples, 0.02%)</title><rect x="699.3" y="149" width="0.3" height="15.0" fill="rgb(236,167,37)" rx="2" ry="2" />
<text  x="702.32" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::front (28 samples, 0.03%)</title><rect x="1010.3" y="261" width="0.4" height="15.0" fill="rgb(207,223,12)" rx="2" ry="2" />
<text  x="1013.35" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (81 samples, 0.09%)</title><rect x="827.0" y="261" width="1.0" height="15.0" fill="rgb(241,214,53)" rx="2" ry="2" />
<text  x="829.95" y="271.5" ></text>
</g>
<g >
<title>loadOSMWays (12 samples, 0.01%)</title><rect x="640.1" y="213" width="0.1" height="15.0" fill="rgb(231,5,16)" rx="2" ry="2" />
<text  x="643.08" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (21 samples, 0.02%)</title><rect x="1063.0" y="69" width="0.3" height="15.0" fill="rgb(242,126,30)" rx="2" ry="2" />
<text  x="1066.05" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (165 samples, 0.18%)</title><rect x="1176.0" y="165" width="2.1" height="15.0" fill="rgb(247,34,30)" rx="2" ry="2" />
<text  x="1178.98" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (53 samples, 0.06%)</title><rect x="1178.5" y="117" width="0.7" height="15.0" fill="rgb(246,9,42)" rx="2" ry="2" />
<text  x="1181.48" y="127.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (105 samples, 0.12%)</title><rect x="672.6" y="133" width="1.4" height="15.0" fill="rgb(232,180,48)" rx="2" ry="2" />
<text  x="675.59" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (29 samples, 0.03%)</title><rect x="1062.9" y="101" width="0.4" height="15.0" fill="rgb(244,144,31)" rx="2" ry="2" />
<text  x="1065.94" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_check_len (15 samples, 0.02%)</title><rect x="1082.3" y="181" width="0.2" height="15.0" fill="rgb(213,167,48)" rx="2" ry="2" />
<text  x="1085.28" y="191.5" ></text>
</g>
<g >
<title>loadSubwayStations (51 samples, 0.06%)</title><rect x="816.3" y="261" width="0.7" height="15.0" fill="rgb(247,173,5)" rx="2" ry="2" />
<text  x="819.29" y="271.5" ></text>
</g>
<g >
<title>Street_segment_data::~Street_segment_data (142 samples, 0.16%)</title><rect x="1064.1" y="165" width="1.8" height="15.0" fill="rgb(236,58,4)" rx="2" ry="2" />
<text  x="1067.08" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::vector (34 samples, 0.04%)</title><rect x="1073.7" y="149" width="0.5" height="15.0" fill="rgb(236,21,20)" rx="2" ry="2" />
<text  x="1076.72" y="159.5" ></text>
</g>
<g >
<title>LatlonToXY (70 samples, 0.08%)</title><rect x="11.0" y="261" width="0.9" height="15.0" fill="rgb(235,221,37)" rx="2" ry="2" />
<text  x="13.98" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, OSMID&amp;&amp;&gt;::_Tuple_impl (20 samples, 0.02%)</title><rect x="832.9" y="261" width="0.2" height="15.0" fill="rgb(233,25,43)" rx="2" ry="2" />
<text  x="835.85" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (13 samples, 0.01%)</title><rect x="640.3" y="165" width="0.2" height="15.0" fill="rgb(218,193,1)" rx="2" ry="2" />
<text  x="643.28" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::push_back (24 samples, 0.03%)</title><rect x="1077.8" y="181" width="0.3" height="15.0" fill="rgb(241,68,54)" rx="2" ry="2" />
<text  x="1080.75" y="191.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (144 samples, 0.16%)</title><rect x="702.9" y="117" width="1.9" height="15.0" fill="rgb(252,3,16)" rx="2" ry="2" />
<text  x="705.94" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (238 samples, 0.26%)</title><rect x="717.9" y="181" width="3.2" height="15.0" fill="rgb(253,62,26)" rx="2" ry="2" />
<text  x="720.94" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;OSMID const, OSMNode const*&gt;::pair&lt;OSMID&amp;&amp;, 0ul&gt; (29 samples, 0.03%)</title><rect x="1163.5" y="117" width="0.4" height="15.0" fill="rgb(232,216,35)" rx="2" ry="2" />
<text  x="1166.52" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_get_insert_unique_pos (94 samples, 0.10%)</title><rect x="1082.8" y="165" width="1.3" height="15.0" fill="rgb(219,158,17)" rx="2" ry="2" />
<text  x="1085.84" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;Feature_data, std::allocator&lt;Feature_data&gt; &gt;::~vector (45 samples, 0.05%)</title><rect x="1063.4" y="197" width="0.6" height="15.0" fill="rgb(247,215,22)" rx="2" ry="2" />
<text  x="1066.36" y="207.5" ></text>
</g>
<g >
<title>getFeaturePoint (56 samples, 0.06%)</title><rect x="1071.4" y="181" width="0.8" height="15.0" fill="rgb(236,47,36)" rx="2" ry="2" />
<text  x="1074.44" y="191.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (19 samples, 0.02%)</title><rect x="731.9" y="165" width="0.2" height="15.0" fill="rgb(249,35,43)" rx="2" ry="2" />
<text  x="734.87" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (25 samples, 0.03%)</title><rect x="1063.0" y="85" width="0.3" height="15.0" fill="rgb(235,170,10)" rx="2" ry="2" />
<text  x="1065.99" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator++ (9 samples, 0.01%)</title><rect x="118.4" y="213" width="0.1" height="15.0" fill="rgb(246,155,51)" rx="2" ry="2" />
<text  x="121.38" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (41 samples, 0.05%)</title><rect x="712.4" y="165" width="0.5" height="15.0" fill="rgb(230,18,51)" rx="2" ry="2" />
<text  x="715.35" y="175.5" ></text>
</g>
<g >
<title>loadMap (8,629 samples, 9.59%)</title><rect x="1066.5" y="229" width="113.2" height="15.0" fill="rgb(205,212,8)" rx="2" ry="2" />
<text  x="1069.52" y="239.5" >loadMap</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;WaveElem::Compare&gt;::operator()&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, WaveElem&gt; (312 samples, 0.35%)</title><rect x="447.3" y="181" width="4.1" height="15.0" fill="rgb(210,224,10)" rx="2" ry="2" />
<text  x="450.27" y="191.5" ></text>
</g>
<g >
<title>loadIntersectionofStreets (136 samples, 0.15%)</title><rect x="1082.6" y="213" width="1.8" height="15.0" fill="rgb(238,163,47)" rx="2" ry="2" />
<text  x="1085.58" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (86 samples, 0.10%)</title><rect x="1178.2" y="181" width="1.1" height="15.0" fill="rgb(250,10,4)" rx="2" ry="2" />
<text  x="1181.18" y="191.5" ></text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, WaveElem::Compare&gt; (145 samples, 0.16%)</title><rect x="980.9" y="261" width="1.9" height="15.0" fill="rgb(234,155,5)" rx="2" ry="2" />
<text  x="983.86" y="271.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;OSMID&gt; (37 samples, 0.04%)</title><rect x="966.9" y="261" width="0.5" height="15.0" fill="rgb(215,46,28)" rx="2" ry="2" />
<text  x="969.92" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (159 samples, 0.18%)</title><rect x="646.3" y="261" width="2.1" height="15.0" fill="rgb(210,188,2)" rx="2" ry="2" />
<text  x="649.31" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_S_max_size (23 samples, 0.03%)</title><rect x="1076.8" y="149" width="0.3" height="15.0" fill="rgb(252,26,51)" rx="2" ry="2" />
<text  x="1079.78" y="159.5" ></text>
</g>
<g >
<title>getFeaturePoint (62 samples, 0.07%)</title><rect x="1070.5" y="165" width="0.8" height="15.0" fill="rgb(226,182,5)" rx="2" ry="2" />
<text  x="1073.51" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMDatabase&gt;::load_object_data (824 samples, 0.92%)</title><rect x="702.1" y="261" width="10.8" height="15.0" fill="rgb(212,191,54)" rx="2" ry="2" />
<text  x="705.08" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;sdb::Feature, std::allocator&lt;sdb::Feature&gt; &gt; &gt;::load_object_data (102 samples, 0.11%)</title><rect x="695.3" y="213" width="1.4" height="15.0" fill="rgb(246,224,42)" rx="2" ry="2" />
<text  x="698.34" y="223.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (173 samples, 0.19%)</title><rect x="702.9" y="133" width="2.3" height="15.0" fill="rgb(219,159,50)" rx="2" ry="2" />
<text  x="705.94" y="143.5" ></text>
</g>
<g >
<title>findDistanceBetweenTwoPoints (37 samples, 0.04%)</title><rect x="1092.7" y="181" width="0.5" height="15.0" fill="rgb(229,206,36)" rx="2" ry="2" />
<text  x="1095.73" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::end (227 samples, 0.25%)</title><rect x="170.3" y="197" width="2.9" height="15.0" fill="rgb(243,129,12)" rx="2" ry="2" />
<text  x="173.27" y="207.5" ></text>
</g>
<g >
<title>getIntersectionName[abi:cxx11] (20 samples, 0.02%)</title><rect x="760.0" y="229" width="0.3" height="15.0" fill="rgb(209,71,42)" rx="2" ry="2" />
<text  x="763.01" y="239.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (235 samples, 0.26%)</title><rect x="782.5" y="133" width="3.1" height="15.0" fill="rgb(243,203,7)" rx="2" ry="2" />
<text  x="785.54" y="143.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="1099.5" y="165" width="0.2" height="15.0" fill="rgb(230,61,16)" rx="2" ry="2" />
<text  x="1102.55" y="175.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, OSMID&amp;&amp;&gt;::_M_head (8 samples, 0.01%)</title><rect x="1163.4" y="117" width="0.1" height="15.0" fill="rgb(228,164,34)" rx="2" ry="2" />
<text  x="1166.41" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_node&lt;int const&amp;&gt; (43 samples, 0.05%)</title><rect x="501.8" y="197" width="0.6" height="15.0" fill="rgb(215,18,48)" rx="2" ry="2" />
<text  x="504.80" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;OSMWay, std::allocator&lt;OSMWay&gt; &gt;::_M_default_append (38 samples, 0.04%)</title><rect x="809.7" y="181" width="0.5" height="15.0" fill="rgb(212,18,47)" rx="2" ry="2" />
<text  x="812.73" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt; (459 samples, 0.51%)</title><rect x="629.1" y="261" width="6.0" height="15.0" fill="rgb(244,194,19)" rx="2" ry="2" />
<text  x="632.09" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (132 samples, 0.15%)</title><rect x="714.2" y="213" width="1.7" height="15.0" fill="rgb(227,101,5)" rx="2" ry="2" />
<text  x="717.16" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (24 samples, 0.03%)</title><rect x="615.5" y="261" width="0.3" height="15.0" fill="rgb(240,50,46)" rx="2" ry="2" />
<text  x="618.46" y="271.5" ></text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;WaveElem::Compare&gt; &gt; (18,904 samples, 21.01%)</title><rect x="175.5" y="181" width="247.9" height="15.0" fill="rgb(239,122,0)" rx="2" ry="2" />
<text  x="178.49" y="191.5" >std::__pop_heap&lt;__gnu_cxx::__norm..</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (8 samples, 0.01%)</title><rect x="1084.2" y="149" width="0.1" height="15.0" fill="rgb(214,117,18)" rx="2" ry="2" />
<text  x="1087.23" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (53 samples, 0.06%)</title><rect x="1163.3" y="149" width="0.7" height="15.0" fill="rgb(211,32,18)" rx="2" ry="2" />
<text  x="1166.27" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (20 samples, 0.02%)</title><rect x="696.8" y="165" width="0.2" height="15.0" fill="rgb(247,125,5)" rx="2" ry="2" />
<text  x="699.76" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (48 samples, 0.05%)</title><rect x="695.3" y="165" width="0.7" height="15.0" fill="rgb(213,130,3)" rx="2" ry="2" />
<text  x="698.34" y="175.5" ></text>
</g>
<g >
<title>loadStreetSegmentData (23 samples, 0.03%)</title><rect x="810.7" y="261" width="0.3" height="15.0" fill="rgb(226,7,31)" rx="2" ry="2" />
<text  x="813.70" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Node&gt; (64 samples, 0.07%)</title><rect x="512.9" y="197" width="0.8" height="15.0" fill="rgb(251,168,41)" rx="2" ry="2" />
<text  x="515.88" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_realloc_insert&lt;ezgl::point2d const&amp;&gt; (57 samples, 0.06%)</title><rect x="1011.7" y="261" width="0.7" height="15.0" fill="rgb(228,128,22)" rx="2" ry="2" />
<text  x="1014.67" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (403 samples, 0.45%)</title><rect x="811.0" y="213" width="5.3" height="15.0" fill="rgb(217,97,46)" rx="2" ry="2" />
<text  x="814.00" y="223.5" ></text>
</g>
<g >
<title>findStreetSegmentTravelTime (23 samples, 0.03%)</title><rect x="756.4" y="261" width="0.3" height="15.0" fill="rgb(242,172,11)" rx="2" ry="2" />
<text  x="759.36" y="271.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (57 samples, 0.06%)</title><rect x="720.2" y="133" width="0.7" height="15.0" fill="rgb(218,211,21)" rx="2" ry="2" />
<text  x="723.19" y="143.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load (19 samples, 0.02%)</title><rect x="696.1" y="165" width="0.2" height="15.0" fill="rgb(231,156,36)" rx="2" ry="2" />
<text  x="699.06" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (37 samples, 0.04%)</title><rect x="697.3" y="229" width="0.5" height="15.0" fill="rgb(214,199,25)" rx="2" ry="2" />
<text  x="700.35" y="239.5" ></text>
</g>
<g >
<title>__dynamic_cast (10 samples, 0.01%)</title><rect x="717.8" y="149" width="0.1" height="15.0" fill="rgb(250,99,36)" rx="2" ry="2" />
<text  x="720.81" y="159.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (36 samples, 0.04%)</title><rect x="723.1" y="133" width="0.4" height="15.0" fill="rgb(215,62,10)" rx="2" ry="2" />
<text  x="726.06" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::_M_get_insert_equal_pos (11 samples, 0.01%)</title><rect x="1084.4" y="181" width="0.1" height="15.0" fill="rgb(236,49,5)" rx="2" ry="2" />
<text  x="1087.40" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (109 samples, 0.12%)</title><rect x="683.6" y="149" width="1.4" height="15.0" fill="rgb(217,163,2)" rx="2" ry="2" />
<text  x="686.55" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMRelation, std::allocator&lt;OSMRelation&gt; &gt; &gt;::load_object_data (13 samples, 0.01%)</title><rect x="682.7" y="213" width="0.2" height="15.0" fill="rgb(249,64,54)" rx="2" ry="2" />
<text  x="685.69" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (64 samples, 0.07%)</title><rect x="714.2" y="197" width="0.8" height="15.0" fill="rgb(220,132,13)" rx="2" ry="2" />
<text  x="717.16" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (86 samples, 0.10%)</title><rect x="834.0" y="261" width="1.2" height="15.0" fill="rgb(241,96,1)" rx="2" ry="2" />
<text  x="837.04" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (345 samples, 0.38%)</title><rect x="737.5" y="245" width="4.6" height="15.0" fill="rgb(254,213,9)" rx="2" ry="2" />
<text  x="740.53" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (9 samples, 0.01%)</title><rect x="684.9" y="117" width="0.1" height="15.0" fill="rgb(254,106,6)" rx="2" ry="2" />
<text  x="687.86" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (11 samples, 0.01%)</title><rect x="1171.0" y="181" width="0.1" height="15.0" fill="rgb(231,93,36)" rx="2" ry="2" />
<text  x="1173.96" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;WaveElem&gt;::construct&lt;WaveElem, int&amp;, int&amp;, double&amp;, double&amp;&gt; (85 samples, 0.09%)</title><rect x="166.9" y="181" width="1.1" height="15.0" fill="rgb(228,96,33)" rx="2" ry="2" />
<text  x="169.86" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMWay&gt;::load_object_data (41 samples, 0.05%)</title><rect x="712.4" y="197" width="0.5" height="15.0" fill="rgb(225,144,1)" rx="2" ry="2" />
<text  x="715.35" y="207.5" ></text>
</g>
<g >
<title>loadIntersectionofStreets (15 samples, 0.02%)</title><rect x="639.9" y="213" width="0.2" height="15.0" fill="rgb(210,80,25)" rx="2" ry="2" />
<text  x="642.87" y="223.5" ></text>
</g>
<g >
<title>__memcmp_evex_movbe (34 samples, 0.04%)</title><rect x="1090.3" y="165" width="0.4" height="15.0" fill="rgb(238,156,36)" rx="2" ry="2" />
<text  x="1093.28" y="175.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (18 samples, 0.02%)</title><rect x="674.0" y="133" width="0.2" height="15.0" fill="rgb(222,125,17)" rx="2" ry="2" />
<text  x="676.96" y="143.5" ></text>
</g>
<g >
<title>checked_request2size (10 samples, 0.01%)</title><rect x="1075.5" y="133" width="0.2" height="15.0" fill="rgb(234,124,7)" rx="2" ry="2" />
<text  x="1078.55" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (10 samples, 0.01%)</title><rect x="717.8" y="245" width="0.1" height="15.0" fill="rgb(235,73,20)" rx="2" ry="2" />
<text  x="720.81" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator* (630 samples, 0.70%)</title><rect x="282.8" y="149" width="8.3" height="15.0" fill="rgb(220,11,51)" rx="2" ry="2" />
<text  x="285.81" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (107 samples, 0.12%)</title><rect x="617.0" y="261" width="1.4" height="15.0" fill="rgb(219,26,7)" rx="2" ry="2" />
<text  x="620.04" y="271.5" ></text>
</g>
<g >
<title>checked_request2size (18 samples, 0.02%)</title><rect x="473.3" y="133" width="0.2" height="15.0" fill="rgb(245,77,32)" rx="2" ry="2" />
<text  x="476.30" y="143.5" ></text>
</g>
<g >
<title>loadIntersectionData (47 samples, 0.05%)</title><rect x="817.0" y="229" width="0.6" height="15.0" fill="rgb(210,24,11)" rx="2" ry="2" />
<text  x="819.97" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;int, std::allocator&lt;int&gt; &gt;::_M_insert&lt;int const&amp;&gt; (44 samples, 0.05%)</title><rect x="501.8" y="213" width="0.6" height="15.0" fill="rgb(249,121,17)" rx="2" ry="2" />
<text  x="504.78" y="223.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (28 samples, 0.03%)</title><rect x="696.3" y="149" width="0.4" height="15.0" fill="rgb(210,187,27)" rx="2" ry="2" />
<text  x="699.31" y="159.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (13 samples, 0.01%)</title><rect x="695.2" y="149" width="0.1" height="15.0" fill="rgb(205,207,16)" rx="2" ry="2" />
<text  x="698.16" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt; (27 samples, 0.03%)</title><rect x="175.1" y="181" width="0.4" height="15.0" fill="rgb(213,14,31)" rx="2" ry="2" />
<text  x="178.13" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (237 samples, 0.26%)</title><rect x="414.4" y="117" width="3.1" height="15.0" fill="rgb(216,112,37)" rx="2" ry="2" />
<text  x="417.38" y="127.5" ></text>
</g>
<g >
<title>std::forward&lt;std::piecewise_construct_t const&amp;&gt; (8 samples, 0.01%)</title><rect x="1184.6" y="261" width="0.1" height="15.0" fill="rgb(223,85,47)" rx="2" ry="2" />
<text  x="1187.64" y="271.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.02%)</title><rect x="699.3" y="181" width="0.3" height="15.0" fill="rgb(232,111,34)" rx="2" ry="2" />
<text  x="702.32" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (92 samples, 0.10%)</title><rect x="742.1" y="261" width="1.2" height="15.0" fill="rgb(244,22,51)" rx="2" ry="2" />
<text  x="745.05" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (87 samples, 0.10%)</title><rect x="688.3" y="149" width="1.2" height="15.0" fill="rgb(239,99,0)" rx="2" ry="2" />
<text  x="691.33" y="159.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.01%)</title><rect x="683.4" y="149" width="0.1" height="15.0" fill="rgb(205,223,27)" rx="2" ry="2" />
<text  x="686.37" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMID, std::allocator&lt;OSMID&gt; &gt; &gt;::load_object_data (520 samples, 0.58%)</title><rect x="705.5" y="181" width="6.9" height="15.0" fill="rgb(241,170,23)" rx="2" ry="2" />
<text  x="708.53" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, EdgeProperties&gt;::load_object_data (16 samples, 0.02%)</title><rect x="700.1" y="213" width="0.2" height="15.0" fill="rgb(245,224,53)" rx="2" ry="2" />
<text  x="703.08" y="223.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Intersection_data*&gt; (9 samples, 0.01%)</title><rect x="1064.0" y="181" width="0.1" height="15.0" fill="rgb(227,156,50)" rx="2" ry="2" />
<text  x="1066.95" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::emplace_back&lt;int&amp;, int&amp;, double&amp;, double&amp;&gt; (265 samples, 0.29%)</title><rect x="1000.9" y="261" width="3.4" height="15.0" fill="rgb(213,117,47)" rx="2" ry="2" />
<text  x="1003.86" y="271.5" ></text>
</g>
<g >
<title>loadStreetSegmentData (42 samples, 0.05%)</title><rect x="640.2" y="213" width="0.6" height="15.0" fill="rgb(252,11,40)" rx="2" ry="2" />
<text  x="643.24" y="223.5" ></text>
</g>
<g >
<title>_int_free (132 samples, 0.15%)</title><rect x="1064.1" y="149" width="1.8" height="15.0" fill="rgb(232,123,20)" rx="2" ry="2" />
<text  x="1067.15" y="159.5" ></text>
</g>
<g >
<title>getIntersectionStreetSegment (85 samples, 0.09%)</title><rect x="1080.7" y="197" width="1.1" height="15.0" fill="rgb(237,91,52)" rx="2" ry="2" />
<text  x="1083.70" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (11 samples, 0.01%)</title><rect x="700.3" y="229" width="0.1" height="15.0" fill="rgb(224,84,41)" rx="2" ry="2" />
<text  x="703.29" y="239.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (25 samples, 0.03%)</title><rect x="684.4" y="117" width="0.3" height="15.0" fill="rgb(219,59,20)" rx="2" ry="2" />
<text  x="687.38" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;ezgl::point2d&gt; &gt;::construct&lt;ezgl::point2d, ezgl::point2d&gt; (12 samples, 0.01%)</title><rect x="946.1" y="261" width="0.1" height="15.0" fill="rgb(217,176,23)" rx="2" ry="2" />
<text  x="949.06" y="271.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (42 samples, 0.05%)</title><rect x="740.6" y="133" width="0.5" height="15.0" fill="rgb(228,49,44)" rx="2" ry="2" />
<text  x="743.57" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt; &gt; &gt;::load_object_data (11 samples, 0.01%)</title><rect x="700.3" y="213" width="0.1" height="15.0" fill="rgb(243,189,41)" rx="2" ry="2" />
<text  x="703.29" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (19 samples, 0.02%)</title><rect x="700.0" y="229" width="0.3" height="15.0" fill="rgb(221,99,33)" rx="2" ry="2" />
<text  x="703.04" y="239.5" ></text>
</g>
<g >
<title>loadIntersectionData (24 samples, 0.03%)</title><rect x="1080.3" y="213" width="0.3" height="15.0" fill="rgb(221,149,39)" rx="2" ry="2" />
<text  x="1083.33" y="223.5" ></text>
</g>
<g >
<title>findStreetSegmentTravelTime (145 samples, 0.16%)</title><rect x="154.5" y="213" width="1.9" height="15.0" fill="rgb(217,77,10)" rx="2" ry="2" />
<text  x="157.50" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_S_key (11 samples, 0.01%)</title><rect x="830.9" y="261" width="0.2" height="15.0" fill="rgb(234,222,35)" rx="2" ry="2" />
<text  x="833.93" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (304 samples, 0.34%)</title><rect x="691.2" y="165" width="4.0" height="15.0" fill="rgb(251,154,15)" rx="2" ry="2" />
<text  x="694.17" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, TypedOSMID&gt;::load_object_data (15 samples, 0.02%)</title><rect x="699.6" y="181" width="0.2" height="15.0" fill="rgb(215,77,26)" rx="2" ry="2" />
<text  x="702.57" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem const*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (100 samples, 0.11%)</title><rect x="550.1" y="261" width="1.3" height="15.0" fill="rgb(224,56,0)" rx="2" ry="2" />
<text  x="553.08" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;::_M_addr (8 samples, 0.01%)</title><rect x="549.4" y="261" width="0.2" height="15.0" fill="rgb(248,166,37)" rx="2" ry="2" />
<text  x="552.45" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (10 samples, 0.01%)</title><rect x="738.8" y="165" width="0.1" height="15.0" fill="rgb(236,98,38)" rx="2" ry="2" />
<text  x="741.77" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (1,757 samples, 1.95%)</title><rect x="319.0" y="133" width="23.1" height="15.0" fill="rgb(246,43,13)" rx="2" ry="2" />
<text  x="322.05" y="143.5" >_..</text>
</g>
<g >
<title>std::_Vector_base&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10 samples, 0.01%)</title><rect x="1073.5" y="117" width="0.1" height="15.0" fill="rgb(241,72,7)" rx="2" ry="2" />
<text  x="1076.47" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;::load_object_data (40 samples, 0.04%)</title><rect x="700.4" y="261" width="0.6" height="15.0" fill="rgb(237,122,30)" rx="2" ry="2" />
<text  x="703.45" y="271.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (14 samples, 0.02%)</title><rect x="639.5" y="165" width="0.2" height="15.0" fill="rgb(212,15,31)" rx="2" ry="2" />
<text  x="642.55" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (8 samples, 0.01%)</title><rect x="962.6" y="261" width="0.1" height="15.0" fill="rgb(240,145,11)" rx="2" ry="2" />
<text  x="965.56" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (10 samples, 0.01%)</title><rect x="1016.0" y="261" width="0.1" height="15.0" fill="rgb(249,175,37)" rx="2" ry="2" />
<text  x="1019.00" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, EdgeProperties&gt;::load_object_data (18 samples, 0.02%)</title><rect x="670.4" y="245" width="0.2" height="15.0" fill="rgb(244,181,39)" rx="2" ry="2" />
<text  x="673.38" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (288 samples, 0.32%)</title><rect x="730.2" y="197" width="3.8" height="15.0" fill="rgb(239,75,8)" rx="2" ry="2" />
<text  x="733.23" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (94 samples, 0.10%)</title><rect x="685.0" y="245" width="1.2" height="15.0" fill="rgb(252,55,41)" rx="2" ry="2" />
<text  x="687.98" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (12 samples, 0.01%)</title><rect x="118.5" y="213" width="0.2" height="15.0" fill="rgb(253,81,16)" rx="2" ry="2" />
<text  x="121.50" y="223.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load (8 samples, 0.01%)</title><rect x="700.3" y="165" width="0.1" height="15.0" fill="rgb(219,71,41)" rx="2" ry="2" />
<text  x="703.33" y="175.5" ></text>
</g>
<g >
<title>populateWayIdToWayMap (554 samples, 0.62%)</title><rect x="1172.4" y="213" width="7.3" height="15.0" fill="rgb(225,192,4)" rx="2" ry="2" />
<text  x="1175.44" y="223.5" ></text>
</g>
<g >
<title>__libc_start_main (12,273 samples, 13.64%)</title><rect x="1018.7" y="261" width="161.0" height="15.0" fill="rgb(206,86,33)" rx="2" ry="2" />
<text  x="1021.73" y="271.5" >__libc_start_main</text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, LatLon&gt;::load_object_data (85 samples, 0.09%)</title><rect x="701.0" y="261" width="1.1" height="15.0" fill="rgb(210,127,30)" rx="2" ry="2" />
<text  x="703.97" y="271.5" ></text>
</g>
<g >
<title>getStreetSegmentInfo (10 samples, 0.01%)</title><rect x="1096.7" y="197" width="0.1" height="15.0" fill="rgb(230,139,37)" rx="2" ry="2" />
<text  x="1099.68" y="207.5" ></text>
</g>
<g >
<title>strcmp@plt (16 samples, 0.02%)</title><rect x="801.1" y="149" width="0.2" height="15.0" fill="rgb(218,28,33)" rx="2" ry="2" />
<text  x="804.09" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (45 samples, 0.05%)</title><rect x="1013.8" y="261" width="0.6" height="15.0" fill="rgb(237,2,44)" rx="2" ry="2" />
<text  x="1016.82" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (10 samples, 0.01%)</title><rect x="717.8" y="197" width="0.1" height="15.0" fill="rgb(216,49,19)" rx="2" ry="2" />
<text  x="720.81" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (58 samples, 0.06%)</title><rect x="1189.2" y="261" width="0.7" height="15.0" fill="rgb(241,29,51)" rx="2" ry="2" />
<text  x="1192.19" y="271.5" ></text>
</g>
<g >
<title>unlink_chunk (17 samples, 0.02%)</title><rect x="1018.0" y="261" width="0.3" height="15.0" fill="rgb(205,55,15)" rx="2" ry="2" />
<text  x="1021.04" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (514 samples, 0.57%)</title><rect x="760.3" y="229" width="6.7" height="15.0" fill="rgb(211,24,27)" rx="2" ry="2" />
<text  x="763.27" y="239.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt;@plt (11 samples, 0.01%)</title><rect x="692.1" y="133" width="0.1" height="15.0" fill="rgb(241,170,25)" rx="2" ry="2" />
<text  x="695.08" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::empty (220 samples, 0.24%)</title><rect x="1004.3" y="261" width="2.9" height="15.0" fill="rgb(245,77,50)" rx="2" ry="2" />
<text  x="1007.34" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (123 samples, 0.14%)</title><rect x="708.0" y="149" width="1.6" height="15.0" fill="rgb(225,174,18)" rx="2" ry="2" />
<text  x="710.99" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (238 samples, 0.26%)</title><rect x="702.1" y="213" width="3.1" height="15.0" fill="rgb(229,120,41)" rx="2" ry="2" />
<text  x="705.08" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (16 samples, 0.02%)</title><rect x="721.4" y="261" width="0.2" height="15.0" fill="rgb(246,117,29)" rx="2" ry="2" />
<text  x="724.38" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;Node*, unsigned long&gt; (652 samples, 0.72%)</title><rect x="502.4" y="213" width="8.5" height="15.0" fill="rgb(216,128,1)" rx="2" ry="2" />
<text  x="505.39" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator* (50 samples, 0.06%)</title><rect x="409.5" y="133" width="0.7" height="15.0" fill="rgb(235,72,36)" rx="2" ry="2" />
<text  x="412.52" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (16 samples, 0.02%)</title><rect x="721.6" y="261" width="0.2" height="15.0" fill="rgb(241,41,23)" rx="2" ry="2" />
<text  x="724.60" y="271.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (70 samples, 0.08%)</title><rect x="736.2" y="117" width="0.9" height="15.0" fill="rgb(232,144,8)" rx="2" ry="2" />
<text  x="739.21" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::front (60 samples, 0.07%)</title><rect x="452.9" y="213" width="0.8" height="15.0" fill="rgb(209,186,16)" rx="2" ry="2" />
<text  x="455.89" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt;::load_object_data (45 samples, 0.05%)</title><rect x="775.6" y="197" width="0.6" height="15.0" fill="rgb(220,27,31)" rx="2" ry="2" />
<text  x="778.59" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::__normal_iterator (1,694 samples, 1.88%)</title><rect x="552.8" y="261" width="22.2" height="15.0" fill="rgb(249,85,17)" rx="2" ry="2" />
<text  x="555.81" y="271.5" >_..</text>
</g>
<g >
<title>__atan2 (84 samples, 0.09%)</title><rect x="1094.2" y="181" width="1.1" height="15.0" fill="rgb(219,210,1)" rx="2" ry="2" />
<text  x="1097.24" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::end (108 samples, 0.12%)</title><rect x="162.1" y="181" width="1.4" height="15.0" fill="rgb(208,224,36)" rx="2" ry="2" />
<text  x="165.10" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_create_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;OSMID const&amp;&gt;, std::tuple&lt;&gt; &gt; (12 samples, 0.01%)</title><rect x="640.1" y="165" width="0.1" height="15.0" fill="rgb(252,183,48)" rx="2" ry="2" />
<text  x="643.08" y="175.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (41 samples, 0.05%)</title><rect x="690.4" y="117" width="0.5" height="15.0" fill="rgb(239,222,14)" rx="2" ry="2" />
<text  x="693.37" y="127.5" ></text>
</g>
<g >
<title>loadOSMWays (555 samples, 0.62%)</title><rect x="1085.3" y="213" width="7.2" height="15.0" fill="rgb(236,166,54)" rx="2" ry="2" />
<text  x="1088.27" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::push_back (14 samples, 0.02%)</title><rect x="1013.2" y="261" width="0.1" height="15.0" fill="rgb(216,114,4)" rx="2" ry="2" />
<text  x="1016.17" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_S_right (9 samples, 0.01%)</title><rect x="832.1" y="261" width="0.1" height="15.0" fill="rgb(250,173,0)" rx="2" ry="2" />
<text  x="835.05" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (25 samples, 0.03%)</title><rect x="1088.1" y="197" width="0.3" height="15.0" fill="rgb(231,11,54)" rx="2" ry="2" />
<text  x="1091.06" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (14 samples, 0.02%)</title><rect x="1082.0" y="165" width="0.2" height="15.0" fill="rgb(206,222,23)" rx="2" ry="2" />
<text  x="1085.01" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string@plt (8 samples, 0.01%)</title><rect x="1088.5" y="197" width="0.1" height="15.0" fill="rgb(237,130,27)" rx="2" ry="2" />
<text  x="1091.47" y="207.5" ></text>
</g>
<g >
<title>std::__addressof&lt;Node&gt; (213 samples, 0.24%)</title><rect x="837.3" y="261" width="2.8" height="15.0" fill="rgb(221,145,54)" rx="2" ry="2" />
<text  x="840.34" y="271.5" ></text>
</g>
<g >
<title>loadMap (54 samples, 0.06%)</title><rect x="817.0" y="245" width="0.7" height="15.0" fill="rgb(229,151,15)" rx="2" ry="2" />
<text  x="819.96" y="255.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (130 samples, 0.14%)</title><rect x="710.1" y="133" width="1.7" height="15.0" fill="rgb(209,84,22)" rx="2" ry="2" />
<text  x="713.10" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (403 samples, 0.45%)</title><rect x="811.0" y="245" width="5.3" height="15.0" fill="rgb(234,198,50)" rx="2" ry="2" />
<text  x="814.00" y="255.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMID&gt;::load_object_data (14 samples, 0.02%)</title><rect x="697.2" y="181" width="0.1" height="15.0" fill="rgb(233,47,8)" rx="2" ry="2" />
<text  x="700.17" y="191.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (31 samples, 0.03%)</title><rect x="690.4" y="101" width="0.4" height="15.0" fill="rgb(229,105,36)" rx="2" ry="2" />
<text  x="693.40" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (95 samples, 0.11%)</title><rect x="728.5" y="149" width="1.3" height="15.0" fill="rgb(236,220,32)" rx="2" ry="2" />
<text  x="731.54" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (88 samples, 0.10%)</title><rect x="796.9" y="165" width="1.2" height="15.0" fill="rgb(212,170,46)" rx="2" ry="2" />
<text  x="799.92" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (96 samples, 0.11%)</title><rect x="689.7" y="133" width="1.2" height="15.0" fill="rgb(239,51,13)" rx="2" ry="2" />
<text  x="692.65" y="143.5" ></text>
</g>
<g >
<title>[unknown] (107 samples, 0.12%)</title><rect x="533.7" y="261" width="1.4" height="15.0" fill="rgb(238,139,39)" rx="2" ry="2" />
<text  x="536.72" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (3,294 samples, 3.66%)</title><rect x="767.0" y="245" width="43.2" height="15.0" fill="rgb(218,45,42)" rx="2" ry="2" />
<text  x="770.02" y="255.5" >boos..</text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (11 samples, 0.01%)</title><rect x="1063.2" y="37" width="0.1" height="15.0" fill="rgb(251,164,20)" rx="2" ry="2" />
<text  x="1066.18" y="47.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt; &gt;::load_object_data (57 samples, 0.06%)</title><rect x="745.2" y="197" width="0.7" height="15.0" fill="rgb(251,42,49)" rx="2" ry="2" />
<text  x="748.20" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;sdb::Feature, std::allocator&lt;sdb::Feature&gt; &gt; &gt;::load_object_data (345 samples, 0.38%)</title><rect x="737.5" y="261" width="4.6" height="15.0" fill="rgb(231,108,6)" rx="2" ry="2" />
<text  x="740.53" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;LatLon, std::allocator&lt;LatLon&gt; &gt;::_M_default_append (13 samples, 0.01%)</title><rect x="695.8" y="149" width="0.2" height="15.0" fill="rgb(250,214,14)" rx="2" ry="2" />
<text  x="698.80" y="159.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (1,766 samples, 1.96%)</title><rect x="475.6" y="181" width="23.1" height="15.0" fill="rgb(211,70,42)" rx="2" ry="2" />
<text  x="478.57" y="191.5" >s..</text>
</g>
<g >
<title>loadOSMDatabaseBIN (3,294 samples, 3.66%)</title><rect x="767.0" y="261" width="43.2" height="15.0" fill="rgb(236,160,9)" rx="2" ry="2" />
<text  x="770.02" y="271.5" >load..</text>
</g>
<g >
<title>operator new (15 samples, 0.02%)</title><rect x="729.8" y="149" width="0.2" height="15.0" fill="rgb(243,41,52)" rx="2" ry="2" />
<text  x="732.81" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (143 samples, 0.16%)</title><rect x="1090.0" y="197" width="1.9" height="15.0" fill="rgb(241,217,41)" rx="2" ry="2" />
<text  x="1092.99" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem const*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator* (27 samples, 0.03%)</title><rect x="552.5" y="261" width="0.3" height="15.0" fill="rgb(218,172,5)" rx="2" ry="2" />
<text  x="555.45" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (123 samples, 0.14%)</title><rect x="1126.6" y="149" width="1.6" height="15.0" fill="rgb(248,41,54)" rx="2" ry="2" />
<text  x="1129.57" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_S_key (24 samples, 0.03%)</title><rect x="1083.7" y="149" width="0.3" height="15.0" fill="rgb(242,130,51)" rx="2" ry="2" />
<text  x="1086.68" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (28 samples, 0.03%)</title><rect x="685.4" y="149" width="0.4" height="15.0" fill="rgb(224,87,51)" rx="2" ry="2" />
<text  x="688.40" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;double&gt;::allocate (13 samples, 0.01%)</title><rect x="640.3" y="133" width="0.2" height="15.0" fill="rgb(216,109,22)" rx="2" ry="2" />
<text  x="643.28" y="143.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (42 samples, 0.05%)</title><rect x="698.7" y="197" width="0.6" height="15.0" fill="rgb(218,69,21)" rx="2" ry="2" />
<text  x="701.73" y="207.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (116 samples, 0.13%)</title><rect x="641.1" y="261" width="1.5" height="15.0" fill="rgb(247,159,0)" rx="2" ry="2" />
<text  x="644.09" y="271.5" ></text>
</g>
<g >
<title>operator new (48 samples, 0.05%)</title><rect x="637.4" y="101" width="0.7" height="15.0" fill="rgb(252,132,37)" rx="2" ry="2" />
<text  x="640.45" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;WaveElem&gt;::construct&lt;WaveElem, int&amp;, int&amp;, double&amp;, double&amp;&gt; (207 samples, 0.23%)</title><rect x="619.9" y="261" width="2.7" height="15.0" fill="rgb(206,225,16)" rx="2" ry="2" />
<text  x="622.88" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (53 samples, 0.06%)</title><rect x="618.4" y="261" width="0.7" height="15.0" fill="rgb(220,86,47)" rx="2" ry="2" />
<text  x="621.44" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt; (57 samples, 0.06%)</title><rect x="177.0" y="165" width="0.7" height="15.0" fill="rgb(249,149,7)" rx="2" ry="2" />
<text  x="179.97" y="175.5" ></text>
</g>
<g >
<title>_int_free (1,873 samples, 2.08%)</title><rect x="1018.7" y="197" width="24.6" height="15.0" fill="rgb(238,131,22)" rx="2" ry="2" />
<text  x="1021.73" y="207.5" >_..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (10 samples, 0.01%)</title><rect x="691.0" y="133" width="0.1" height="15.0" fill="rgb(253,15,3)" rx="2" ry="2" />
<text  x="693.99" y="143.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;WaveElem*, WaveElem*, std::allocator&lt;WaveElem&gt; &gt; (9 samples, 0.01%)</title><rect x="938.2" y="261" width="0.1" height="15.0" fill="rgb(223,51,37)" rx="2" ry="2" />
<text  x="941.17" y="271.5" ></text>
</g>
<g >
<title>boost::archive::basic_binary_iprimitive&lt;boost::archive::binary_iarchive, char, std::char_traits&lt;char&gt; &gt;::load_binary (32 samples, 0.04%)</title><rect x="659.8" y="261" width="0.4" height="15.0" fill="rgb(221,181,26)" rx="2" ry="2" />
<text  x="662.78" y="271.5" ></text>
</g>
<g >
<title>std::map&lt;OSMID, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (11 samples, 0.01%)</title><rect x="967.9" y="261" width="0.1" height="15.0" fill="rgb(234,148,48)" rx="2" ry="2" />
<text  x="970.89" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (72 samples, 0.08%)</title><rect x="513.7" y="197" width="1.0" height="15.0" fill="rgb(235,180,19)" rx="2" ry="2" />
<text  x="516.72" y="207.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (9 samples, 0.01%)</title><rect x="760.1" y="181" width="0.1" height="15.0" fill="rgb(225,86,14)" rx="2" ry="2" />
<text  x="763.07" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (48 samples, 0.05%)</title><rect x="637.4" y="85" width="0.7" height="15.0" fill="rgb(241,52,33)" rx="2" ry="2" />
<text  x="640.45" y="95.5" ></text>
</g>
<g >
<title>operator new (254 samples, 0.28%)</title><rect x="818.0" y="261" width="3.4" height="15.0" fill="rgb(244,141,51)" rx="2" ry="2" />
<text  x="821.03" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMWay const*&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (159 samples, 0.18%)</title><rect x="1060.8" y="165" width="2.1" height="15.0" fill="rgb(212,129,45)" rx="2" ry="2" />
<text  x="1063.80" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (416 samples, 0.46%)</title><rect x="514.7" y="197" width="5.4" height="15.0" fill="rgb(206,45,53)" rx="2" ry="2" />
<text  x="517.66" y="207.5" ></text>
</g>
<g >
<title>_int_free (8 samples, 0.01%)</title><rect x="1098.9" y="181" width="0.1" height="15.0" fill="rgb(235,85,37)" rx="2" ry="2" />
<text  x="1101.87" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMRelation, std::allocator&lt;OSMRelation&gt; &gt; &gt;::load_object_data (10 samples, 0.01%)</title><rect x="730.1" y="261" width="0.1" height="15.0" fill="rgb(205,28,20)" rx="2" ry="2" />
<text  x="733.10" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (348 samples, 0.39%)</title><rect x="470.7" y="197" width="4.6" height="15.0" fill="rgb(217,54,0)" rx="2" ry="2" />
<text  x="473.74" y="207.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (45 samples, 0.05%)</title><rect x="694.5" y="101" width="0.6" height="15.0" fill="rgb(245,181,9)" rx="2" ry="2" />
<text  x="697.52" y="111.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, StreetsDatabase&gt;::load_object_data (403 samples, 0.45%)</title><rect x="811.0" y="229" width="5.3" height="15.0" fill="rgb(244,75,50)" rx="2" ry="2" />
<text  x="814.00" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (10 samples, 0.01%)</title><rect x="717.6" y="181" width="0.1" height="15.0" fill="rgb(217,84,14)" rx="2" ry="2" />
<text  x="720.61" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (13 samples, 0.01%)</title><rect x="474.6" y="165" width="0.2" height="15.0" fill="rgb(229,71,23)" rx="2" ry="2" />
<text  x="477.63" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (10 samples, 0.01%)</title><rect x="717.6" y="229" width="0.1" height="15.0" fill="rgb(251,163,14)" rx="2" ry="2" />
<text  x="720.61" y="239.5" ></text>
</g>
<g >
<title>_int_malloc (21 samples, 0.02%)</title><rect x="640.5" y="149" width="0.2" height="15.0" fill="rgb(231,174,1)" rx="2" ry="2" />
<text  x="643.45" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMNode, std::allocator&lt;OSMNode&gt; &gt; &gt;::load_object_data (238 samples, 0.26%)</title><rect x="702.1" y="229" width="3.1" height="15.0" fill="rgb(243,48,33)" rx="2" ry="2" />
<text  x="705.08" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (9 samples, 0.01%)</title><rect x="745.8" y="181" width="0.1" height="15.0" fill="rgb(219,215,35)" rx="2" ry="2" />
<text  x="748.78" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (40 samples, 0.04%)</title><rect x="712.4" y="149" width="0.5" height="15.0" fill="rgb(244,100,12)" rx="2" ry="2" />
<text  x="715.37" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (37 samples, 0.04%)</title><rect x="696.7" y="213" width="0.5" height="15.0" fill="rgb(252,71,54)" rx="2" ry="2" />
<text  x="699.68" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;OSMID, std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_lower_bound (62 samples, 0.07%)</title><rect x="1089.2" y="181" width="0.8" height="15.0" fill="rgb(235,55,19)" rx="2" ry="2" />
<text  x="1092.17" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (206 samples, 0.23%)</title><rect x="471.6" y="149" width="2.7" height="15.0" fill="rgb(223,205,42)" rx="2" ry="2" />
<text  x="474.64" y="159.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (103 samples, 0.11%)</title><rect x="535.2" y="261" width="1.3" height="15.0" fill="rgb(253,177,21)" rx="2" ry="2" />
<text  x="538.15" y="271.5" ></text>
</g>
<g >
<title>populateNodeIdToNodeMap (39 samples, 0.04%)</title><rect x="534.3" y="245" width="0.5" height="15.0" fill="rgb(238,109,11)" rx="2" ry="2" />
<text  x="537.31" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::begin (50 samples, 0.06%)</title><rect x="163.5" y="197" width="0.7" height="15.0" fill="rgb(231,5,20)" rx="2" ry="2" />
<text  x="166.51" y="207.5" ></text>
</g>
<g >
<title>vtable for boost::serialization::detail::singleton_wrapper&lt;boost::serialization::extended_type_info_typeid&lt;OSMID&gt; &gt; (86 samples, 0.10%)</title><rect x="1186.8" y="277" width="1.1" height="15.0" fill="rgb(254,171,37)" rx="2" ry="2" />
<text  x="1189.76" y="287.5" ></text>
</g>
<g >
<title>boost::serialization::load&lt;boost::archive::binary_iarchive, boost::vecS, boost::vecS, boost::undirectedS, NodeInfo, EdgeProperties, boost::no_property, boost::vecS&gt; (60 samples, 0.07%)</title><rect x="745.2" y="261" width="0.7" height="15.0" fill="rgb(248,163,53)" rx="2" ry="2" />
<text  x="748.16" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::set&lt;int, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::set&lt;int, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;::~vector (25 samples, 0.03%)</title><rect x="1066.1" y="197" width="0.3" height="15.0" fill="rgb(251,5,16)" rx="2" ry="2" />
<text  x="1069.09" y="207.5" ></text>
</g>
<g >
<title>std::tuple&lt;OSMID&amp;&amp;&gt;::tuple&lt;OSMID, true, true&gt; (10 samples, 0.01%)</title><rect x="1171.3" y="165" width="0.2" height="15.0" fill="rgb(227,143,19)" rx="2" ry="2" />
<text  x="1174.34" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;WaveElem const*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt; (150 samples, 0.17%)</title><rect x="635.4" y="261" width="2.0" height="15.0" fill="rgb(231,180,48)" rx="2" ry="2" />
<text  x="638.44" y="271.5" ></text>
</g>
<g >
<title>__memset_evex_erms (8 samples, 0.01%)</title><rect x="775.5" y="165" width="0.1" height="15.0" fill="rgb(229,207,45)" rx="2" ry="2" />
<text  x="778.48" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (10 samples, 0.01%)</title><rect x="717.6" y="245" width="0.1" height="15.0" fill="rgb(225,148,37)" rx="2" ry="2" />
<text  x="720.61" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (12 samples, 0.01%)</title><rect x="534.9" y="245" width="0.2" height="15.0" fill="rgb(243,204,16)" rx="2" ry="2" />
<text  x="537.93" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;ezgl::point2d*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt; (22 samples, 0.02%)</title><rect x="635.1" y="261" width="0.3" height="15.0" fill="rgb(240,2,17)" rx="2" ry="2" />
<text  x="638.11" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (16 samples, 0.02%)</title><rect x="1184.0" y="261" width="0.3" height="15.0" fill="rgb(205,125,41)" rx="2" ry="2" />
<text  x="1187.05" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_erase (12 samples, 0.01%)</title><rect x="1066.3" y="69" width="0.1" height="15.0" fill="rgb(219,109,41)" rx="2" ry="2" />
<text  x="1069.26" y="79.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (15 samples, 0.02%)</title><rect x="639.9" y="117" width="0.2" height="15.0" fill="rgb(228,55,7)" rx="2" ry="2" />
<text  x="642.87" y="127.5" ></text>
</g>
<g >
<title>main (8,629 samples, 9.59%)</title><rect x="1066.5" y="245" width="113.2" height="15.0" fill="rgb(212,136,38)" rx="2" ry="2" />
<text  x="1069.52" y="255.5" >main</text>
</g>
<g >
<title>getTagPair[abi:cxx11] (27 samples, 0.03%)</title><rect x="758.7" y="261" width="0.4" height="15.0" fill="rgb(236,72,38)" rx="2" ry="2" />
<text  x="761.75" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (27 samples, 0.03%)</title><rect x="474.9" y="181" width="0.4" height="15.0" fill="rgb(209,114,46)" rx="2" ry="2" />
<text  x="477.95" y="191.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (9 samples, 0.01%)</title><rect x="698.1" y="149" width="0.1" height="15.0" fill="rgb(250,193,30)" rx="2" ry="2" />
<text  x="701.11" y="159.5" ></text>
</g>
<g >
<title>Feature_data::Feature_data (48 samples, 0.05%)</title><rect x="637.4" y="165" width="0.7" height="15.0" fill="rgb(212,99,20)" rx="2" ry="2" />
<text  x="640.45" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (102 samples, 0.11%)</title><rect x="695.3" y="197" width="1.4" height="15.0" fill="rgb(238,83,15)" rx="2" ry="2" />
<text  x="698.34" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (19 samples, 0.02%)</title><rect x="699.3" y="165" width="0.3" height="15.0" fill="rgb(223,54,18)" rx="2" ry="2" />
<text  x="702.32" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (3,034 samples, 3.37%)</title><rect x="660.6" y="261" width="39.8" height="15.0" fill="rgb(228,21,49)" rx="2" ry="2" />
<text  x="663.64" y="271.5" >boo..</text>
</g>
<g >
<title>_int_malloc (488 samples, 0.54%)</title><rect x="768.0" y="181" width="6.4" height="15.0" fill="rgb(208,156,33)" rx="2" ry="2" />
<text  x="770.99" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (27 samples, 0.03%)</title><rect x="1084.8" y="165" width="0.3" height="15.0" fill="rgb(249,40,11)" rx="2" ry="2" />
<text  x="1087.79" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (77 samples, 0.09%)</title><rect x="505.9" y="181" width="1.0" height="15.0" fill="rgb(227,36,13)" rx="2" ry="2" />
<text  x="508.88" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (19 samples, 0.02%)</title><rect x="808.3" y="133" width="0.2" height="15.0" fill="rgb(236,180,40)" rx="2" ry="2" />
<text  x="811.27" y="143.5" ></text>
</g>
<g >
<title>_int_malloc (326 samples, 0.36%)</title><rect x="1165.2" y="117" width="4.3" height="15.0" fill="rgb(245,52,31)" rx="2" ry="2" />
<text  x="1168.22" y="127.5" ></text>
</g>
<g >
<title>distanceHeuristicFunc (213 samples, 0.24%)</title><rect x="752.7" y="261" width="2.8" height="15.0" fill="rgb(232,119,1)" rx="2" ry="2" />
<text  x="755.71" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt;::end (35 samples, 0.04%)</title><rect x="452.4" y="197" width="0.5" height="15.0" fill="rgb(251,164,37)" rx="2" ry="2" />
<text  x="455.43" y="207.5" ></text>
</g>
<g >
<title>loadFeatures (1,053 samples, 1.17%)</title><rect x="1066.5" y="213" width="13.8" height="15.0" fill="rgb(206,6,4)" rx="2" ry="2" />
<text  x="1069.52" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, TypedOSMID&gt;::load_object_data (14 samples, 0.02%)</title><rect x="697.2" y="213" width="0.1" height="15.0" fill="rgb(245,143,46)" rx="2" ry="2" />
<text  x="700.17" y="223.5" ></text>
</g>
<g >
<title>Feature_data::Feature_data (39 samples, 0.04%)</title><rect x="1073.7" y="165" width="0.5" height="15.0" fill="rgb(206,58,37)" rx="2" ry="2" />
<text  x="1076.66" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (22 samples, 0.02%)</title><rect x="454.3" y="213" width="0.3" height="15.0" fill="rgb(219,54,32)" rx="2" ry="2" />
<text  x="457.30" y="223.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (132 samples, 0.15%)</title><rect x="714.2" y="245" width="1.7" height="15.0" fill="rgb(214,29,52)" rx="2" ry="2" />
<text  x="717.16" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_create_node&lt;int const&amp;&gt; (15 samples, 0.02%)</title><rect x="639.9" y="149" width="0.2" height="15.0" fill="rgb(248,105,18)" rx="2" ry="2" />
<text  x="642.87" y="159.5" ></text>
</g>
<g >
<title>std::forward&lt;OSMID&gt; (23 samples, 0.03%)</title><rect x="958.1" y="261" width="0.3" height="15.0" fill="rgb(248,200,27)" rx="2" ry="2" />
<text  x="961.08" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, NodeInfo&gt;::load_object_data (15 samples, 0.02%)</title><rect x="814.2" y="165" width="0.2" height="15.0" fill="rgb(223,51,17)" rx="2" ry="2" />
<text  x="817.18" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt;, std::allocator&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; &gt;::load_object_data (10 samples, 0.01%)</title><rect x="717.6" y="197" width="0.1" height="15.0" fill="rgb(212,203,24)" rx="2" ry="2" />
<text  x="720.61" y="207.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (26 samples, 0.03%)</title><rect x="689.1" y="133" width="0.4" height="15.0" fill="rgb(226,198,42)" rx="2" ry="2" />
<text  x="692.13" y="143.5" ></text>
</g>
<g >
<title>__dynamic_cast (84 samples, 0.09%)</title><rect x="737.7" y="165" width="1.1" height="15.0" fill="rgb(253,109,35)" rx="2" ry="2" />
<text  x="740.67" y="175.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (47 samples, 0.05%)</title><rect x="726.8" y="133" width="0.7" height="15.0" fill="rgb(241,92,11)" rx="2" ry="2" />
<text  x="729.84" y="143.5" ></text>
</g>
<g >
<title>std::_Construct&lt;Street_segment_data&gt; (19 samples, 0.02%)</title><rect x="1098.1" y="165" width="0.3" height="15.0" fill="rgb(228,45,33)" rx="2" ry="2" />
<text  x="1101.11" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (172 samples, 0.19%)</title><rect x="735.0" y="149" width="2.2" height="15.0" fill="rgb(242,33,13)" rx="2" ry="2" />
<text  x="737.99" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_create_node&lt;int const&amp;&gt; (8 samples, 0.01%)</title><rect x="1084.1" y="149" width="0.1" height="15.0" fill="rgb(227,85,27)" rx="2" ry="2" />
<text  x="1087.11" y="159.5" ></text>
</g>
<g >
<title>loadStreetSegmentData (551 samples, 0.61%)</title><rect x="1093.8" y="213" width="7.3" height="15.0" fill="rgb(247,171,45)" rx="2" ry="2" />
<text  x="1096.84" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (230 samples, 0.26%)</title><rect x="1172.6" y="181" width="3.0" height="15.0" fill="rgb(249,82,20)" rx="2" ry="2" />
<text  x="1175.59" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;Street_segment_data*, unsigned long&gt; (24 samples, 0.03%)</title><rect x="1098.1" y="181" width="0.3" height="15.0" fill="rgb(234,1,45)" rx="2" ry="2" />
<text  x="1101.05" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (62 samples, 0.07%)</title><rect x="697.9" y="213" width="0.8" height="15.0" fill="rgb(211,112,34)" rx="2" ry="2" />
<text  x="700.91" y="223.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, long, WaveElem, __gnu_cxx::__ops::_Iter_comp_val&lt;WaveElem::Compare&gt; &gt; (1,339 samples, 1.49%)</title><rect x="920.1" y="261" width="17.6" height="15.0" fill="rgb(223,87,10)" rx="2" ry="2" />
<text  x="923.14" y="271.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (9 samples, 0.01%)</title><rect x="695.7" y="149" width="0.1" height="15.0" fill="rgb(213,3,9)" rx="2" ry="2" />
<text  x="698.68" y="159.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (8 samples, 0.01%)</title><rect x="966.5" y="261" width="0.1" height="15.0" fill="rgb(251,117,29)" rx="2" ry="2" />
<text  x="969.54" y="271.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.04%)</title><rect x="1075.4" y="165" width="0.5" height="15.0" fill="rgb(253,217,53)" rx="2" ry="2" />
<text  x="1078.36" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::vector (48 samples, 0.05%)</title><rect x="637.4" y="149" width="0.7" height="15.0" fill="rgb(246,203,39)" rx="2" ry="2" />
<text  x="640.45" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::_M_max_size (19 samples, 0.02%)</title><rect x="623.8" y="261" width="0.3" height="15.0" fill="rgb(247,31,45)" rx="2" ry="2" />
<text  x="626.83" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::_Tuple_impl (11 samples, 0.01%)</title><rect x="833.1" y="261" width="0.2" height="15.0" fill="rgb(211,132,13)" rx="2" ry="2" />
<text  x="836.12" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;ezgl::point2d&gt;::construct&lt;ezgl::point2d, ezgl::point2d const&amp;&gt; (39 samples, 0.04%)</title><rect x="623.0" y="261" width="0.5" height="15.0" fill="rgb(250,135,23)" rx="2" ry="2" />
<text  x="625.97" y="271.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;, long, WaveElem, __gnu_cxx::__ops::_Iter_comp_val&lt;WaveElem::Compare&gt; &gt; (2,755 samples, 3.06%)</title><rect x="387.3" y="149" width="36.1" height="15.0" fill="rgb(232,94,34)" rx="2" ry="2" />
<text  x="390.31" y="159.5" >std..</text>
</g>
<g >
<title>loadSubwayRelations (9 samples, 0.01%)</title><rect x="640.8" y="213" width="0.1" height="15.0" fill="rgb(247,222,36)" rx="2" ry="2" />
<text  x="643.79" y="223.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (24 samples, 0.03%)</title><rect x="813.0" y="149" width="0.3" height="15.0" fill="rgb(227,227,15)" rx="2" ry="2" />
<text  x="815.98" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt; &gt;::load_object_data (11 samples, 0.01%)</title><rect x="700.3" y="181" width="0.1" height="15.0" fill="rgb(205,82,47)" rx="2" ry="2" />
<text  x="703.29" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (57 samples, 0.06%)</title><rect x="1186.0" y="261" width="0.8" height="15.0" fill="rgb(253,130,5)" rx="2" ry="2" />
<text  x="1189.01" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMWay const*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (9 samples, 0.01%)</title><rect x="1177.9" y="133" width="0.2" height="15.0" fill="rgb(248,214,20)" rx="2" ry="2" />
<text  x="1180.93" y="143.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.01%)</title><rect x="640.3" y="85" width="0.2" height="15.0" fill="rgb(215,133,54)" rx="2" ry="2" />
<text  x="643.28" y="95.5" ></text>
</g>
<g >
<title>std::tie&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="991.5" y="261" width="0.1" height="15.0" fill="rgb(211,89,45)" rx="2" ry="2" />
<text  x="994.47" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_addr (9 samples, 0.01%)</title><rect x="549.8" y="261" width="0.1" height="15.0" fill="rgb(241,104,9)" rx="2" ry="2" />
<text  x="552.75" y="271.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (69 samples, 0.08%)</title><rect x="720.2" y="149" width="0.9" height="15.0" fill="rgb(243,214,26)" rx="2" ry="2" />
<text  x="723.16" y="159.5" ></text>
</g>
<g >
<title>std::less&lt;OSMID&gt;::operator() (12 samples, 0.01%)</title><rect x="1089.8" y="165" width="0.2" height="15.0" fill="rgb(244,124,18)" rx="2" ry="2" />
<text  x="1092.83" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;ezgl::point2d const*, std::vector&lt;ezgl::point2d, std::allocator&lt;ezgl::point2d&gt; &gt; &gt; &gt; (26 samples, 0.03%)</title><rect x="1077.4" y="165" width="0.3" height="15.0" fill="rgb(213,71,5)" rx="2" ry="2" />
<text  x="1080.37" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (109 samples, 0.12%)</title><rect x="683.6" y="165" width="1.4" height="15.0" fill="rgb(245,118,54)" rx="2" ry="2" />
<text  x="686.55" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast (116 samples, 0.13%)</title><rect x="787.4" y="149" width="1.5" height="15.0" fill="rgb(229,28,18)" rx="2" ry="2" />
<text  x="790.41" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (8 samples, 0.01%)</title><rect x="696.9" y="149" width="0.1" height="15.0" fill="rgb(216,7,26)" rx="2" ry="2" />
<text  x="699.85" y="159.5" ></text>
</g>
<g >
<title>dl_main (23 samples, 0.03%)</title><rect x="755.5" y="261" width="0.3" height="15.0" fill="rgb(239,202,50)" rx="2" ry="2" />
<text  x="758.51" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (66 samples, 0.07%)</title><rect x="826.1" y="261" width="0.9" height="15.0" fill="rgb(230,214,25)" rx="2" ry="2" />
<text  x="829.09" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (635 samples, 0.71%)</title><rect x="778.3" y="165" width="8.4" height="15.0" fill="rgb(216,36,14)" rx="2" ry="2" />
<text  x="781.33" y="175.5" ></text>
</g>
<g >
<title>tcache_put (24 samples, 0.03%)</title><rect x="120.8" y="197" width="0.3" height="15.0" fill="rgb(232,189,52)" rx="2" ry="2" />
<text  x="123.79" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::__detail::_Select1st, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_store_code (10 samples, 0.01%)</title><rect x="906.8" y="261" width="0.1" height="15.0" fill="rgb(225,143,41)" rx="2" ry="2" />
<text  x="909.75" y="271.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator() (10 samples, 0.01%)</title><rect x="832.7" y="261" width="0.1" height="15.0" fill="rgb(215,103,32)" rx="2" ry="2" />
<text  x="835.71" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (197 samples, 0.22%)</title><rect x="688.3" y="165" width="2.6" height="15.0" fill="rgb(240,61,35)" rx="2" ry="2" />
<text  x="691.33" y="175.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (30 samples, 0.03%)</title><rect x="979.4" y="261" width="0.4" height="15.0" fill="rgb(226,106,53)" rx="2" ry="2" />
<text  x="982.44" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (13 samples, 0.01%)</title><rect x="682.7" y="149" width="0.2" height="15.0" fill="rgb(224,153,42)" rx="2" ry="2" />
<text  x="685.69" y="159.5" ></text>
</g>
<g >
<title>__cos_fma (27 samples, 0.03%)</title><rect x="536.5" y="261" width="0.4" height="15.0" fill="rgb(246,201,37)" rx="2" ry="2" />
<text  x="539.54" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (12 samples, 0.01%)</title><rect x="807.3" y="149" width="0.2" height="15.0" fill="rgb(213,187,37)" rx="2" ry="2" />
<text  x="810.33" y="159.5" ></text>
</g>
<g >
<title>do_cos (24 samples, 0.03%)</title><rect x="1100.7" y="165" width="0.3" height="15.0" fill="rgb(245,223,53)" rx="2" ry="2" />
<text  x="1103.68" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (27 samples, 0.03%)</title><rect x="812.4" y="149" width="0.3" height="15.0" fill="rgb(205,35,12)" rx="2" ry="2" />
<text  x="815.35" y="159.5" ></text>
</g>
<g >
<title>getIntersectionName[abi:cxx11] (135 samples, 0.15%)</title><rect x="638.1" y="197" width="1.8" height="15.0" fill="rgb(246,113,14)" rx="2" ry="2" />
<text  x="641.10" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (17 samples, 0.02%)</title><rect x="697.6" y="149" width="0.2" height="15.0" fill="rgb(218,179,47)" rx="2" ry="2" />
<text  x="700.61" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (10 samples, 0.01%)</title><rect x="1175.8" y="149" width="0.2" height="15.0" fill="rgb(253,198,32)" rx="2" ry="2" />
<text  x="1178.85" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (95 samples, 0.11%)</title><rect x="1131.6" y="149" width="1.3" height="15.0" fill="rgb(223,210,4)" rx="2" ry="2" />
<text  x="1134.62" y="159.5" ></text>
</g>
<g >
<title>vtable for boost::serialization::detail::singleton_wrapper&lt;boost::serialization::extended_type_info_typeid&lt;std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt; &gt; (58 samples, 0.06%)</title><rect x="1189.2" y="277" width="0.7" height="15.0" fill="rgb(249,228,36)" rx="2" ry="2" />
<text  x="1192.19" y="287.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (24 samples, 0.03%)</title><rect x="499.1" y="181" width="0.3" height="15.0" fill="rgb(229,116,48)" rx="2" ry="2" />
<text  x="502.07" y="191.5" ></text>
</g>
<g >
<title>memcpy@plt (11 samples, 0.01%)</title><rect x="673.8" y="117" width="0.2" height="15.0" fill="rgb(216,28,9)" rx="2" ry="2" />
<text  x="676.82" y="127.5" ></text>
</g>
<g >
<title>_int_free (8 samples, 0.01%)</title><rect x="1101.8" y="197" width="0.1" height="15.0" fill="rgb(238,190,7)" rx="2" ry="2" />
<text  x="1104.77" y="207.5" ></text>
</g>
<g >
<title>__memset_evex_erms (9 samples, 0.01%)</title><rect x="1177.9" y="117" width="0.2" height="15.0" fill="rgb(248,18,12)" rx="2" ry="2" />
<text  x="1180.93" y="127.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (22 samples, 0.02%)</title><rect x="705.2" y="165" width="0.3" height="15.0" fill="rgb(228,33,13)" rx="2" ry="2" />
<text  x="708.21" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (11 samples, 0.01%)</title><rect x="1077.4" y="133" width="0.1" height="15.0" fill="rgb(211,156,24)" rx="2" ry="2" />
<text  x="1080.40" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WaveElem*, std::vector&lt;WaveElem, std::allocator&lt;WaveElem&gt; &gt; &gt;::operator* (999 samples, 1.11%)</title><rect x="577.6" y="261" width="13.1" height="15.0" fill="rgb(248,131,29)" rx="2" ry="2" />
<text  x="580.60" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (215 samples, 0.24%)</title><rect x="702.4" y="165" width="2.8" height="15.0" fill="rgb(234,13,12)" rx="2" ry="2" />
<text  x="705.39" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast (95 samples, 0.11%)</title><rect x="722.3" y="149" width="1.2" height="15.0" fill="rgb(236,117,9)" rx="2" ry="2" />
<text  x="725.28" y="159.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (39 samples, 0.04%)</title><rect x="712.4" y="133" width="0.5" height="15.0" fill="rgb(246,145,44)" rx="2" ry="2" />
<text  x="715.38" y="143.5" ></text>
</g>
<g >
<title>operator delete@plt (23 samples, 0.03%)</title><rect x="1059.5" y="149" width="0.3" height="15.0" fill="rgb(218,34,8)" rx="2" ry="2" />
<text  x="1062.54" y="159.5" ></text>
</g>
<g >
<title>cairo_image_surface_create_from_png (20 samples, 0.02%)</title><rect x="10.2" y="229" width="0.2" height="15.0" fill="rgb(234,23,46)" rx="2" ry="2" />
<text  x="13.18" y="239.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (38 samples, 0.04%)</title><rect x="806.6" y="133" width="0.5" height="15.0" fill="rgb(228,188,23)" rx="2" ry="2" />
<text  x="809.64" y="143.5" ></text>
</g>
<g >
<title>std::map&lt;OSMID, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;OSMID&gt;, std::allocator&lt;std::pair&lt;OSMID const, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (59 samples, 0.07%)</title><rect x="1097.1" y="197" width="0.8" height="15.0" fill="rgb(253,81,37)" rx="2" ry="2" />
<text  x="1100.10" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;ezgl::point2d&gt; &gt;::construct&lt;ezgl::point2d, ezgl::point2d const&amp;&gt; (18 samples, 0.02%)</title><rect x="945.8" y="261" width="0.3" height="15.0" fill="rgb(211,107,7)" rx="2" ry="2" />
<text  x="948.83" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (34 samples, 0.04%)</title><rect x="685.8" y="165" width="0.4" height="15.0" fill="rgb(211,140,3)" rx="2" ry="2" />
<text  x="688.77" y="175.5" ></text>
</g>
<g >
<title>strcmp@plt (27 samples, 0.03%)</title><rect x="785.6" y="133" width="0.4" height="15.0" fill="rgb(218,99,50)" rx="2" ry="2" />
<text  x="788.62" y="143.5" ></text>
</g>
<g >
<title>Node::~Node (69 samples, 0.08%)</title><rect x="512.0" y="197" width="0.9" height="15.0" fill="rgb(223,146,3)" rx="2" ry="2" />
<text  x="514.98" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (20 samples, 0.02%)</title><rect x="697.3" y="165" width="0.3" height="15.0" fill="rgb(229,121,0)" rx="2" ry="2" />
<text  x="700.35" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;OSMID const, OSMWay const*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (8 samples, 0.01%)</title><rect x="775.5" y="181" width="0.1" height="15.0" fill="rgb(212,175,36)" rx="2" ry="2" />
<text  x="778.48" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;int&gt;::_M_ptr (9 samples, 0.01%)</title><rect x="1083.8" y="133" width="0.1" height="15.0" fill="rgb(219,176,36)" rx="2" ry="2" />
<text  x="1086.81" y="143.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (8 samples, 0.01%)</title><rect x="780.7" y="133" width="0.1" height="15.0" fill="rgb(238,142,49)" rx="2" ry="2" />
<text  x="783.65" y="143.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (22 samples, 0.02%)</title><rect x="913.6" y="261" width="0.3" height="15.0" fill="rgb(218,48,47)" rx="2" ry="2" />
<text  x="916.59" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (27 samples, 0.03%)</title><rect x="910.9" y="261" width="0.4" height="15.0" fill="rgb(249,183,51)" rx="2" ry="2" />
<text  x="913.90" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (13 samples, 0.01%)</title><rect x="699.8" y="213" width="0.2" height="15.0" fill="rgb(250,37,46)" rx="2" ry="2" />
<text  x="702.83" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (46 samples, 0.05%)</title><rect x="833.4" y="261" width="0.6" height="15.0" fill="rgb(247,196,9)" rx="2" ry="2" />
<text  x="836.43" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (87 samples, 0.10%)</title><rect x="806.0" y="165" width="1.2" height="15.0" fill="rgb(208,198,5)" rx="2" ry="2" />
<text  x="809.04" y="175.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::pair&lt;IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight, IndexedFlyweightFactory&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned int&gt;::Flyweight&gt; &gt;::load_object_data (165 samples, 0.18%)</title><rect x="693.0" y="149" width="2.2" height="15.0" fill="rgb(247,26,21)" rx="2" ry="2" />
<text  x="695.99" y="159.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (182 samples, 0.20%)</title><rect x="671.8" y="149" width="2.4" height="15.0" fill="rgb(229,204,21)" rx="2" ry="2" />
<text  x="674.81" y="159.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn@plt (18 samples, 0.02%)</title><rect x="741.3" y="149" width="0.3" height="15.0" fill="rgb(217,197,38)" rx="2" ry="2" />
<text  x="744.33" y="159.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (13 samples, 0.01%)</title><rect x="682.7" y="197" width="0.2" height="15.0" fill="rgb(229,195,44)" rx="2" ry="2" />
<text  x="685.69" y="207.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, OSMEntity&gt;::load_object_data (42 samples, 0.05%)</title><rect x="698.7" y="181" width="0.6" height="15.0" fill="rgb(248,161,44)" rx="2" ry="2" />
<text  x="701.73" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than (60 samples, 0.07%)</title><rect x="808.9" y="165" width="0.8" height="15.0" fill="rgb(231,147,36)" rx="2" ry="2" />
<text  x="811.93" y="175.5" ></text>
</g>
<g >
<title>getIntersectionPosition (13 samples, 0.01%)</title><rect x="1093.2" y="181" width="0.2" height="15.0" fill="rgb(241,162,46)" rx="2" ry="2" />
<text  x="1096.21" y="191.5" ></text>
</g>
<g >
<title>boost::serialization::extended_type_info::operator&lt; (56 samples, 0.06%)</title><rect x="719.1" y="149" width="0.7" height="15.0" fill="rgb(241,22,31)" rx="2" ry="2" />
<text  x="722.11" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (216 samples, 0.24%)</title><rect x="626.3" y="261" width="2.8" height="15.0" fill="rgb(244,179,30)" rx="2" ry="2" />
<text  x="629.26" y="271.5" ></text>
</g>
<g >
<title>std::abs (65 samples, 0.07%)</title><rect x="943.0" y="261" width="0.8" height="15.0" fill="rgb(207,76,53)" rx="2" ry="2" />
<text  x="945.97" y="271.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (11 samples, 0.01%)</title><rect x="814.2" y="149" width="0.2" height="15.0" fill="rgb(229,62,31)" rx="2" ry="2" />
<text  x="817.23" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,647 samples, 1.83%)</title><rect x="1107.7" y="181" width="21.6" height="15.0" fill="rgb(223,211,51)" rx="2" ry="2" />
<text  x="1110.72" y="191.5" >s..</text>
</g>
<g >
<title>[unknown] (12 samples, 0.01%)</title><rect x="534.0" y="229" width="0.2" height="15.0" fill="rgb(206,88,49)" rx="2" ry="2" />
<text  x="537.04" y="239.5" ></text>
</g>
<g >
<title>__memmove_evex_unaligned_erms (28 samples, 0.03%)</title><rect x="1087.3" y="181" width="0.3" height="15.0" fill="rgb(208,189,39)" rx="2" ry="2" />
<text  x="1090.26" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10 samples, 0.01%)</title><rect x="1096.8" y="197" width="0.1" height="15.0" fill="rgb(218,126,21)" rx="2" ry="2" />
<text  x="1099.81" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl_data::_Vector_impl_data (26 samples, 0.03%)</title><rect x="506.9" y="181" width="0.3" height="15.0" fill="rgb(251,126,17)" rx="2" ry="2" />
<text  x="509.89" y="191.5" ></text>
</g>
<g >
<title>boost::archive::detail::iserializer&lt;boost::archive::binary_iarchive, std::vector&lt;OSMWay, std::allocator&lt;OSMWay&gt; &gt; &gt;::load_object_data (561 samples, 0.62%)</title><rect x="705.5" y="229" width="7.4" height="15.0" fill="rgb(232,192,9)" rx="2" ry="2" />
<text  x="708.53" y="239.5" ></text>
</g>
<g >
<title>boost::archive::detail::basic_iarchive::load_object (561 samples, 0.62%)</title><rect x="705.5" y="213" width="7.4" height="15.0" fill="rgb(205,107,15)" rx="2" ry="2" />
<text  x="708.53" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (25 samples, 0.03%)</title><rect x="1175.7" y="165" width="0.3" height="15.0" fill="rgb(246,202,5)" rx="2" ry="2" />
<text  x="1178.65" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (8 samples, 0.01%)</title><rect x="471.4" y="165" width="0.1" height="15.0" fill="rgb(223,145,30)" rx="2" ry="2" />
<text  x="474.41" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;OSMID const, OSMNode const*&gt;, false, true&gt;::_Node_iterator (10 samples, 0.01%)</title><rect x="1162.7" y="165" width="0.1" height="15.0" fill="rgb(230,25,4)" rx="2" ry="2" />
<text  x="1165.72" y="175.5" ></text>
</g>
<g >
<title>Node::Node (180 samples, 0.20%)</title><rect x="11.9" y="261" width="2.4" height="15.0" fill="rgb(241,127,20)" rx="2" ry="2" />
<text  x="14.90" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMNode const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMNode const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (2,262 samples, 2.51%)</title><rect x="1132.9" y="149" width="29.6" height="15.0" fill="rgb(250,75,26)" rx="2" ry="2" />
<text  x="1135.87" y="159.5" >st..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_erase (9 samples, 0.01%)</title><rect x="1066.3" y="53" width="0.1" height="15.0" fill="rgb(212,114,0)" rx="2" ry="2" />
<text  x="1069.30" y="63.5" ></text>
</g>
<g >
<title>_int_malloc (32 samples, 0.04%)</title><rect x="698.3" y="149" width="0.4" height="15.0" fill="rgb(209,89,26)" rx="2" ry="2" />
<text  x="701.31" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;OSMID, std::pair&lt;OSMID const, OSMWay const*&gt;, std::allocator&lt;std::pair&lt;OSMID const, OSMWay const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;OSMID&gt;, std::hash&lt;OSMID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (12 samples, 0.01%)</title><rect x="828.3" y="261" width="0.2" height="15.0" fill="rgb(223,179,0)" rx="2" ry="2" />
<text  x="831.30" y="271.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.02%)</title><rect x="1059.3" y="149" width="0.2" height="15.0" fill="rgb(227,91,30)" rx="2" ry="2" />
<text  x="1062.31" y="159.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (75 samples, 0.08%)</title><rect x="732.9" y="149" width="1.0" height="15.0" fill="rgb(221,207,45)" rx="2" ry="2" />
<text  x="735.91" y="159.5" ></text>
</g>
</g>
</svg>
